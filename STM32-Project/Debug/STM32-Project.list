
STM32-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b10c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b884  0800b884  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b884  0800b884  0001b884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b88c  0800b88c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b890  0800b890  0001b890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004808  20000078  0800b90c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004880  0800b90c  00024880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c97e  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004699  00000000  00000000  0003ca69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00041108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001402  00000000  00000000  00042ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279c9  00000000  00000000  00043ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d6d  00000000  00000000  0006b88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea084  00000000  00000000  0008d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fd4  00000000  00000000  0017767c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b2c4 	.word	0x0800b2c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800b2c4 	.word	0x0800b2c4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <DHT_Delay>:


/********************* NO CHANGES AFTER THIS *************************************/

void DHT_Delay (uint16_t time)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <DHT_Delay+0x30>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 80005ee:	bf00      	nop
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <DHT_Delay+0x30>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3f9      	bcc.n	80005f0 <DHT_Delay+0x14>
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000868 	.word	0x20000868

08000610 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f002 fb1c 	bl	8002c7c <HAL_GPIO_Init>
}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000668:	887b      	ldrh	r3, [r7, #2]
 800066a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f002 fafe 	bl	8002c7c <HAL_GPIO_Init>
}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <DHT11_Start>:
uint16_t SUM;
int TEMP, RH;


void DHT11_Start (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 800068c:	2101      	movs	r1, #1
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <DHT11_Start+0x3c>)
 8000690:	f7ff ffbe 	bl	8000610 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <DHT11_Start+0x3c>)
 800069a:	f002 fc9b 	bl	8002fd4 <HAL_GPIO_WritePin>
	DHT_Delay (18000);   // wait for 18ms
 800069e:	f244 6050 	movw	r0, #18000	; 0x4650
 80006a2:	f7ff ff9b 	bl	80005dc <DHT_Delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80006a6:	2201      	movs	r2, #1
 80006a8:	2101      	movs	r1, #1
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <DHT11_Start+0x3c>)
 80006ac:	f002 fc92 	bl	8002fd4 <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 80006b0:	2014      	movs	r0, #20
 80006b2:	f7ff ff93 	bl	80005dc <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80006b6:	2101      	movs	r1, #1
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <DHT11_Start+0x3c>)
 80006ba:	f7ff ffc7 	bl	800064c <Set_Pin_Input>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000

080006c8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 80006d2:	2028      	movs	r0, #40	; 0x28
 80006d4:	f7ff ff82 	bl	80005dc <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80006d8:	2101      	movs	r1, #1
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <DHT11_Check_Response+0x58>)
 80006dc:	f002 fc62 	bl	8002fa4 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10e      	bne.n	8000704 <DHT11_Check_Response+0x3c>
	{
		DHT_Delay (80);
 80006e6:	2050      	movs	r0, #80	; 0x50
 80006e8:	f7ff ff78 	bl	80005dc <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80006ec:	2101      	movs	r1, #1
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <DHT11_Check_Response+0x58>)
 80006f0:	f002 fc58 	bl	8002fa4 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <DHT11_Check_Response+0x38>
 80006fa:	2301      	movs	r3, #1
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e001      	b.n	8000704 <DHT11_Check_Response+0x3c>
		else Response = -1;
 8000700:	23ff      	movs	r3, #255	; 0xff
 8000702:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000704:	bf00      	nop
 8000706:	2101      	movs	r1, #1
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <DHT11_Check_Response+0x58>)
 800070a:	f002 fc4b 	bl	8002fa4 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f8      	bne.n	8000706 <DHT11_Check_Response+0x3e>

	return Response;
 8000714:	79fb      	ldrb	r3, [r7, #7]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020000 	.word	0x40020000

08000724 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800072a:	2300      	movs	r3, #0
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	e037      	b.n	80007a0 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000730:	bf00      	nop
 8000732:	2101      	movs	r1, #1
 8000734:	481e      	ldr	r0, [pc, #120]	; (80007b0 <DHT11_Read+0x8c>)
 8000736:	f002 fc35 	bl	8002fa4 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0f8      	beq.n	8000732 <DHT11_Read+0xe>
		DHT_Delay (40);   // wait for 40 us
 8000740:	2028      	movs	r0, #40	; 0x28
 8000742:	f7ff ff4b 	bl	80005dc <DHT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000746:	2101      	movs	r1, #1
 8000748:	4819      	ldr	r0, [pc, #100]	; (80007b0 <DHT11_Read+0x8c>)
 800074a:	f002 fc2b 	bl	8002fa4 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10e      	bne.n	8000772 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	f1c3 0307 	rsb	r3, r3, #7
 800075a:	2201      	movs	r2, #1
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	b25b      	sxtb	r3, r3
 8000762:	43db      	mvns	r3, r3
 8000764:	b25a      	sxtb	r2, r3
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	4013      	ands	r3, r2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	e00b      	b.n	800078a <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	f1c3 0307 	rsb	r3, r3, #7
 8000778:	2201      	movs	r2, #1
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	4313      	orrs	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 800078a:	bf00      	nop
 800078c:	2101      	movs	r1, #1
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <DHT11_Read+0x8c>)
 8000790:	f002 fc08 	bl	8002fa4 <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f8      	bne.n	800078c <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	3301      	adds	r3, #1
 800079e:	71bb      	strb	r3, [r7, #6]
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d9c4      	bls.n	8000730 <DHT11_Read+0xc>
	}
	return i;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40020000 	.word	0x40020000

080007b4 <DHT11_Get_Data>:

uint8_t DHT11_Get_Data (int *Temperature, int *Humidity)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    DHT11_Start ();
 80007be:	f7ff ff63 	bl	8000688 <DHT11_Start>
	if (DHT11_Check_Response ())
 80007c2:	f7ff ff81 	bl	80006c8 <DHT11_Check_Response>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d044      	beq.n	8000856 <DHT11_Get_Data+0xa2>
	{
		Rh_byte1 = DHT11_Read ();
 80007cc:	f7ff ffaa 	bl	8000724 <DHT11_Read>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <DHT11_Get_Data+0xac>)
 80007d6:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_Read ();
 80007d8:	f7ff ffa4 	bl	8000724 <DHT11_Read>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <DHT11_Get_Data+0xb0>)
 80007e2:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_Read ();
 80007e4:	f7ff ff9e 	bl	8000724 <DHT11_Read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <DHT11_Get_Data+0xb4>)
 80007ee:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_Read ();
 80007f0:	f7ff ff98 	bl	8000724 <DHT11_Read>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <DHT11_Get_Data+0xb8>)
 80007fa:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read();
 80007fc:	f7ff ff92 	bl	8000724 <DHT11_Read>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <DHT11_Get_Data+0xbc>)
 8000806:	801a      	strh	r2, [r3, #0]

		if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <DHT11_Get_Data+0xbc>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <DHT11_Get_Data+0xac>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <DHT11_Get_Data+0xb0>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4413      	add	r3, r2
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <DHT11_Get_Data+0xb4>)
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <DHT11_Get_Data+0xb8>)
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	4413      	add	r3, r2
 8000826:	4299      	cmp	r1, r3
 8000828:	d113      	bne.n	8000852 <DHT11_Get_Data+0x9e>
		{
			TEMP = Temp_byte1;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <DHT11_Get_Data+0xb4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <DHT11_Get_Data+0xc0>)
 8000832:	601a      	str	r2, [r3, #0]
		    RH = Rh_byte1;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <DHT11_Get_Data+0xac>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <DHT11_Get_Data+0xc4>)
 800083c:	601a      	str	r2, [r3, #0]
		else return -1;
	}

	else return -1;

    *Temperature = (int *)TEMP;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <DHT11_Get_Data+0xc0>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
    *Humidity = (int *)RH;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <DHT11_Get_Data+0xc4>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	601a      	str	r2, [r3, #0]

    return 1;
 800084e:	2301      	movs	r3, #1
 8000850:	e002      	b.n	8000858 <DHT11_Get_Data+0xa4>
		else return -1;
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	e000      	b.n	8000858 <DHT11_Get_Data+0xa4>
	else return -1;
 8000856:	23ff      	movs	r3, #255	; 0xff
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000094 	.word	0x20000094
 8000864:	20000095 	.word	0x20000095
 8000868:	20000096 	.word	0x20000096
 800086c:	20000097 	.word	0x20000097
 8000870:	20000098 	.word	0x20000098
 8000874:	2000009c 	.word	0x2000009c
 8000878:	200000a0 	.word	0x200000a0

0800087c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fccd 	bl	8000224 <strlen>
 800088a:	4603      	mov	r3, r0
 800088c:	b29a      	uxth	r2, r3
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <Send_Uart+0x28>)
 8000896:	f004 fb65 	bl	8004f64 <HAL_UART_Transmit>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200008b0 	.word	0x200008b0

080008a8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <Mount_SD+0x38>)
 80008b6:	f006 fde5 	bl	8007484 <f_mount>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <Mount_SD+0x3c>)
 80008c0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <Mount_SD+0x3c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <Mount_SD+0x2a>
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <Mount_SD+0x40>)
 80008cc:	f7ff ffd6 	bl	800087c <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80008d0:	e002      	b.n	80008d8 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <Mount_SD+0x44>)
 80008d4:	f7ff ffd2 	bl	800087c <Send_Uart>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000a4 	.word	0x200000a4
 80008e4:	20000520 	.word	0x20000520
 80008e8:	0800b2dc 	.word	0x0800b2dc
 80008ec:	0800b300 	.word	0x0800b300

080008f0 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	2000      	movs	r0, #0
 80008fe:	f006 fdc1 	bl	8007484 <f_mount>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <Unmount_SD+0x38>)
 8000908:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <Unmount_SD+0x38>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <Unmount_SD+0x2a>
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <Unmount_SD+0x3c>)
 8000914:	f7ff ffb2 	bl	800087c <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000918:	e002      	b.n	8000920 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <Unmount_SD+0x40>)
 800091c:	f7ff ffae 	bl	800087c <Send_Uart>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000520 	.word	0x20000520
 800092c:	0800b324 	.word	0x0800b324
 8000930:	0800b34c 	.word	0x0800b34c

08000934 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 800093a:	2014      	movs	r0, #20
 800093c:	f009 fe34 	bl	800a5a8 <pvPortMalloc>
 8000940:	6378      	str	r0, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000942:	4a29      	ldr	r2, [pc, #164]	; (80009e8 <Format_SD+0xb4>)
 8000944:	4929      	ldr	r1, [pc, #164]	; (80009ec <Format_SD+0xb8>)
 8000946:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000948:	f00a f818 	bl	800a97c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000950:	4618      	mov	r0, r3
 8000952:	f007 fa1c 	bl	8007d8e <f_opendir>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <Format_SD+0xbc>)
 800095c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <Format_SD+0xbc>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d136      	bne.n	80009d4 <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4922      	ldr	r1, [pc, #136]	; (80009f4 <Format_SD+0xc0>)
 800096a:	4618      	mov	r0, r3
 800096c:	f007 fab3 	bl	8007ed6 <f_readdir>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <Format_SD+0xbc>)
 8000976:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <Format_SD+0xbc>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d125      	bne.n	80009cc <Format_SD+0x98>
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <Format_SD+0xc0>)
 8000982:	7a5b      	ldrb	r3, [r3, #9]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d021      	beq.n	80009cc <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <Format_SD+0xc0>)
 800098a:	7a1b      	ldrb	r3, [r3, #8]
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	2b00      	cmp	r3, #0
 8000992:	d011      	beq.n	80009b8 <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000994:	4918      	ldr	r1, [pc, #96]	; (80009f8 <Format_SD+0xc4>)
 8000996:	4819      	ldr	r0, [pc, #100]	; (80009fc <Format_SD+0xc8>)
 8000998:	f7ff fc3a 	bl	8000210 <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d012      	beq.n	80009c8 <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80009a2:	4815      	ldr	r0, [pc, #84]	; (80009f8 <Format_SD+0xc4>)
 80009a4:	f007 fb1a 	bl	8007fdc <f_unlink>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <Format_SD+0xbc>)
 80009ae:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <Format_SD+0xbc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	e7d6      	b.n	8000966 <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <Format_SD+0xc4>)
 80009ba:	f007 fb0f 	bl	8007fdc <f_unlink>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <Format_SD+0xbc>)
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	e7ce      	b.n	8000966 <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80009c8:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80009ca:	e7cc      	b.n	8000966 <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 fa56 	bl	8007e80 <f_closedir>
    }
    vPortFree(path);
 80009d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80009d6:	f009 feb3 	bl	800a740 <vPortFree>
    return fresult;
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <Format_SD+0xbc>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3738      	adds	r7, #56	; 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	0800b3a0 	.word	0x0800b3a0
 80009ec:	0800b370 	.word	0x0800b370
 80009f0:	20000520 	.word	0x20000520
 80009f4:	20000508 	.word	0x20000508
 80009f8:	20000511 	.word	0x20000511
 80009fc:	0800b374 	.word	0x0800b374

08000a00 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000a08:	4940      	ldr	r1, [pc, #256]	; (8000b0c <Create_File+0x10c>)
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f007 faa6 	bl	8007f5c <f_stat>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <Create_File+0x110>)
 8000a16:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000a18:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <Create_File+0x110>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d111      	bne.n	8000a44 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f009 fdc1 	bl	800a5a8 <pvPortMalloc>
 8000a26:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	493a      	ldr	r1, [pc, #232]	; (8000b14 <Create_File+0x114>)
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f009 ffa5 	bl	800a97c <siprintf>
		Send_Uart(buf);
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff22 	bl	800087c <Send_Uart>
		vPortFree(buf);
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f009 fe81 	bl	800a740 <vPortFree>
	    return fresult;
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <Create_File+0x110>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	e05f      	b.n	8000b04 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000a44:	220b      	movs	r2, #11
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	4833      	ldr	r0, [pc, #204]	; (8000b18 <Create_File+0x118>)
 8000a4a:	f006 fd7f 	bl	800754c <f_open>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <Create_File+0x110>)
 8000a54:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <Create_File+0x110>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d014      	beq.n	8000a88 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000a5e:	2064      	movs	r0, #100	; 0x64
 8000a60:	f009 fda2 	bl	800a5a8 <pvPortMalloc>
 8000a64:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <Create_File+0x110>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	492b      	ldr	r1, [pc, #172]	; (8000b1c <Create_File+0x11c>)
 8000a70:	6938      	ldr	r0, [r7, #16]
 8000a72:	f009 ff83 	bl	800a97c <siprintf>
			Send_Uart(buf);
 8000a76:	6938      	ldr	r0, [r7, #16]
 8000a78:	f7ff ff00 	bl	800087c <Send_Uart>
			vPortFree(buf);
 8000a7c:	6938      	ldr	r0, [r7, #16]
 8000a7e:	f009 fe5f 	bl	800a740 <vPortFree>
		    return fresult;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <Create_File+0x110>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	e03d      	b.n	8000b04 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	f009 fd8d 	bl	800a5a8 <pvPortMalloc>
 8000a8e:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4923      	ldr	r1, [pc, #140]	; (8000b20 <Create_File+0x120>)
 8000a94:	69f8      	ldr	r0, [r7, #28]
 8000a96:	f009 ff71 	bl	800a97c <siprintf>
			Send_Uart(buf);
 8000a9a:	69f8      	ldr	r0, [r7, #28]
 8000a9c:	f7ff feee 	bl	800087c <Send_Uart>
			vPortFree(buf);
 8000aa0:	69f8      	ldr	r0, [r7, #28]
 8000aa2:	f009 fe4d 	bl	800a740 <vPortFree>
		}

		fresult = f_close(&fil);
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <Create_File+0x118>)
 8000aa8:	f007 f942 	bl	8007d30 <f_close>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <Create_File+0x110>)
 8000ab2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <Create_File+0x110>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d012      	beq.n	8000ae2 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000abc:	2064      	movs	r0, #100	; 0x64
 8000abe:	f009 fd73 	bl	800a5a8 <pvPortMalloc>
 8000ac2:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <Create_File+0x110>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4915      	ldr	r1, [pc, #84]	; (8000b24 <Create_File+0x124>)
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f009 ff54 	bl	800a97c <siprintf>
			Send_Uart(buf);
 8000ad4:	6978      	ldr	r0, [r7, #20]
 8000ad6:	f7ff fed1 	bl	800087c <Send_Uart>
			vPortFree(buf);
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f009 fe30 	bl	800a740 <vPortFree>
 8000ae0:	e00e      	b.n	8000b00 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000ae2:	2064      	movs	r0, #100	; 0x64
 8000ae4:	f009 fd60 	bl	800a5a8 <pvPortMalloc>
 8000ae8:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <Create_File+0x128>)
 8000aee:	69b8      	ldr	r0, [r7, #24]
 8000af0:	f009 ff44 	bl	800a97c <siprintf>
			Send_Uart(buf);
 8000af4:	69b8      	ldr	r0, [r7, #24]
 8000af6:	f7ff fec1 	bl	800087c <Send_Uart>
			vPortFree(buf);
 8000afa:	69b8      	ldr	r0, [r7, #24]
 8000afc:	f009 fe20 	bl	800a740 <vPortFree>
		}
	}
    return fresult;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <Create_File+0x110>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000508 	.word	0x20000508
 8000b10:	20000520 	.word	0x20000520
 8000b14:	0800b51c 	.word	0x0800b51c
 8000b18:	200002d8 	.word	0x200002d8
 8000b1c:	0800b554 	.word	0x0800b554
 8000b20:	0800b57c 	.word	0x0800b57c
 8000b24:	0800b5bc 	.word	0x0800b5bc
 8000b28:	0800b4fc 	.word	0x0800b4fc

08000b2c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8000b36:	4953      	ldr	r1, [pc, #332]	; (8000c84 <Update_File+0x158>)
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f007 fa0f 	bl	8007f5c <f_stat>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <Update_File+0x15c>)
 8000b44:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000b46:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <Update_File+0x15c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d011      	beq.n	8000b72 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000b4e:	2064      	movs	r0, #100	; 0x64
 8000b50:	f009 fd2a 	bl	800a5a8 <pvPortMalloc>
 8000b54:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	494c      	ldr	r1, [pc, #304]	; (8000c8c <Update_File+0x160>)
 8000b5a:	68b8      	ldr	r0, [r7, #8]
 8000b5c:	f009 ff0e 	bl	800a97c <siprintf>
		Send_Uart (buf);
 8000b60:	68b8      	ldr	r0, [r7, #8]
 8000b62:	f7ff fe8b 	bl	800087c <Send_Uart>
		vPortFree(buf);
 8000b66:	68b8      	ldr	r0, [r7, #8]
 8000b68:	f009 fdea 	bl	800a740 <vPortFree>
	    return fresult;
 8000b6c:	4b46      	ldr	r3, [pc, #280]	; (8000c88 <Update_File+0x15c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	e083      	b.n	8000c7a <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8000b72:	2232      	movs	r2, #50	; 0x32
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	4846      	ldr	r0, [pc, #280]	; (8000c90 <Update_File+0x164>)
 8000b78:	f006 fce8 	bl	800754c <f_open>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <Update_File+0x15c>)
 8000b82:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b84:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <Update_File+0x15c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d014      	beq.n	8000bb6 <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000b8c:	2064      	movs	r0, #100	; 0x64
 8000b8e:	f009 fd0b 	bl	800a5a8 <pvPortMalloc>
 8000b92:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000b94:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <Update_File+0x15c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	493d      	ldr	r1, [pc, #244]	; (8000c94 <Update_File+0x168>)
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f009 feec 	bl	800a97c <siprintf>
	    	Send_Uart(buf);
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fe69 	bl	800087c <Send_Uart>
	        vPortFree(buf);
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f009 fdc8 	bl	800a740 <vPortFree>
	        return fresult;
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <Update_File+0x15c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	e061      	b.n	8000c7a <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8000bb6:	6838      	ldr	r0, [r7, #0]
 8000bb8:	f7ff fb34 	bl	8000224 <strlen>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <Update_File+0x16c>)
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	4833      	ldr	r0, [pc, #204]	; (8000c90 <Update_File+0x164>)
 8000bc4:	f006 fe87 	bl	80078d6 <f_write>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <Update_File+0x15c>)
 8000bce:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <Update_File+0x15c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d012      	beq.n	8000bfe <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f009 fce5 	bl	800a5a8 <pvPortMalloc>
 8000bde:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <Update_File+0x15c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	492c      	ldr	r1, [pc, #176]	; (8000c9c <Update_File+0x170>)
 8000bea:	69b8      	ldr	r0, [r7, #24]
 8000bec:	f009 fec6 	bl	800a97c <siprintf>
	    	Send_Uart(buf);
 8000bf0:	69b8      	ldr	r0, [r7, #24]
 8000bf2:	f7ff fe43 	bl	800087c <Send_Uart>
	    	vPortFree(buf);
 8000bf6:	69b8      	ldr	r0, [r7, #24]
 8000bf8:	f009 fda2 	bl	800a740 <vPortFree>
 8000bfc:	e00e      	b.n	8000c1c <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f009 fcd2 	bl	800a5a8 <pvPortMalloc>
 8000c04:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4925      	ldr	r1, [pc, #148]	; (8000ca0 <Update_File+0x174>)
 8000c0a:	69f8      	ldr	r0, [r7, #28]
 8000c0c:	f009 feb6 	bl	800a97c <siprintf>
	    	Send_Uart(buf);
 8000c10:	69f8      	ldr	r0, [r7, #28]
 8000c12:	f7ff fe33 	bl	800087c <Send_Uart>
	    	vPortFree(buf);
 8000c16:	69f8      	ldr	r0, [r7, #28]
 8000c18:	f009 fd92 	bl	800a740 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <Update_File+0x164>)
 8000c1e:	f007 f887 	bl	8007d30 <f_close>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <Update_File+0x15c>)
 8000c28:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <Update_File+0x15c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d012      	beq.n	8000c58 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f009 fcb8 	bl	800a5a8 <pvPortMalloc>
 8000c38:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <Update_File+0x15c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4918      	ldr	r1, [pc, #96]	; (8000ca4 <Update_File+0x178>)
 8000c44:	6938      	ldr	r0, [r7, #16]
 8000c46:	f009 fe99 	bl	800a97c <siprintf>
	    	Send_Uart(buf);
 8000c4a:	6938      	ldr	r0, [r7, #16]
 8000c4c:	f7ff fe16 	bl	800087c <Send_Uart>
	    	vPortFree(buf);
 8000c50:	6938      	ldr	r0, [r7, #16]
 8000c52:	f009 fd75 	bl	800a740 <vPortFree>
 8000c56:	e00e      	b.n	8000c76 <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f009 fca5 	bl	800a5a8 <pvPortMalloc>
 8000c5e:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4911      	ldr	r1, [pc, #68]	; (8000ca8 <Update_File+0x17c>)
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f009 fe89 	bl	800a97c <siprintf>
	    	Send_Uart(buf);
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff fe06 	bl	800087c <Send_Uart>
	    	vPortFree(buf);
 8000c70:	6978      	ldr	r0, [r7, #20]
 8000c72:	f009 fd65 	bl	800a740 <vPortFree>
	     }
	}
    return fresult;
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <Update_File+0x15c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000508 	.word	0x20000508
 8000c88:	20000520 	.word	0x20000520
 8000c8c:	0800b3a4 	.word	0x0800b3a4
 8000c90:	200002d8 	.word	0x200002d8
 8000c94:	0800b3c4 	.word	0x0800b3c4
 8000c98:	20000524 	.word	0x20000524
 8000c9c:	0800b5e0 	.word	0x0800b5e0
 8000ca0:	0800b608 	.word	0x0800b608
 8000ca4:	0800b4d4 	.word	0x0800b4d4
 8000ca8:	0800b4fc 	.word	0x0800b4fc

08000cac <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <SELECT+0x14>)
 8000cb6:	f002 f98d 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DESELECT+0x14>)
 8000cce:	f002 f981 	bl	8002fd4 <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40020400 	.word	0x40020400

08000cdc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000ce6:	bf00      	nop
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <SPI_TxByte+0x30>)
 8000cea:	f003 fb23 	bl	8004334 <HAL_SPI_GetState>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d1f9      	bne.n	8000ce8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000cf4:	1df9      	adds	r1, r7, #7
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <SPI_TxByte+0x30>)
 8000cfe:	f003 f826 	bl	8003d4e <HAL_SPI_Transmit>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200007c8 	.word	0x200007c8

08000d10 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d16:	23ff      	movs	r3, #255	; 0xff
 8000d18:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d1e:	bf00      	nop
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <SPI_RxByte+0x38>)
 8000d22:	f003 fb07 	bl	8004334 <HAL_SPI_GetState>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d1f9      	bne.n	8000d20 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d2c:	1dba      	adds	r2, r7, #6
 8000d2e:	1df9      	adds	r1, r7, #7
 8000d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2301      	movs	r3, #1
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <SPI_RxByte+0x38>)
 8000d3a:	f003 f94b 	bl	8003fd4 <HAL_SPI_TransmitReceive>
  
  return data;
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200007c8 	.word	0x200007c8

08000d4c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d54:	f7ff ffdc 	bl	8000d10 <SPI_RxByte>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <SD_ReadyWait+0x34>)
 8000d70:	2232      	movs	r2, #50	; 0x32
 8000d72:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000d74:	f7ff ffcc 	bl	8000d10 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000d78:	f7ff ffca 	bl	8000d10 <SPI_RxByte>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d004      	beq.n	8000d90 <SD_ReadyWait+0x28>
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SD_ReadyWait+0x34>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f3      	bne.n	8000d78 <SD_ReadyWait+0x10>
  
  return res;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000095e 	.word	0x2000095e

08000da0 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000da6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000daa:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000dac:	f7ff ff8a 	bl	8000cc4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	e005      	b.n	8000dc2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000db6:	20ff      	movs	r0, #255	; 0xff
 8000db8:	f7ff ff90 	bl	8000cdc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	2b09      	cmp	r3, #9
 8000dc6:	ddf6      	ble.n	8000db6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000dc8:	f7ff ff70 	bl	8000cac <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000dcc:	2340      	movs	r3, #64	; 0x40
 8000dce:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000de0:	2395      	movs	r3, #149	; 0x95
 8000de2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e009      	b.n	8000dfe <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000dea:	1d3a      	adds	r2, r7, #4
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff72 	bl	8000cdc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	ddf2      	ble.n	8000dea <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000e04:	e002      	b.n	8000e0c <SD_PowerOn+0x6c>
  {
    Count--;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e0c:	f7ff ff80 	bl	8000d10 <SPI_RxByte>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d002      	beq.n	8000e1c <SD_PowerOn+0x7c>
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f4      	bne.n	8000e06 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e1c:	f7ff ff52 	bl	8000cc4 <DESELECT>
  SPI_TxByte(0XFF);
 8000e20:	20ff      	movs	r0, #255	; 0xff
 8000e22:	f7ff ff5b 	bl	8000cdc <SPI_TxByte>
  
  PowerFlag = 1;
 8000e26:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <SD_PowerOn+0x94>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000529 	.word	0x20000529

08000e38 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <SD_PowerOff+0x14>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000529 	.word	0x20000529

08000e50 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <SD_CheckPower+0x14>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000529 	.word	0x20000529

08000e68 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <SD_RxDataBlock+0x68>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000e78:	f7ff ff4a 	bl	8000d10 <SPI_RxByte>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d104      	bne.n	8000e90 <SD_RxDataBlock+0x28>
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <SD_RxDataBlock+0x68>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f3      	bne.n	8000e78 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2bfe      	cmp	r3, #254	; 0xfe
 8000e94:	d001      	beq.n	8000e9a <SD_RxDataBlock+0x32>
    return FALSE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e016      	b.n	8000ec8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff53 	bl	8000d4c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff4d 	bl	8000d4c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3b02      	subs	r3, #2
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1ed      	bne.n	8000e9a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ebe:	f7ff ff27 	bl	8000d10 <SPI_RxByte>
  SPI_RxByte();
 8000ec2:	f7ff ff25 	bl	8000d10 <SPI_RxByte>
  
  return TRUE;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000095d 	.word	0x2000095d

08000ed4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000ee4:	f7ff ff40 	bl	8000d68 <SD_ReadyWait>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2bff      	cmp	r3, #255	; 0xff
 8000eec:	d001      	beq.n	8000ef2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e040      	b.n	8000f74 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fef1 	bl	8000cdc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2bfd      	cmp	r3, #253	; 0xfd
 8000efe:	d031      	beq.n	8000f64 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fee5 	bl	8000cdc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fede 	bl	8000cdc <SPI_TxByte>
    } while (--wc);
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	73bb      	strb	r3, [r7, #14]
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1eb      	bne.n	8000f04 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000f2c:	f7ff fef0 	bl	8000d10 <SPI_RxByte>
    SPI_RxByte();
 8000f30:	f7ff feee 	bl	8000d10 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000f34:	e00b      	b.n	8000f4e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f36:	f7ff feeb 	bl	8000d10 <SPI_RxByte>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d006      	beq.n	8000f56 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	2b40      	cmp	r3, #64	; 0x40
 8000f52:	d9f0      	bls.n	8000f36 <SD_TxDataBlock+0x62>
 8000f54:	e000      	b.n	8000f58 <SD_TxDataBlock+0x84>
        break;
 8000f56:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000f58:	bf00      	nop
 8000f5a:	f7ff fed9 	bl	8000d10 <SPI_RxByte>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0fa      	beq.n	8000f5a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d101      	bne.n	8000f72 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f88:	f7ff feee 	bl	8000d68 <SD_ReadyWait>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d001      	beq.n	8000f96 <SD_SendCmd+0x1a>
    return 0xFF;
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	e040      	b.n	8001018 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe9f 	bl	8000cdc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	0e1b      	lsrs	r3, r3, #24
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe99 	bl	8000cdc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fe93 	bl	8000cdc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe8d 	bl	8000cdc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe88 	bl	8000cdc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b40      	cmp	r3, #64	; 0x40
 8000fd4:	d101      	bne.n	8000fda <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000fd6:	2395      	movs	r3, #149	; 0x95
 8000fd8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b48      	cmp	r3, #72	; 0x48
 8000fde:	d101      	bne.n	8000fe4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000fe0:	2387      	movs	r3, #135	; 0x87
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe78 	bl	8000cdc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b4c      	cmp	r3, #76	; 0x4c
 8000ff0:	d101      	bne.n	8000ff6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000ff2:	f7ff fe8d 	bl	8000d10 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ffa:	f7ff fe89 	bl	8000d10 <SPI_RxByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001002:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001006:	2b00      	cmp	r3, #0
 8001008:	da05      	bge.n	8001016 <SD_SendCmd+0x9a>
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	3b01      	subs	r3, #1
 800100e:	73bb      	strb	r3, [r7, #14]
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f1      	bne.n	8000ffa <SD_SendCmd+0x7e>
  
  return res;
 8001016:	7b7b      	ldrb	r3, [r7, #13]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001030:	2301      	movs	r3, #1
 8001032:	e0d5      	b.n	80011e0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001034:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <SD_disk_initialize+0x1c8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <SD_disk_initialize+0x2a>
    return Stat;        
 8001042:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <SD_disk_initialize+0x1c8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	e0ca      	b.n	80011e0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800104a:	f7ff fea9 	bl	8000da0 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800104e:	f7ff fe2d 	bl	8000cac <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001056:	2100      	movs	r1, #0
 8001058:	2040      	movs	r0, #64	; 0x40
 800105a:	f7ff ff8f 	bl	8000f7c <SD_SendCmd>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	f040 80a5 	bne.w	80011b0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001066:	4b61      	ldr	r3, [pc, #388]	; (80011ec <SD_disk_initialize+0x1cc>)
 8001068:	2264      	movs	r2, #100	; 0x64
 800106a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800106c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001070:	2048      	movs	r0, #72	; 0x48
 8001072:	f7ff ff83 	bl	8000f7c <SD_SendCmd>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d158      	bne.n	800112e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e00c      	b.n	800109c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001082:	7bfc      	ldrb	r4, [r7, #15]
 8001084:	f7ff fe44 	bl	8000d10 <SPI_RxByte>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	f104 0310 	add.w	r3, r4, #16
 8001090:	443b      	add	r3, r7
 8001092:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d9ef      	bls.n	8001082 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80010a2:	7abb      	ldrb	r3, [r7, #10]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	f040 8083 	bne.w	80011b0 <SD_disk_initialize+0x190>
 80010aa:	7afb      	ldrb	r3, [r7, #11]
 80010ac:	2baa      	cmp	r3, #170	; 0xaa
 80010ae:	d17f      	bne.n	80011b0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80010b0:	2100      	movs	r1, #0
 80010b2:	2077      	movs	r0, #119	; 0x77
 80010b4:	f7ff ff62 	bl	8000f7c <SD_SendCmd>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d807      	bhi.n	80010ce <SD_disk_initialize+0xae>
 80010be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010c2:	2069      	movs	r0, #105	; 0x69
 80010c4:	f7ff ff5a 	bl	8000f7c <SD_SendCmd>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <SD_disk_initialize+0x1cc>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1eb      	bne.n	80010b0 <SD_disk_initialize+0x90>
 80010d8:	e000      	b.n	80010dc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80010da:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80010dc:	4b43      	ldr	r3, [pc, #268]	; (80011ec <SD_disk_initialize+0x1cc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d064      	beq.n	80011b0 <SD_disk_initialize+0x190>
 80010e6:	2100      	movs	r1, #0
 80010e8:	207a      	movs	r0, #122	; 0x7a
 80010ea:	f7ff ff47 	bl	8000f7c <SD_SendCmd>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d15d      	bne.n	80011b0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e00c      	b.n	8001114 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80010fa:	7bfc      	ldrb	r4, [r7, #15]
 80010fc:	f7ff fe08 	bl	8000d10 <SPI_RxByte>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	f104 0310 	add.w	r3, r4, #16
 8001108:	443b      	add	r3, r7
 800110a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	3301      	adds	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d9ef      	bls.n	80010fa <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800111a:	7a3b      	ldrb	r3, [r7, #8]
 800111c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SD_disk_initialize+0x108>
 8001124:	2306      	movs	r3, #6
 8001126:	e000      	b.n	800112a <SD_disk_initialize+0x10a>
 8001128:	2302      	movs	r3, #2
 800112a:	73bb      	strb	r3, [r7, #14]
 800112c:	e040      	b.n	80011b0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800112e:	2100      	movs	r1, #0
 8001130:	2077      	movs	r0, #119	; 0x77
 8001132:	f7ff ff23 	bl	8000f7c <SD_SendCmd>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d808      	bhi.n	800114e <SD_disk_initialize+0x12e>
 800113c:	2100      	movs	r1, #0
 800113e:	2069      	movs	r0, #105	; 0x69
 8001140:	f7ff ff1c 	bl	8000f7c <SD_SendCmd>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d801      	bhi.n	800114e <SD_disk_initialize+0x12e>
 800114a:	2302      	movs	r3, #2
 800114c:	e000      	b.n	8001150 <SD_disk_initialize+0x130>
 800114e:	2301      	movs	r3, #1
 8001150:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d10e      	bne.n	8001176 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001158:	2100      	movs	r1, #0
 800115a:	2077      	movs	r0, #119	; 0x77
 800115c:	f7ff ff0e 	bl	8000f7c <SD_SendCmd>
 8001160:	4603      	mov	r3, r0
 8001162:	2b01      	cmp	r3, #1
 8001164:	d80e      	bhi.n	8001184 <SD_disk_initialize+0x164>
 8001166:	2100      	movs	r1, #0
 8001168:	2069      	movs	r0, #105	; 0x69
 800116a:	f7ff ff07 	bl	8000f7c <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d107      	bne.n	8001184 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001174:	e00d      	b.n	8001192 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001176:	2100      	movs	r1, #0
 8001178:	2041      	movs	r0, #65	; 0x41
 800117a:	f7ff feff 	bl	8000f7c <SD_SendCmd>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <SD_disk_initialize+0x1cc>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1e1      	bne.n	8001152 <SD_disk_initialize+0x132>
 800118e:	e000      	b.n	8001192 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001190:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <SD_disk_initialize+0x1cc>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <SD_disk_initialize+0x18c>
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	2050      	movs	r0, #80	; 0x50
 80011a2:	f7ff feeb 	bl	8000f7c <SD_SendCmd>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <SD_disk_initialize+0x1d0>)
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80011b6:	f7ff fd85 	bl	8000cc4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80011ba:	f7ff fda9 	bl	8000d10 <SPI_RxByte>
  
  if (type) 
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <SD_disk_initialize+0x1c8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SD_disk_initialize+0x1c8>)
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e001      	b.n	80011da <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80011d6:	f7ff fe2f 	bl	8000e38 <SD_PowerOff>
  }
  
  return Stat;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <SD_disk_initialize+0x1c8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	2000095d 	.word	0x2000095d
 80011f0:	20000528 	.word	0x20000528

080011f4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001204:	2301      	movs	r3, #1
 8001206:	e002      	b.n	800120e <SD_disk_status+0x1a>
  
  return Stat;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <SD_disk_status+0x28>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000000 	.word	0x20000000

08001220 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <SD_disk_read+0x1c>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <SD_disk_read+0x20>
    return RES_PARERR;
 800123c:	2304      	movs	r3, #4
 800123e:	e051      	b.n	80012e4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <SD_disk_read+0xcc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800124e:	2303      	movs	r3, #3
 8001250:	e048      	b.n	80012e4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <SD_disk_read+0xd0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001264:	f7ff fd22 	bl	8000cac <SELECT>
  
  if (count == 1) 
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d111      	bne.n	8001292 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	2051      	movs	r0, #81	; 0x51
 8001272:	f7ff fe83 	bl	8000f7c <SD_SendCmd>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d129      	bne.n	80012d0 <SD_disk_read+0xb0>
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f7ff fdf1 	bl	8000e68 <SD_RxDataBlock>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d021      	beq.n	80012d0 <SD_disk_read+0xb0>
      count = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	e01e      	b.n	80012d0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	2052      	movs	r0, #82	; 0x52
 8001296:	f7ff fe71 	bl	8000f7c <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d117      	bne.n	80012d0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	68b8      	ldr	r0, [r7, #8]
 80012a6:	f7ff fddf 	bl	8000e68 <SD_RxDataBlock>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012b6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ed      	bne.n	80012a0 <SD_disk_read+0x80>
 80012c4:	e000      	b.n	80012c8 <SD_disk_read+0xa8>
          break;
 80012c6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80012c8:	2100      	movs	r1, #0
 80012ca:	204c      	movs	r0, #76	; 0x4c
 80012cc:	f7ff fe56 	bl	8000f7c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80012d0:	f7ff fcf8 	bl	8000cc4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80012d4:	f7ff fd1c 	bl	8000d10 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000528 	.word	0x20000528

080012f4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <SD_disk_write+0x1c>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <SD_disk_write+0x20>
    return RES_PARERR;
 8001310:	2304      	movs	r3, #4
 8001312:	e06b      	b.n	80013ec <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <SD_disk_write+0x100>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001322:	2303      	movs	r3, #3
 8001324:	e062      	b.n	80013ec <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <SD_disk_write+0x100>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001334:	2302      	movs	r3, #2
 8001336:	e059      	b.n	80013ec <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <SD_disk_write+0x104>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800134a:	f7ff fcaf 	bl	8000cac <SELECT>
  
  if (count == 1) 
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d110      	bne.n	8001376 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	2058      	movs	r0, #88	; 0x58
 8001358:	f7ff fe10 	bl	8000f7c <SD_SendCmd>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d13a      	bne.n	80013d8 <SD_disk_write+0xe4>
 8001362:	21fe      	movs	r1, #254	; 0xfe
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff fdb5 	bl	8000ed4 <SD_TxDataBlock>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d033      	beq.n	80013d8 <SD_disk_write+0xe4>
      count = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	e030      	b.n	80013d8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <SD_disk_write+0x104>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	2077      	movs	r0, #119	; 0x77
 8001386:	f7ff fdf9 	bl	8000f7c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	2057      	movs	r0, #87	; 0x57
 800138e:	f7ff fdf5 	bl	8000f7c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2059      	movs	r0, #89	; 0x59
 8001396:	f7ff fdf1 	bl	8000f7c <SD_SendCmd>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d11b      	bne.n	80013d8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013a0:	21fc      	movs	r1, #252	; 0xfc
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f7ff fd96 	bl	8000ed4 <SD_TxDataBlock>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013b4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1ee      	bne.n	80013a0 <SD_disk_write+0xac>
 80013c2:	e000      	b.n	80013c6 <SD_disk_write+0xd2>
          break;
 80013c4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80013c6:	21fd      	movs	r1, #253	; 0xfd
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fd83 	bl	8000ed4 <SD_TxDataBlock>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80013d8:	f7ff fc74 	bl	8000cc4 <DESELECT>
  SPI_RxByte();
 80013dc:	f7ff fc98 	bl	8000d10 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000528 	.word	0x20000528

080013fc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001416:	2304      	movs	r3, #4
 8001418:	e11b      	b.n	8001652 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b05      	cmp	r3, #5
 8001424:	d129      	bne.n	800147a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d017      	beq.n	800145e <SD_disk_ioctl+0x62>
 800142e:	2b02      	cmp	r3, #2
 8001430:	dc1f      	bgt.n	8001472 <SD_disk_ioctl+0x76>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <SD_disk_ioctl+0x40>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d00b      	beq.n	8001452 <SD_disk_ioctl+0x56>
 800143a:	e01a      	b.n	8001472 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800143c:	f7ff fd08 	bl	8000e50 <SD_CheckPower>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001446:	f7ff fcf7 	bl	8000e38 <SD_PowerOff>
      res = RES_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001450:	e0fd      	b.n	800164e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001452:	f7ff fca5 	bl	8000da0 <SD_PowerOn>
      res = RES_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800145c:	e0f7      	b.n	800164e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	1c5c      	adds	r4, r3, #1
 8001462:	f7ff fcf5 	bl	8000e50 <SD_CheckPower>
 8001466:	4603      	mov	r3, r0
 8001468:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001470:	e0ed      	b.n	800164e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001472:	2304      	movs	r3, #4
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001478:	e0e9      	b.n	800164e <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <SD_disk_ioctl+0x260>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001488:	2303      	movs	r3, #3
 800148a:	e0e2      	b.n	8001652 <SD_disk_ioctl+0x256>
    
    SELECT();
 800148c:	f7ff fc0e 	bl	8000cac <SELECT>
    
    switch (ctrl) 
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	2b0d      	cmp	r3, #13
 8001494:	f200 80cc 	bhi.w	8001630 <SD_disk_ioctl+0x234>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <SD_disk_ioctl+0xa4>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	0800159b 	.word	0x0800159b
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	0800158b 	.word	0x0800158b
 80014ac:	08001631 	.word	0x08001631
 80014b0:	08001631 	.word	0x08001631
 80014b4:	08001631 	.word	0x08001631
 80014b8:	08001631 	.word	0x08001631
 80014bc:	08001631 	.word	0x08001631
 80014c0:	08001631 	.word	0x08001631
 80014c4:	08001631 	.word	0x08001631
 80014c8:	08001631 	.word	0x08001631
 80014cc:	080015ad 	.word	0x080015ad
 80014d0:	080015d1 	.word	0x080015d1
 80014d4:	080015f5 	.word	0x080015f5
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80014d8:	2100      	movs	r1, #0
 80014da:	2049      	movs	r0, #73	; 0x49
 80014dc:	f7ff fd4e 	bl	8000f7c <SD_SendCmd>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 80a8 	bne.w	8001638 <SD_disk_ioctl+0x23c>
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2110      	movs	r1, #16
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fcba 	bl	8000e68 <SD_RxDataBlock>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 809e 	beq.w	8001638 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80014fc:	7b3b      	ldrb	r3, [r7, #12]
 80014fe:	099b      	lsrs	r3, r3, #6
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10e      	bne.n	8001524 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001506:	7d7b      	ldrb	r3, [r7, #21]
 8001508:	b29a      	uxth	r2, r3
 800150a:	7d3b      	ldrb	r3, [r7, #20]
 800150c:	b29b      	uxth	r3, r3
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b29b      	uxth	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b29b      	uxth	r3, r3
 8001516:	3301      	adds	r3, #1
 8001518:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800151a:	8bfb      	ldrh	r3, [r7, #30]
 800151c:	029a      	lsls	r2, r3, #10
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e02e      	b.n	8001582 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001524:	7c7b      	ldrb	r3, [r7, #17]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	b2da      	uxtb	r2, r3
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	09db      	lsrs	r3, r3, #7
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b2da      	uxtb	r2, r3
 8001536:	7d7b      	ldrb	r3, [r7, #21]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f003 0306 	and.w	r3, r3, #6
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	3302      	adds	r3, #2
 8001548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800154c:	7d3b      	ldrb	r3, [r7, #20]
 800154e:	099b      	lsrs	r3, r3, #6
 8001550:	b2db      	uxtb	r3, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	7cfb      	ldrb	r3, [r7, #19]
 8001556:	b29b      	uxth	r3, r3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7cbb      	ldrb	r3, [r7, #18]
 8001562:	029b      	lsls	r3, r3, #10
 8001564:	b29b      	uxth	r3, r3
 8001566:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001574:	8bfa      	ldrh	r2, [r7, #30]
 8001576:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800157a:	3b09      	subs	r3, #9
 800157c:	409a      	lsls	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001588:	e056      	b.n	8001638 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001590:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001598:	e055      	b.n	8001646 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800159a:	f7ff fbe5 	bl	8000d68 <SD_ReadyWait>
 800159e:	4603      	mov	r3, r0
 80015a0:	2bff      	cmp	r3, #255	; 0xff
 80015a2:	d14b      	bne.n	800163c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015aa:	e047      	b.n	800163c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015ac:	2100      	movs	r1, #0
 80015ae:	2049      	movs	r0, #73	; 0x49
 80015b0:	f7ff fce4 	bl	8000f7c <SD_SendCmd>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d142      	bne.n	8001640 <SD_disk_ioctl+0x244>
 80015ba:	2110      	movs	r1, #16
 80015bc:	6a38      	ldr	r0, [r7, #32]
 80015be:	f7ff fc53 	bl	8000e68 <SD_RxDataBlock>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03b      	beq.n	8001640 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015ce:	e037      	b.n	8001640 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015d0:	2100      	movs	r1, #0
 80015d2:	204a      	movs	r0, #74	; 0x4a
 80015d4:	f7ff fcd2 	bl	8000f7c <SD_SendCmd>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d132      	bne.n	8001644 <SD_disk_ioctl+0x248>
 80015de:	2110      	movs	r1, #16
 80015e0:	6a38      	ldr	r0, [r7, #32]
 80015e2:	f7ff fc41 	bl	8000e68 <SD_RxDataBlock>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d02b      	beq.n	8001644 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015f2:	e027      	b.n	8001644 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80015f4:	2100      	movs	r1, #0
 80015f6:	207a      	movs	r0, #122	; 0x7a
 80015f8:	f7ff fcc0 	bl	8000f7c <SD_SendCmd>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001608:	e00b      	b.n	8001622 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800160a:	6a3c      	ldr	r4, [r7, #32]
 800160c:	1c63      	adds	r3, r4, #1
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	f7ff fb7e 	bl	8000d10 <SPI_RxByte>
 8001614:	4603      	mov	r3, r0
 8001616:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001618:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800161c:	3301      	adds	r3, #1
 800161e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001626:	2b03      	cmp	r3, #3
 8001628:	d9ef      	bls.n	800160a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001630:	2304      	movs	r3, #4
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001636:	e006      	b.n	8001646 <SD_disk_ioctl+0x24a>
      break;
 8001638:	bf00      	nop
 800163a:	e004      	b.n	8001646 <SD_disk_ioctl+0x24a>
      break;
 800163c:	bf00      	nop
 800163e:	e002      	b.n	8001646 <SD_disk_ioctl+0x24a>
      break;
 8001640:	bf00      	nop
 8001642:	e000      	b.n	8001646 <SD_disk_ioctl+0x24a>
      break;
 8001644:	bf00      	nop
    }
    
    DESELECT();
 8001646:	f7ff fb3d 	bl	8000cc4 <DESELECT>
    SPI_RxByte();
 800164a:	f7ff fb61 	bl	8000d10 <SPI_RxByte>
  }
  
  return res;
 800164e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001652:	4618      	mov	r0, r3
 8001654:	372c      	adds	r7, #44	; 0x2c
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000

08001660 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <vApplicationGetIdleTaskMemory+0x2c>)
 8001670:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <vApplicationGetIdleTaskMemory+0x30>)
 8001676:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	2000052c 	.word	0x2000052c
 8001690:	20000580 	.word	0x20000580

08001694 <ADC_Task>:
xTaskHandle DHT_Task_Handler;
xTaskHandle SD_Task_Handler;

xSemaphoreHandle DHT_SEM;

void ADC_Task (void *argument){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	while(1){ //converts and stores ADC Value
		HAL_ADC_Start(&hadc1);
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <ADC_Task+0x34>)
 800169e:	f000 fe3f 	bl	8002320 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80016a2:	210a      	movs	r1, #10
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <ADC_Task+0x34>)
 80016a6:	f000 ff40 	bl	800252a <HAL_ADC_PollForConversion>
		ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <ADC_Task+0x34>)
 80016ac:	f000 ffc8 	bl	8002640 <HAL_ADC_GetValue>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <ADC_Task+0x38>)
 80016b6:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <ADC_Task+0x34>)
 80016ba:	f000 ff03 	bl	80024c4 <HAL_ADC_Stop>
		vTaskDelay(500);
 80016be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c2:	f007 fed1 	bl	8009468 <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 80016c6:	e7e9      	b.n	800169c <ADC_Task+0x8>
 80016c8:	20000780 	.word	0x20000780
 80016cc:	200008f8 	.word	0x200008f8

080016d0 <DHT_Task>:
	}
}
void DHT_Task (void *argument){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	while(1){ //uses UART to transmit DHT data
		if(xSemaphoreTake(DHT_SEM, 2500) != pdTRUE){
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <DHT_Task+0x34>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f007 fa2b 	bl	8008b3c <xQueueSemaphoreTake>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d006      	beq.n	80016fa <DHT_Task+0x2a>
			HAL_UART_Transmit(&huart2, (uint8_t *) "Unable to acquire semaphore\n", 28, 100);
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	221c      	movs	r2, #28
 80016f0:	4905      	ldr	r1, [pc, #20]	; (8001708 <DHT_Task+0x38>)
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <DHT_Task+0x3c>)
 80016f4:	f003 fc36 	bl	8004f64 <HAL_UART_Transmit>
 80016f8:	e7ee      	b.n	80016d8 <DHT_Task+0x8>
		}
		else{
			DHT11_Get_Data(&Temperature, &Humidity);
 80016fa:	4905      	ldr	r1, [pc, #20]	; (8001710 <DHT_Task+0x40>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <DHT_Task+0x44>)
 80016fe:	f7ff f859 	bl	80007b4 <DHT11_Get_Data>
		if(xSemaphoreTake(DHT_SEM, 2500) != pdTRUE){
 8001702:	e7e9      	b.n	80016d8 <DHT_Task+0x8>
 8001704:	20000910 	.word	0x20000910
 8001708:	0800b6f4 	.word	0x0800b6f4
 800170c:	200008b0 	.word	0x200008b0
 8001710:	20000900 	.word	0x20000900
 8001714:	200008fc 	.word	0x200008fc

08001718 <SD_Task>:
		}
	}
}
void SD_Task (void *argument){
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]
	int index = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
	while(1){ //update and write to SD through UART
		char *buffer = pvPortMalloc(50*sizeof(char));
 8001724:	2032      	movs	r0, #50	; 0x32
 8001726:	f008 ff3f 	bl	800a5a8 <pvPortMalloc>
 800172a:	60b8      	str	r0, [r7, #8]
		sprintf(buffer, "%d. %u\n", index, ADC_VAL);
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <SD_Task+0x6c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4915      	ldr	r1, [pc, #84]	; (8001788 <SD_Task+0x70>)
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f009 f921 	bl	800a97c <siprintf>
		Mount_SD("/");
 800173a:	4814      	ldr	r0, [pc, #80]	; (800178c <SD_Task+0x74>)
 800173c:	f7ff f8b4 	bl	80008a8 <Mount_SD>
		Update_File("ADC_DATA.TXT", buffer);
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	4813      	ldr	r0, [pc, #76]	; (8001790 <SD_Task+0x78>)
 8001744:	f7ff f9f2 	bl	8000b2c <Update_File>
		sprintf (buffer, "%d. Temperature = %d C\t RH = %d \n", index, Temperature, Humidity);
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <SD_Task+0x7c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <SD_Task+0x80>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4613      	mov	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4911      	ldr	r1, [pc, #68]	; (800179c <SD_Task+0x84>)
 8001758:	68b8      	ldr	r0, [r7, #8]
 800175a:	f009 f90f 	bl	800a97c <siprintf>
		Update_File("TEMP.TXT", buffer);
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <SD_Task+0x88>)
 8001762:	f7ff f9e3 	bl	8000b2c <Update_File>
		vPortFree(buffer);
 8001766:	68b8      	ldr	r0, [r7, #8]
 8001768:	f008 ffea 	bl	800a740 <vPortFree>
		Unmount_SD("/");
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <SD_Task+0x74>)
 800176e:	f7ff f8bf 	bl	80008f0 <Unmount_SD>
		index++;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
		vTaskDelay(1000);
 8001778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177c:	f007 fe74 	bl	8009468 <vTaskDelay>
	while(1){ //update and write to SD through UART
 8001780:	e7d0      	b.n	8001724 <SD_Task+0xc>
 8001782:	bf00      	nop
 8001784:	200008f8 	.word	0x200008f8
 8001788:	0800b714 	.word	0x0800b714
 800178c:	0800b71c 	.word	0x0800b71c
 8001790:	0800b720 	.word	0x0800b720
 8001794:	200008fc 	.word	0x200008fc
 8001798:	20000900 	.word	0x20000900
 800179c:	0800b730 	.word	0x0800b730
 80017a0:	0800b754 	.word	0x0800b754

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f000 fd33 	bl	8002214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f869 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b2:	f000 fa0d 	bl	8001bd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017b6:	f000 f9e1 	bl	8001b7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017ba:	f000 f8cf 	bl	800195c <MX_ADC1_Init>
  MX_SPI1_Init();
 80017be:	f000 f91f 	bl	8001a00 <MX_SPI1_Init>
  MX_TIM1_Init();
 80017c2:	f000 f953 	bl	8001a6c <MX_TIM1_Init>
  MX_TIM7_Init();
 80017c6:	f000 f9a3 	bl	8001b10 <MX_TIM7_Init>
  MX_FATFS_Init();
 80017ca:	f003 ff87 	bl	80056dc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Mount_SD("/");
 80017ce:	481e      	ldr	r0, [pc, #120]	; (8001848 <main+0xa4>)
 80017d0:	f7ff f86a 	bl	80008a8 <Mount_SD>
  Format_SD();
 80017d4:	f7ff f8ae 	bl	8000934 <Format_SD>
  Create_File("ADC_DATA.TXT");
 80017d8:	481c      	ldr	r0, [pc, #112]	; (800184c <main+0xa8>)
 80017da:	f7ff f911 	bl	8000a00 <Create_File>
  Create_File("TEMP.TXT");
 80017de:	481c      	ldr	r0, [pc, #112]	; (8001850 <main+0xac>)
 80017e0:	f7ff f90e 	bl	8000a00 <Create_File>
  Unmount_SD("/");
 80017e4:	4818      	ldr	r0, [pc, #96]	; (8001848 <main+0xa4>)
 80017e6:	f7ff f883 	bl	80008f0 <Unmount_SD>

  DHT_SEM = xSemaphoreCreateBinary();
 80017ea:	2203      	movs	r2, #3
 80017ec:	2100      	movs	r1, #0
 80017ee:	2001      	movs	r0, #1
 80017f0:	f006 ffbe 	bl	8008770 <xQueueGenericCreate>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <main+0xb0>)
 80017f8:	6013      	str	r3, [r2, #0]

  xTaskCreate(DHT_Task, "DHT", 128, NULL, 1, &DHT_Task_Handler);
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <main+0xb4>)
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2301      	movs	r3, #1
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	4915      	ldr	r1, [pc, #84]	; (800185c <main+0xb8>)
 8001808:	4815      	ldr	r0, [pc, #84]	; (8001860 <main+0xbc>)
 800180a:	f007 fcf6 	bl	80091fa <xTaskCreate>
  xTaskCreate(ADC_Task, "ADC", 128, NULL, 2, &ADC_Task_Handler);
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <main+0xc0>)
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	2302      	movs	r3, #2
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2300      	movs	r3, #0
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	4913      	ldr	r1, [pc, #76]	; (8001868 <main+0xc4>)
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <main+0xc8>)
 800181e:	f007 fcec 	bl	80091fa <xTaskCreate>
  xTaskCreate(SD_Task, "SD", 128, NULL, 3, &SD_Task_Handler);
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <main+0xcc>)
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	2303      	movs	r3, #3
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	4911      	ldr	r1, [pc, #68]	; (8001874 <main+0xd0>)
 8001830:	4811      	ldr	r0, [pc, #68]	; (8001878 <main+0xd4>)
 8001832:	f007 fce2 	bl	80091fa <xTaskCreate>

  HAL_TIM_Base_Start(&htim7);
 8001836:	4811      	ldr	r0, [pc, #68]	; (800187c <main+0xd8>)
 8001838:	f002 feb6 	bl	80045a8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1); //periodic delay timer in interrupt mode
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <main+0xdc>)
 800183e:	f002 feb3 	bl	80045a8 <HAL_TIM_Base_Start>

  vTaskStartScheduler();
 8001842:	f007 fe45 	bl	80094d0 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001846:	e7fe      	b.n	8001846 <main+0xa2>
 8001848:	0800b71c 	.word	0x0800b71c
 800184c:	0800b720 	.word	0x0800b720
 8001850:	0800b754 	.word	0x0800b754
 8001854:	20000910 	.word	0x20000910
 8001858:	20000908 	.word	0x20000908
 800185c:	0800b760 	.word	0x0800b760
 8001860:	080016d1 	.word	0x080016d1
 8001864:	20000904 	.word	0x20000904
 8001868:	0800b764 	.word	0x0800b764
 800186c:	08001695 	.word	0x08001695
 8001870:	2000090c 	.word	0x2000090c
 8001874:	0800b768 	.word	0x0800b768
 8001878:	08001719 	.word	0x08001719
 800187c:	20000868 	.word	0x20000868
 8001880:	20000820 	.word	0x20000820

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	; 0x50
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2234      	movs	r2, #52	; 0x34
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f009 f892 	bl	800a9bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <SystemClock_Config+0xd0>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <SystemClock_Config+0xd0>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <SystemClock_Config+0xd0>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <SystemClock_Config+0xd4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018d0:	4a21      	ldr	r2, [pc, #132]	; (8001958 <SystemClock_Config+0xd4>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <SystemClock_Config+0xd4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018fc:	233c      	movs	r3, #60	; 0x3c
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001900:	2302      	movs	r3, #2
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001908:	2302      	movs	r3, #2
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4618      	mov	r0, r3
 8001912:	f001 fef5 	bl	8003700 <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800191c:	f000 f9e8 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001924:	2302      	movs	r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2101      	movs	r1, #1
 800193c:	4618      	mov	r0, r3
 800193e:	f001 fb63 	bl	8003008 <HAL_RCC_ClockConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001948:	f000 f9d2 	bl	8001cf0 <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3750      	adds	r7, #80	; 0x50
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <MX_ADC1_Init+0x9c>)
 8001972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <MX_ADC1_Init+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001988:	2201      	movs	r2, #1
 800198a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_ADC1_Init+0x98>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_ADC1_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_ADC1_Init+0x98>)
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <MX_ADC1_Init+0xa0>)
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019bc:	f000 fc6c 	bl	8002298 <HAL_ADC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019c6:	f000 f993 	bl	8001cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_ADC1_Init+0x98>)
 80019dc:	f000 fe3e 	bl	800265c <HAL_ADC_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019e6:	f000 f983 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000780 	.word	0x20000780
 80019f8:	40012000 	.word	0x40012000
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a06:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <MX_SPI1_Init+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a34:	2220      	movs	r2, #32
 8001a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_SPI1_Init+0x64>)
 8001a52:	f002 f8f3 	bl	8003c3c <HAL_SPI_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a5c:	f000 f948 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200007c8 	.word	0x200007c8
 8001a68:	40013000 	.word	0x40013000

08001a6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001a8a:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <MX_TIM1_Init+0xa0>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001a90:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001a9e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001ab8:	f002 fd26 	bl	8004508 <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001ac2:	f000 f915 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001ad4:	f002 ff30 	bl	8004938 <HAL_TIM_ConfigClockSource>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ade:	f000 f907 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM1_Init+0x9c>)
 8001af0:	f003 f958 	bl	8004da4 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001afa:	f000 f8f9 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000820 	.word	0x20000820
 8001b0c:	40010000 	.word	0x40010000

08001b10 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <MX_TIM7_Init+0x68>)
 8001b22:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 60-1;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b26:	223b      	movs	r2, #59	; 0x3b
 8001b28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xffff-1;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b40:	f002 fce2 	bl	8004508 <HAL_TIM_Base_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001b4a:	f000 f8d1 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <MX_TIM7_Init+0x64>)
 8001b5c:	f003 f922 	bl	8004da4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b66:	f000 f8c3 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000868 	.word	0x20000868
 8001b78:	40001400 	.word	0x40001400

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <MX_USART2_UART_Init+0x50>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f003 f986 	bl	8004ec4 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bbe:	f000 f897 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200008b0 	.word	0x200008b0
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_GPIO_Init+0xb0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2140      	movs	r1, #64	; 0x40
 8001c3e:	4811      	ldr	r0, [pc, #68]	; (8001c84 <MX_GPIO_Init+0xb4>)
 8001c40:	f001 f9c8 	bl	8002fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_GPIO_Init+0xb8>)
 8001c58:	f001 f810 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_GPIO_Init+0xb4>)
 8001c74:	f001 f802 	bl	8002c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020000 	.word	0x40020000

08001c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d114      	bne.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			// release the semaphore here
			 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
			 it will get set to pdTRUE inside the interrupt safe API function if a
			 context switch is required. */
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]

			xSemaphoreGiveFromISR(DHT_SEM, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f107 020c 	add.w	r2, r7, #12
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f006 feb7 	bl	8008a20 <xQueueGiveFromISR>
			 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
			 then calling portEND_SWITCHING_ISR() will request a context switch. If
			 xHigherPriorityTaskWoken is still pdFALSE then calling
			 portEND_SWITCHING_ISR() will have no effect */

			portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	f3bf 8f6f 	isb	sy
		}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 8001cd2:	f000 fac1 	bl	8002258 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	20000910 	.word	0x20000910
 8001ce8:	e000ed04 	.word	0xe000ed04
 8001cec:	40001000 	.word	0x40001000

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_MspInit+0x54>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a11      	ldr	r2, [pc, #68]	; (8001d50 <HAL_MspInit+0x54>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_MspInit+0x54>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_MspInit+0x54>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	f06f 0001 	mvn.w	r0, #1
 8001d42:	f000 ff71 	bl	8002c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_ADC_MspInit+0x7c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d127      	bne.n	8001dc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dae:	2302      	movs	r3, #2
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_ADC_MspInit+0x84>)
 8001dc2:	f000 ff5b 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_SPI_MspInit+0x84>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12b      	bne.n	8001e56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	23e0      	movs	r3, #224	; 0xe0
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e46:	2305      	movs	r3, #5
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <HAL_SPI_MspInit+0x8c>)
 8001e52:	f000 ff13 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40013000 	.word	0x40013000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020000 	.word	0x40020000

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a18      	ldr	r2, [pc, #96]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d116      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	2019      	movs	r0, #25
 8001ea0:	f000 fec2 	bl	8002c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ea4:	2019      	movs	r0, #25
 8001ea6:	f000 fedb 	bl	8002c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001eaa:	e012      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_TIM_Base_MspInit+0x78>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40001400 	.word	0x40001400

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_UART_MspInit+0x84>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12b      	bne.n	8001f62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f42:	230c      	movs	r3, #12
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f52:	2307      	movs	r3, #7
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_UART_MspInit+0x8c>)
 8001f5e:	f000 fe8d 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4b33      	ldr	r3, [pc, #204]	; (800205c <HAL_InitTick+0xe4>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	4a32      	ldr	r2, [pc, #200]	; (800205c <HAL_InitTick+0xe4>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6413      	str	r3, [r2, #64]	; 0x40
 8001f98:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_InitTick+0xe4>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa4:	f107 0210 	add.w	r2, r7, #16
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 f944 	bl	800323c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fbe:	f001 f915 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8001fc2:	6378      	str	r0, [r7, #52]	; 0x34
 8001fc4:	e004      	b.n	8001fd0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fc6:	f001 f911 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	4a23      	ldr	r2, [pc, #140]	; (8002060 <HAL_InitTick+0xe8>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	0c9b      	lsrs	r3, r3, #18
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_InitTick+0xec>)
 8001fe0:	4a21      	ldr	r2, [pc, #132]	; (8002068 <HAL_InitTick+0xf0>)
 8001fe2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_InitTick+0xec>)
 8001fe6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_InitTick+0xec>)
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_InitTick+0xec>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_InitTick+0xec>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_InitTick+0xec>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002004:	4817      	ldr	r0, [pc, #92]	; (8002064 <HAL_InitTick+0xec>)
 8002006:	f002 fa7f 	bl	8004508 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11b      	bne.n	8002050 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002018:	4812      	ldr	r0, [pc, #72]	; (8002064 <HAL_InitTick+0xec>)
 800201a:	f002 fb2d 	bl	8004678 <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800202c:	2036      	movs	r0, #54	; 0x36
 800202e:	f000 fe17 	bl	8002c60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	d808      	bhi.n	800204a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	2036      	movs	r0, #54	; 0x36
 800203e:	f000 fdf3 	bl	8002c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_InitTick+0xf4>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e002      	b.n	8002050 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002050:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002054:	4618      	mov	r0, r3
 8002056:	3738      	adds	r7, #56	; 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	431bde83 	.word	0x431bde83
 8002064:	20000914 	.word	0x20000914
 8002068:	40001000 	.word	0x40001000
 800206c:	20000008 	.word	0x20000008

08002070 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <SDTimer_Handler+0x40>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <SDTimer_Handler+0x1c>
    Timer1--;
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <SDTimer_Handler+0x40>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <SDTimer_Handler+0x40>)
 800208a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <SDTimer_Handler+0x44>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <SDTimer_Handler+0x34>
    Timer2--;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <SDTimer_Handler+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SDTimer_Handler+0x44>)
 80020a2:	701a      	strb	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000095d 	.word	0x2000095d
 80020b4:	2000095e 	.word	0x2000095e

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler+0x4>

080020be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <MemManage_Handler+0x4>

080020ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020ea:	f002 fb35 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000820 	.word	0x20000820

080020f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	FatFsCnt++;
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <TIM6_DAC_IRQHandler+0x30>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3301      	adds	r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <TIM6_DAC_IRQHandler+0x30>)
 8002108:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <TIM6_DAC_IRQHandler+0x30>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b09      	cmp	r3, #9
 8002112:	d904      	bls.n	800211e <TIM6_DAC_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <TIM6_DAC_IRQHandler+0x30>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800211a:	f7ff ffa9 	bl	8002070 <SDTimer_Handler>
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800211e:	4803      	ldr	r0, [pc, #12]	; (800212c <TIM6_DAC_IRQHandler+0x34>)
 8002120:	f002 fb1a 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000095c 	.word	0x2000095c
 800212c:	20000914 	.word	0x20000914

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f008 fc34 	bl	800a9cc <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20020000 	.word	0x20020000
 8002190:	00000400 	.word	0x00000400
 8002194:	20000960 	.word	0x20000960
 8002198:	20004880 	.word	0x20004880

0800219c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c4:	f7ff ffea 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ee:	f008 fbf3 	bl	800a9d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7ff fad7 	bl	80017a4 <main>
  bx  lr    
 80021f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002204:	0800b894 	.word	0x0800b894
  ldr r2, =_sbss
 8002208:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800220c:	20004880 	.word	0x20004880

08002210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_Init+0x40>)
 800221e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_Init+0x40>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_Init+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <HAL_Init+0x40>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223c:	2003      	movs	r0, #3
 800223e:	f000 fce8 	bl	8002c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002242:	200f      	movs	r0, #15
 8002244:	f7ff fe98 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002248:	f7ff fd58 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023c00 	.word	0x40023c00

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20000964 	.word	0x20000964

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000964 	.word	0x20000964

08002298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e033      	b.n	8002316 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fd4c 	bl	8001d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022de:	f023 0302 	bic.w	r3, r3, #2
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fae8 	bl	80028c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
 8002306:	e001      	b.n	800230c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADC_Start+0x1a>
 8002336:	2302      	movs	r3, #2
 8002338:	e0b2      	b.n	80024a0 <HAL_ADC_Start+0x180>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d018      	beq.n	8002382 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_ADC_Start+0x18c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_ADC_Start+0x190>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9a      	lsrs	r2, r3, #18
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d17a      	bne.n	8002486 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ce:	d106      	bne.n	80023de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f023 0206 	bic.w	r2, r3, #6
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_ADC_Start+0x194>)
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2b00      	cmp	r3, #0
 8002404:	d12a      	bne.n	800245c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <HAL_ADC_Start+0x198>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d015      	beq.n	800243c <HAL_ADC_Start+0x11c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_ADC_Start+0x19c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <HAL_ADC_Start+0x106>
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_ADC_Start+0x194>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <HAL_ADC_Start+0x1a0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d136      	bne.n	800249e <HAL_ADC_Start+0x17e>
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_ADC_Start+0x194>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d130      	bne.n	800249e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d129      	bne.n	800249e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	e020      	b.n	800249e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <HAL_ADC_Start+0x198>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d11b      	bne.n	800249e <HAL_ADC_Start+0x17e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d114      	bne.n	800249e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e00b      	b.n	800249e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20000004 	.word	0x20000004
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	40012300 	.word	0x40012300
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40012100 	.word	0x40012100
 80024c0:	40012200 	.word	0x40012200

080024c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Stop+0x16>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e021      	b.n	800251e <HAL_ADC_Stop+0x5a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d113      	bne.n	8002570 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002556:	d10b      	bne.n	8002570 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e063      	b.n	8002638 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002570:	f7ff fe86 	bl	8002280 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002576:	e021      	b.n	80025bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d01d      	beq.n	80025bc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_ADC_PollForConversion+0x6c>
 8002586:	f7ff fe7b 	bl	8002280 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d212      	bcs.n	80025bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d00b      	beq.n	80025bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e03d      	b.n	8002638 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d1d6      	bne.n	8002578 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0212 	mvn.w	r2, #18
 80025d2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d123      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	d111      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e113      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x244>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d925      	bls.n	80026d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4403      	add	r3, r0
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	409a      	lsls	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	e022      	b.n	800271a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	2207      	movs	r2, #7
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	4603      	mov	r3, r0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4403      	add	r3, r0
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d824      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b05      	subs	r3, #5
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	e04c      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d824      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b23      	subs	r3, #35	; 0x23
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	; 0x23
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	e023      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b41      	subs	r3, #65	; 0x41
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b41      	subs	r3, #65	; 0x41
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <HAL_ADC_ConfigChannel+0x250>)
 8002808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10f      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d10b      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12b      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x1f4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b11      	cmp	r3, #17
 800284e:	d122      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_ADC_ConfigChannel+0x260>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0c9a      	lsrs	r2, r3, #18
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002888:	e002      	b.n	8002890 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	40012000 	.word	0x40012000
 80028b4:	10000012 	.word	0x10000012
 80028b8:	20000004 	.word	0x20000004
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <ADC_Init+0x1f0>)
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <ADC_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00f      	b.n	80029be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0202 	bic.w	r2, r2, #2
 80029cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	005a      	lsls	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	035a      	lsls	r2, r3, #13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	051a      	lsls	r2, r3, #20
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a76:	025a      	lsls	r2, r3, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	029a      	lsls	r2, r3, #10
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	0f000001 	.word	0x0f000001

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff4c 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3a:	f7ff ff61 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f7ff ffb1 	bl	8002bac <NVIC_EncodePriority>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff80 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c58:	bf00      	nop
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff54 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e165      	b.n	8002f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8154 	bne.w	8002f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d017      	beq.n	8002d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80ae 	beq.w	8002f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a5c      	ldr	r2, [pc, #368]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b5a      	ldr	r3, [pc, #360]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4f      	ldr	r2, [pc, #316]	; (8002f84 <HAL_GPIO_Init+0x308>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d025      	beq.n	8002e96 <HAL_GPIO_Init+0x21a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4e      	ldr	r2, [pc, #312]	; (8002f88 <HAL_GPIO_Init+0x30c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <HAL_GPIO_Init+0x216>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4d      	ldr	r2, [pc, #308]	; (8002f8c <HAL_GPIO_Init+0x310>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d019      	beq.n	8002e8e <HAL_GPIO_Init+0x212>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	; (8002f90 <HAL_GPIO_Init+0x314>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0x20e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_GPIO_Init+0x318>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00d      	beq.n	8002e86 <HAL_GPIO_Init+0x20a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4a      	ldr	r2, [pc, #296]	; (8002f98 <HAL_GPIO_Init+0x31c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_GPIO_Init+0x206>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a49      	ldr	r2, [pc, #292]	; (8002f9c <HAL_GPIO_Init+0x320>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_GPIO_Init+0x202>
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	e00c      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	e00a      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e82:	2305      	movs	r3, #5
 8002e84:	e008      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x21c>
 8002e96:	2300      	movs	r3, #0
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f002 0203 	and.w	r2, r2, #3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4093      	lsls	r3, r2
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea8:	4935      	ldr	r1, [pc, #212]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eda:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f04:	4a26      	ldr	r2, [pc, #152]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <HAL_GPIO_Init+0x324>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	f67f ae96 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40020000 	.word	0x40020000
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40021400 	.word	0x40021400
 8002f9c:	40021800 	.word	0x40021800
 8002fa0:	40013c00 	.word	0x40013c00

08002fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e001      	b.n	8002fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe4:	787b      	ldrb	r3, [r7, #1]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff0:	e003      	b.n	8002ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ff2:	887b      	ldrh	r3, [r7, #2]
 8002ff4:	041a      	lsls	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7ff f8c2 	bl	8002280 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7ff f8be 	bl	8002280 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318e:	f000 f887 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490a      	ldr	r1, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fee2 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	0800b7b8 	.word	0x0800b7b8
 80031cc:	20000004 	.word	0x20000004
 80031d0:	20000008 	.word	0x20000008

080031d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000004 	.word	0x20000004

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff0 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	0800b7c8 	.word	0x0800b7c8

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003218:	f7ff ffdc 	bl	80031d4 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0b5b      	lsrs	r3, r3, #13
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	0800b7c8 	.word	0x0800b7c8

0800323c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	220f      	movs	r2, #15
 800324a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_RCC_GetClockConfig+0x60>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 020f 	and.w	r2, r3, #15
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	40023c00 	.word	0x40023c00

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b0ae      	sub	sp, #184	; 0xb8
 80032a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c6:	4bcb      	ldr	r3, [pc, #812]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	f200 8206 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x440>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003311 	.word	0x08003311
 80032e0:	080036e1 	.word	0x080036e1
 80032e4:	080036e1 	.word	0x080036e1
 80032e8:	080036e1 	.word	0x080036e1
 80032ec:	08003319 	.word	0x08003319
 80032f0:	080036e1 	.word	0x080036e1
 80032f4:	080036e1 	.word	0x080036e1
 80032f8:	080036e1 	.word	0x080036e1
 80032fc:	08003321 	.word	0x08003321
 8003300:	080036e1 	.word	0x080036e1
 8003304:	080036e1 	.word	0x080036e1
 8003308:	080036e1 	.word	0x080036e1
 800330c:	08003511 	.word	0x08003511
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4bb9      	ldr	r3, [pc, #740]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003316:	e1e7      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003318:	4bb8      	ldr	r3, [pc, #736]	; (80035fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800331a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800331e:	e1e3      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003320:	4bb4      	ldr	r3, [pc, #720]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332c:	4bb1      	ldr	r3, [pc, #708]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d071      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003338:	4bae      	ldr	r3, [pc, #696]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003344:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800334c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800335a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800335e:	4622      	mov	r2, r4
 8003360:	462b      	mov	r3, r5
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	0159      	lsls	r1, r3, #5
 800336c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003370:	0150      	lsls	r0, r2, #5
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4621      	mov	r1, r4
 8003378:	1a51      	subs	r1, r2, r1
 800337a:	6439      	str	r1, [r7, #64]	; 0x40
 800337c:	4629      	mov	r1, r5
 800337e:	eb63 0301 	sbc.w	r3, r3, r1
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003390:	4649      	mov	r1, r9
 8003392:	018b      	lsls	r3, r1, #6
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800339a:	4641      	mov	r1, r8
 800339c:	018a      	lsls	r2, r1, #6
 800339e:	4641      	mov	r1, r8
 80033a0:	1a51      	subs	r1, r2, r1
 80033a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033a4:	4649      	mov	r1, r9
 80033a6:	eb63 0301 	sbc.w	r3, r3, r1
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80033b8:	4649      	mov	r1, r9
 80033ba:	00cb      	lsls	r3, r1, #3
 80033bc:	4641      	mov	r1, r8
 80033be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c2:	4641      	mov	r1, r8
 80033c4:	00ca      	lsls	r2, r1, #3
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	4622      	mov	r2, r4
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	462b      	mov	r3, r5
 80033d4:	460a      	mov	r2, r1
 80033d6:	eb42 0303 	adc.w	r3, r2, r3
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033e8:	4629      	mov	r1, r5
 80033ea:	024b      	lsls	r3, r1, #9
 80033ec:	4621      	mov	r1, r4
 80033ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033f2:	4621      	mov	r1, r4
 80033f4:	024a      	lsls	r2, r1, #9
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003408:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800340c:	f7fc ff68 	bl	80002e0 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800341a:	e067      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341c:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003428:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800342c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003434:	67bb      	str	r3, [r7, #120]	; 0x78
 8003436:	2300      	movs	r3, #0
 8003438:	67fb      	str	r3, [r7, #124]	; 0x7c
 800343a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4621      	mov	r1, r4
 8003458:	1a51      	subs	r1, r2, r1
 800345a:	62b9      	str	r1, [r7, #40]	; 0x28
 800345c:	4629      	mov	r1, r5
 800345e:	eb63 0301 	sbc.w	r3, r3, r1
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003470:	4649      	mov	r1, r9
 8003472:	018b      	lsls	r3, r1, #6
 8003474:	4641      	mov	r1, r8
 8003476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347a:	4641      	mov	r1, r8
 800347c:	018a      	lsls	r2, r1, #6
 800347e:	4641      	mov	r1, r8
 8003480:	ebb2 0a01 	subs.w	sl, r2, r1
 8003484:	4649      	mov	r1, r9
 8003486:	eb63 0b01 	sbc.w	fp, r3, r1
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003496:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800349a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800349e:	4692      	mov	sl, r2
 80034a0:	469b      	mov	fp, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	eb1a 0303 	adds.w	r3, sl, r3
 80034a8:	623b      	str	r3, [r7, #32]
 80034aa:	462b      	mov	r3, r5
 80034ac:	eb4b 0303 	adc.w	r3, fp, r3
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034be:	4629      	mov	r1, r5
 80034c0:	028b      	lsls	r3, r1, #10
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c8:	4621      	mov	r1, r4
 80034ca:	028a      	lsls	r2, r1, #10
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034d4:	2200      	movs	r2, #0
 80034d6:	673b      	str	r3, [r7, #112]	; 0x70
 80034d8:	677a      	str	r2, [r7, #116]	; 0x74
 80034da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034de:	f7fc feff 	bl	80002e0 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4613      	mov	r3, r2
 80034e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ec:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800350e:	e0eb      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003510:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800351c:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d06b      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	2200      	movs	r2, #0
 8003530:	66bb      	str	r3, [r7, #104]	; 0x68
 8003532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353a:	663b      	str	r3, [r7, #96]	; 0x60
 800353c:	2300      	movs	r3, #0
 800353e:	667b      	str	r3, [r7, #100]	; 0x64
 8003540:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003556:	0150      	lsls	r0, r2, #5
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4621      	mov	r1, r4
 800355e:	1a51      	subs	r1, r2, r1
 8003560:	61b9      	str	r1, [r7, #24]
 8003562:	4629      	mov	r1, r5
 8003564:	eb63 0301 	sbc.w	r3, r3, r1
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003576:	4659      	mov	r1, fp
 8003578:	018b      	lsls	r3, r1, #6
 800357a:	4651      	mov	r1, sl
 800357c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003580:	4651      	mov	r1, sl
 8003582:	018a      	lsls	r2, r1, #6
 8003584:	4651      	mov	r1, sl
 8003586:	ebb2 0801 	subs.w	r8, r2, r1
 800358a:	4659      	mov	r1, fp
 800358c:	eb63 0901 	sbc.w	r9, r3, r1
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800359c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035a4:	4690      	mov	r8, r2
 80035a6:	4699      	mov	r9, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	eb18 0303 	adds.w	r3, r8, r3
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	462b      	mov	r3, r5
 80035b2:	eb49 0303 	adc.w	r3, r9, r3
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035c4:	4629      	mov	r1, r5
 80035c6:	024b      	lsls	r3, r1, #9
 80035c8:	4621      	mov	r1, r4
 80035ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ce:	4621      	mov	r1, r4
 80035d0:	024a      	lsls	r2, r1, #9
 80035d2:	4610      	mov	r0, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035da:	2200      	movs	r2, #0
 80035dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80035de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035e4:	f7fc fe7c 	bl	80002e0 <__aeabi_uldivmod>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4613      	mov	r3, r2
 80035ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f2:	e065      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x420>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	00f42400 	.word	0x00f42400
 80035fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003600:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	2200      	movs	r2, #0
 8003608:	4618      	mov	r0, r3
 800360a:	4611      	mov	r1, r2
 800360c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003610:	653b      	str	r3, [r7, #80]	; 0x50
 8003612:	2300      	movs	r3, #0
 8003614:	657b      	str	r3, [r7, #84]	; 0x54
 8003616:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800361a:	4642      	mov	r2, r8
 800361c:	464b      	mov	r3, r9
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	0159      	lsls	r1, r3, #5
 8003628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362c:	0150      	lsls	r0, r2, #5
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4641      	mov	r1, r8
 8003634:	1a51      	subs	r1, r2, r1
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	4649      	mov	r1, r9
 800363a:	eb63 0301 	sbc.w	r3, r3, r1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800364c:	4659      	mov	r1, fp
 800364e:	018b      	lsls	r3, r1, #6
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003656:	4651      	mov	r1, sl
 8003658:	018a      	lsls	r2, r1, #6
 800365a:	4651      	mov	r1, sl
 800365c:	1a54      	subs	r4, r2, r1
 800365e:	4659      	mov	r1, fp
 8003660:	eb63 0501 	sbc.w	r5, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	00eb      	lsls	r3, r5, #3
 800366e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003672:	00e2      	lsls	r2, r4, #3
 8003674:	4614      	mov	r4, r2
 8003676:	461d      	mov	r5, r3
 8003678:	4643      	mov	r3, r8
 800367a:	18e3      	adds	r3, r4, r3
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	464b      	mov	r3, r9
 8003680:	eb45 0303 	adc.w	r3, r5, r3
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003692:	4629      	mov	r1, r5
 8003694:	028b      	lsls	r3, r1, #10
 8003696:	4621      	mov	r1, r4
 8003698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800369c:	4621      	mov	r1, r4
 800369e:	028a      	lsls	r2, r1, #10
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a8:	2200      	movs	r2, #0
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036b2:	f7fc fe15 	bl	80002e0 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4613      	mov	r3, r2
 80036bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0f1b      	lsrs	r3, r3, #28
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80036ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036de:	e003      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80036e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	37b8      	adds	r7, #184	; 0xb8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400

08003700 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e28d      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8083 	beq.w	8003826 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003720:	4b94      	ldr	r3, [pc, #592]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b04      	cmp	r3, #4
 800372a:	d019      	beq.n	8003760 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800372c:	4b91      	ldr	r3, [pc, #580]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003734:	2b08      	cmp	r3, #8
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003738:	4b8e      	ldr	r3, [pc, #568]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003744:	d00c      	beq.n	8003760 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d112      	bne.n	8003778 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4b88      	ldr	r3, [pc, #544]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375e:	d10b      	bne.n	8003778 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	4b84      	ldr	r3, [pc, #528]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05b      	beq.n	8003824 <HAL_RCC_OscConfig+0x124>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d157      	bne.n	8003824 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e25a      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d106      	bne.n	8003790 <HAL_RCC_OscConfig+0x90>
 8003782:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7b      	ldr	r2, [pc, #492]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xcc>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0xb4>
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a75      	ldr	r2, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a72      	ldr	r2, [pc, #456]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xcc>
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fd54 	bl	8002280 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe fd50 	bl	8002280 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e21f      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b61      	ldr	r3, [pc, #388]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xdc>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe fd40 	bl	8002280 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe fd3c 	bl	8002280 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e20b      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b57      	ldr	r3, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x104>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d06f      	beq.n	8003912 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003832:	4b50      	ldr	r3, [pc, #320]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d017      	beq.n	800386e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800383e:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003846:	2b08      	cmp	r3, #8
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b44      	ldr	r3, [pc, #272]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x186>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1d3      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4937      	ldr	r1, [pc, #220]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e03a      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <HAL_RCC_OscConfig+0x278>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe fce9 	bl	8002280 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe fce5 	bl	8002280 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e1b4      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4925      	ldr	r1, [pc, #148]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x278>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fcc8 	bl	8002280 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fcc4 	bl	8002280 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e193      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d036      	beq.n	800398c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCC_OscConfig+0x27c>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fe fca8 	bl	8002280 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003934:	f7fe fca4 	bl	8002280 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e173      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x234>
 8003952:	e01b      	b.n	800398c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_OscConfig+0x27c>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe fc91 	bl	8002280 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	e00e      	b.n	8003980 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003962:	f7fe fc8d 	bl	8002280 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d907      	bls.n	8003980 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e15c      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
 8003974:	40023800 	.word	0x40023800
 8003978:	42470000 	.word	0x42470000
 800397c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b8a      	ldr	r3, [pc, #552]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ea      	bne.n	8003962 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8097 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b83      	ldr	r3, [pc, #524]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d118      	bne.n	8003a08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e2:	f7fe fc4d 	bl	8002280 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ea:	f7fe fc49 	bl	8002280 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e118      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b6c      	ldr	r3, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x4b0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_OscConfig+0x31e>
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	e01c      	b.n	8003a58 <HAL_RCC_OscConfig+0x358>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x340>
 8003a26:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a60      	ldr	r2, [pc, #384]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0x358>
 8003a40:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a59      	ldr	r2, [pc, #356]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4c:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a56      	ldr	r2, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	f023 0304 	bic.w	r3, r3, #4
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d015      	beq.n	8003a8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe fc0e 	bl	8002280 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fe fc0a 	bl	8002280 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e0d7      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ee      	beq.n	8003a68 <HAL_RCC_OscConfig+0x368>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fbf8 	bl	8002280 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe fbf4 	bl	8002280 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0c1      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1ee      	bne.n	8003a94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abc:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4a3a      	ldr	r2, [pc, #232]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80ad 	beq.w	8003c2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d060      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d145      	bne.n	8003b72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCC_OscConfig+0x4b4>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe fbc8 	bl	8002280 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fe fbc4 	bl	8002280 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e093      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	071b      	lsls	r3, r3, #28
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x4b4>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fe fb99 	bl	8002280 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fe fb95 	bl	8002280 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e064      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x452>
 8003b70:	e05c      	b.n	8003c2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x4b4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fb82 	bl	8002280 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe fb7e 	bl	8002280 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e04d      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x4ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x480>
 8003b9e:	e045      	b.n	8003c2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e040      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCC_OscConfig+0x538>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d030      	beq.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d129      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d122      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d119      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d10f      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07b      	b.n	8003d46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5e:	d009      	beq.n	8003c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
 8003c66:	e005      	b.n	8003c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe f8a4 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0104 	and.w	r1, r3, #4
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	f003 0210 	and.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b088      	sub	sp, #32
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_SPI_Transmit+0x22>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e12d      	b.n	8003fcc <HAL_SPI_Transmit+0x27e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d78:	f7fe fa82 	bl	8002280 <HAL_GetTick>
 8003d7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d92:	e116      	b.n	8003fc2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_SPI_Transmit+0x52>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003da4:	e10d      	b.n	8003fc2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2203      	movs	r2, #3
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dec:	d10f      	bne.n	8003e0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d007      	beq.n	8003e2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	d14f      	bne.n	8003ed6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Transmit+0xf6>
 8003e3e:	8afb      	ldrh	r3, [r7, #22]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d142      	bne.n	8003eca <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	881a      	ldrh	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	1c9a      	adds	r2, r3, #2
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e68:	e02f      	b.n	8003eca <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d112      	bne.n	8003e9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	881a      	ldrh	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	1c9a      	adds	r2, r3, #2
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e9c:	e015      	b.n	8003eca <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9e:	f7fe f9ef 	bl	8002280 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d803      	bhi.n	8003eb6 <HAL_SPI_Transmit+0x168>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d102      	bne.n	8003ebc <HAL_SPI_Transmit+0x16e>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ec8:	e07b      	b.n	8003fc2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ca      	bne.n	8003e6a <HAL_SPI_Transmit+0x11c>
 8003ed4:	e050      	b.n	8003f78 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_Transmit+0x196>
 8003ede:	8afb      	ldrh	r3, [r7, #22]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d144      	bne.n	8003f6e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f0a:	e030      	b.n	8003f6e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d113      	bne.n	8003f42 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f40:	e015      	b.n	8003f6e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f42:	f7fe f99d 	bl	8002280 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d803      	bhi.n	8003f5a <HAL_SPI_Transmit+0x20c>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d102      	bne.n	8003f60 <HAL_SPI_Transmit+0x212>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f6c:	e029      	b.n	8003fc2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1c9      	bne.n	8003f0c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	6839      	ldr	r1, [r7, #0]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fa6f 	bl	8004460 <SPI_EndRxTxTransaction>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e003      	b.n	8003fc2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x26>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e198      	b.n	800432c <HAL_SPI_TransmitReceive+0x358>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004002:	f7fe f93d 	bl	8002280 <HAL_GetTick>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800401c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004020:	2b01      	cmp	r3, #1
 8004022:	d00f      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x70>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d107      	bne.n	800403c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d103      	bne.n	800403c <HAL_SPI_TransmitReceive+0x68>
 8004034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004038:	2b04      	cmp	r3, #4
 800403a:	d003      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800403c:	2302      	movs	r3, #2
 800403e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004042:	e16d      	b.n	8004320 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x82>
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800405c:	e160      	b.n	8004320 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b04      	cmp	r3, #4
 8004068:	d003      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2205      	movs	r2, #5
 800406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	887a      	ldrh	r2, [r7, #2]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d007      	beq.n	80040c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ce:	d17c      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_TransmitReceive+0x10a>
 80040d8:	8b7b      	ldrh	r3, [r7, #26]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d16a      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	881a      	ldrh	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004102:	e057      	b.n	80041b4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d11b      	bne.n	800414a <HAL_SPI_TransmitReceive+0x176>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d016      	beq.n	800414a <HAL_SPI_TransmitReceive+0x176>
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	2b01      	cmp	r3, #1
 8004120:	d113      	bne.n	800414a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	1c9a      	adds	r2, r3, #2
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d119      	bne.n	800418c <HAL_SPI_TransmitReceive+0x1b8>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d014      	beq.n	800418c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	b292      	uxth	r2, r2
 800416e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004188:	2301      	movs	r3, #1
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800418c:	f7fe f878 	bl	8002280 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004198:	429a      	cmp	r2, r3
 800419a:	d80b      	bhi.n	80041b4 <HAL_SPI_TransmitReceive+0x1e0>
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d007      	beq.n	80041b4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80041b2:	e0b5      	b.n	8004320 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1a2      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x130>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d19d      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x130>
 80041c8:	e080      	b.n	80042cc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x204>
 80041d2:	8b7b      	ldrh	r3, [r7, #26]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d16f      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fe:	e05b      	b.n	80042b8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d11c      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x274>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d017      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x274>
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d114      	bne.n	8004248 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d119      	bne.n	800428a <HAL_SPI_TransmitReceive+0x2b6>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d014      	beq.n	800428a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004286:	2301      	movs	r3, #1
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800428a:	f7fd fff9 	bl	8002280 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004296:	429a      	cmp	r2, r3
 8004298:	d803      	bhi.n	80042a2 <HAL_SPI_TransmitReceive+0x2ce>
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d102      	bne.n	80042a8 <HAL_SPI_TransmitReceive+0x2d4>
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042b6:	e033      	b.n	8004320 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d19e      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x22c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d199      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f8c5 	bl	8004460 <SPI_EndRxTxTransaction>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d006      	beq.n	80042ea <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042e8:	e01a      	b.n	8004320 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004316:	e003      	b.n	8004320 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800432c:	4618      	mov	r0, r3
 800432e:	3730      	adds	r7, #48	; 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004342:	b2db      	uxtb	r3, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004360:	f7fd ff8e 	bl	8002280 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4413      	add	r3, r2
 800436e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004370:	f7fd ff86 	bl	8002280 <HAL_GetTick>
 8004374:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004376:	4b39      	ldr	r3, [pc, #228]	; (800445c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	015b      	lsls	r3, r3, #5
 800437c:	0d1b      	lsrs	r3, r3, #20
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	fb02 f303 	mul.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004386:	e054      	b.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d050      	beq.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004390:	f7fd ff76 	bl	8002280 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	429a      	cmp	r2, r3
 800439e:	d902      	bls.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d13d      	bne.n	8004422 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043be:	d111      	bne.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c8:	d004      	beq.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d2:	d107      	bne.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ec:	d10f      	bne.n	800440e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800440c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e017      	b.n	8004452 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3b01      	subs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d19b      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000004 	.word	0x20000004

08004460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2201      	movs	r2, #1
 8004474:	2102      	movs	r1, #2
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff ff6a 	bl	8004350 <SPI_WaitFlagStateUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e032      	b.n	80044f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <SPI_EndRxTxTransaction+0xa0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <SPI_EndRxTxTransaction+0xa4>)
 8004498:	fba2 2303 	umull	r2, r3, r2, r3
 800449c:	0d5b      	lsrs	r3, r3, #21
 800449e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b0:	d112      	bne.n	80044d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff ff47 	bl	8004350 <SPI_WaitFlagStateUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e00f      	b.n	80044f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d0f2      	beq.n	80044d8 <SPI_EndRxTxTransaction+0x78>
 80044f2:	e000      	b.n	80044f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80044f4:	bf00      	nop
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000004 	.word	0x20000004
 8004504:	165e9f81 	.word	0x165e9f81

08004508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e041      	b.n	800459e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd fc9c 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fae6 	bl	8004b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e046      	b.n	800464e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a23      	ldr	r2, [pc, #140]	; (800465c <HAL_TIM_Base_Start+0xb4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d022      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045da:	d01d      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_TIM_Base_Start+0xb8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d018      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <HAL_TIM_Base_Start+0xbc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_TIM_Base_Start+0xc0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <HAL_TIM_Base_Start+0xc4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_TIM_Base_Start+0xc8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <HAL_TIM_Base_Start+0x70>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <HAL_TIM_Base_Start+0xcc>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d111      	bne.n	800463c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b06      	cmp	r3, #6
 8004628:	d010      	beq.n	800464c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	e007      	b.n	800464c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40010400 	.word	0x40010400
 8004670:	40014000 	.word	0x40014000
 8004674:	40001800 	.word	0x40001800

08004678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e04e      	b.n	800472e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a23      	ldr	r2, [pc, #140]	; (800473c <HAL_TIM_Base_Start_IT+0xc4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d01d      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <HAL_TIM_Base_Start_IT+0xc8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <HAL_TIM_Base_Start_IT+0xcc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <HAL_TIM_Base_Start_IT+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <HAL_TIM_Base_Start_IT+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0x80>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIM_Base_Start_IT+0xdc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d111      	bne.n	800471c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d010      	beq.n	800472c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471a:	e007      	b.n	800472c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40001800 	.word	0x40001800

08004758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d020      	beq.n	80047bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0202 	mvn.w	r2, #2
 800478c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f999 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f98b 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f99c 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d020      	beq.n	8004808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0204 	mvn.w	r2, #4
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f973 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f965 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f976 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0208 	mvn.w	r2, #8
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2204      	movs	r2, #4
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f94d 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f93f 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f950 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b00      	cmp	r3, #0
 800485c:	d020      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0210 	mvn.w	r2, #16
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2208      	movs	r2, #8
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f927 	bl	8004ada <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f919 	bl	8004ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f92a 	bl	8004aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00c      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0201 	mvn.w	r2, #1
 80048bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd f9e4 	bl	8001c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00c      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fae4 	bl	8004eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8fb 	bl	8004b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0220 	mvn.w	r2, #32
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fab6 	bl	8004e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIM_ConfigClockSource+0x1c>
 8004950:	2302      	movs	r3, #2
 8004952:	e0b4      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x186>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800497a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498c:	d03e      	beq.n	8004a0c <HAL_TIM_ConfigClockSource+0xd4>
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004992:	f200 8087 	bhi.w	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499a:	f000 8086 	beq.w	8004aaa <HAL_TIM_ConfigClockSource+0x172>
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d87f      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049a4:	2b70      	cmp	r3, #112	; 0x70
 80049a6:	d01a      	beq.n	80049de <HAL_TIM_ConfigClockSource+0xa6>
 80049a8:	2b70      	cmp	r3, #112	; 0x70
 80049aa:	d87b      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049ac:	2b60      	cmp	r3, #96	; 0x60
 80049ae:	d050      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x11a>
 80049b0:	2b60      	cmp	r3, #96	; 0x60
 80049b2:	d877      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049b4:	2b50      	cmp	r3, #80	; 0x50
 80049b6:	d03c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0xfa>
 80049b8:	2b50      	cmp	r3, #80	; 0x50
 80049ba:	d873      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d058      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x13a>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d86f      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049c4:	2b30      	cmp	r3, #48	; 0x30
 80049c6:	d064      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049c8:	2b30      	cmp	r3, #48	; 0x30
 80049ca:	d86b      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d060      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d867      	bhi.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05c      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d05a      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	e062      	b.n	8004aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ee:	f000 f9b9 	bl	8004d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	609a      	str	r2, [r3, #8]
      break;
 8004a0a:	e04f      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a1c:	f000 f9a2 	bl	8004d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a2e:	609a      	str	r2, [r3, #8]
      break;
 8004a30:	e03c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 f916 	bl	8004c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2150      	movs	r1, #80	; 0x50
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f96f 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004a50:	e02c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f000 f935 	bl	8004cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2160      	movs	r1, #96	; 0x60
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f95f 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004a70:	e01c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 f8f6 	bl	8004c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2140      	movs	r1, #64	; 0x40
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f94f 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004a90:	e00c      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 f946 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004aa2:	e003      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa8:	e000      	b.n	8004aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a46      	ldr	r2, [pc, #280]	; (8004c44 <TIM_Base_SetConfig+0x12c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <TIM_Base_SetConfig+0x40>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b36:	d00f      	beq.n	8004b58 <TIM_Base_SetConfig+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a43      	ldr	r2, [pc, #268]	; (8004c48 <TIM_Base_SetConfig+0x130>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00b      	beq.n	8004b58 <TIM_Base_SetConfig+0x40>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a42      	ldr	r2, [pc, #264]	; (8004c4c <TIM_Base_SetConfig+0x134>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <TIM_Base_SetConfig+0x40>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a41      	ldr	r2, [pc, #260]	; (8004c50 <TIM_Base_SetConfig+0x138>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <TIM_Base_SetConfig+0x13c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d108      	bne.n	8004b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a35      	ldr	r2, [pc, #212]	; (8004c44 <TIM_Base_SetConfig+0x12c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02b      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d027      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a32      	ldr	r2, [pc, #200]	; (8004c48 <TIM_Base_SetConfig+0x130>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d023      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a31      	ldr	r2, [pc, #196]	; (8004c4c <TIM_Base_SetConfig+0x134>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01f      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a30      	ldr	r2, [pc, #192]	; (8004c50 <TIM_Base_SetConfig+0x138>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01b      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <TIM_Base_SetConfig+0x13c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d017      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2e      	ldr	r2, [pc, #184]	; (8004c58 <TIM_Base_SetConfig+0x140>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2d      	ldr	r2, [pc, #180]	; (8004c5c <TIM_Base_SetConfig+0x144>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00f      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <TIM_Base_SetConfig+0x148>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00b      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <TIM_Base_SetConfig+0x14c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <TIM_Base_SetConfig+0x150>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d003      	beq.n	8004bca <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <TIM_Base_SetConfig+0x154>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d108      	bne.n	8004bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a10      	ldr	r2, [pc, #64]	; (8004c44 <TIM_Base_SetConfig+0x12c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_Base_SetConfig+0xf8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <TIM_Base_SetConfig+0x13c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d103      	bne.n	8004c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f023 0201 	bic.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]
  }
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40000400 	.word	0x40000400
 8004c4c:	40000800 	.word	0x40000800
 8004c50:	40000c00 	.word	0x40000c00
 8004c54:	40010400 	.word	0x40010400
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800
 8004c64:	40001800 	.word	0x40001800
 8004c68:	40001c00 	.word	0x40001c00
 8004c6c:	40002000 	.word	0x40002000

08004c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0201 	bic.w	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 030a 	bic.w	r3, r3, #10
 8004cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b087      	sub	sp, #28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f023 0210 	bic.w	r2, r3, #16
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f043 0307 	orr.w	r3, r3, #7
 8004d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	021a      	lsls	r2, r3, #8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e05a      	b.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d022      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d01d      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d10c      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40001800 	.word	0x40001800

08004e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e042      	b.n	8004f5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fc fffc 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2224      	movs	r2, #36	; 0x24
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f973 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d175      	bne.n	8005070 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Transmit+0x2c>
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e06e      	b.n	8005072 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fa2:	f7fd f96d 	bl	8002280 <HAL_GetTick>
 8004fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbc:	d108      	bne.n	8004fd0 <HAL_UART_Transmit+0x6c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	e003      	b.n	8004fd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fd8:	e02e      	b.n	8005038 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2180      	movs	r1, #128	; 0x80
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f848 	bl	800507a <UART_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03a      	b.n	8005072 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3302      	adds	r3, #2
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e007      	b.n	800502a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1cb      	bne.n	8004fda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2140      	movs	r1, #64	; 0x40
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f814 	bl	800507a <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e006      	b.n	8005072 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508a:	e03b      	b.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d037      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7fd f8f4 	bl	8002280 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <UART_WaitOnFlagUntilTimeout+0x30>
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e03a      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d023      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b80      	cmp	r3, #128	; 0x80
 80050c0:	d020      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d01d      	beq.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d116      	bne.n	8005104 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f81d 	bl	800512c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2208      	movs	r2, #8
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e00f      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	429a      	cmp	r2, r3
 8005120:	d0b4      	beq.n	800508c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b095      	sub	sp, #84	; 0x54
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	e853 3f00 	ldrex	r3, [r3]
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005154:	643a      	str	r2, [r7, #64]	; 0x40
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800515a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800515c:	e841 2300 	strex	r3, r2, [r1]
 8005160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1e5      	bne.n	8005134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	61fb      	str	r3, [r7, #28]
   return(result);
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f023 0301 	bic.w	r3, r3, #1
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800518e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d119      	bne.n	80051d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f023 0310 	bic.w	r3, r3, #16
 80051ba:	647b      	str	r3, [r7, #68]	; 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051c4:	61ba      	str	r2, [r7, #24]
 80051c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	613b      	str	r3, [r7, #16]
   return(result);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051e6:	bf00      	nop
 80051e8:	3754      	adds	r7, #84	; 0x54
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b0c0      	sub	sp, #256	; 0x100
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	68d9      	ldr	r1, [r3, #12]
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	ea40 0301 	orr.w	r3, r0, r1
 800521c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800524c:	f021 010c 	bic.w	r1, r1, #12
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800525a:	430b      	orrs	r3, r1
 800525c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	6999      	ldr	r1, [r3, #24]
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	ea40 0301 	orr.w	r3, r0, r1
 800527a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b8f      	ldr	r3, [pc, #572]	; (80054c0 <UART_SetConfig+0x2cc>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d005      	beq.n	8005294 <UART_SetConfig+0xa0>
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8d      	ldr	r3, [pc, #564]	; (80054c4 <UART_SetConfig+0x2d0>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d104      	bne.n	800529e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fd ffbe 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8005298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800529c:	e003      	b.n	80052a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529e:	f7fd ffa5 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 80052a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	f040 810c 	bne.w	80054cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80052ce:	415b      	adcs	r3, r3
 80052d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052d6:	4621      	mov	r1, r4
 80052d8:	eb12 0801 	adds.w	r8, r2, r1
 80052dc:	4629      	mov	r1, r5
 80052de:	eb43 0901 	adc.w	r9, r3, r1
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f6:	4690      	mov	r8, r2
 80052f8:	4699      	mov	r9, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	eb18 0303 	adds.w	r3, r8, r3
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005304:	462b      	mov	r3, r5
 8005306:	eb49 0303 	adc.w	r3, r9, r3
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800531a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800531e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005322:	460b      	mov	r3, r1
 8005324:	18db      	adds	r3, r3, r3
 8005326:	653b      	str	r3, [r7, #80]	; 0x50
 8005328:	4613      	mov	r3, r2
 800532a:	eb42 0303 	adc.w	r3, r2, r3
 800532e:	657b      	str	r3, [r7, #84]	; 0x54
 8005330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005338:	f7fa ffd2 	bl	80002e0 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b61      	ldr	r3, [pc, #388]	; (80054c8 <UART_SetConfig+0x2d4>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011c      	lsls	r4, r3, #4
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	64b9      	str	r1, [r7, #72]	; 0x48
 8005364:	415b      	adcs	r3, r3
 8005366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800536c:	4641      	mov	r1, r8
 800536e:	eb12 0a01 	adds.w	sl, r2, r1
 8005372:	4649      	mov	r1, r9
 8005374:	eb43 0b01 	adc.w	fp, r3, r1
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800538c:	4692      	mov	sl, r2
 800538e:	469b      	mov	fp, r3
 8005390:	4643      	mov	r3, r8
 8005392:	eb1a 0303 	adds.w	r3, sl, r3
 8005396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800539a:	464b      	mov	r3, r9
 800539c:	eb4b 0303 	adc.w	r3, fp, r3
 80053a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053b8:	460b      	mov	r3, r1
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	643b      	str	r3, [r7, #64]	; 0x40
 80053be:	4613      	mov	r3, r2
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
 80053c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053ce:	f7fa ff87 	bl	80002e0 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b3b      	ldr	r3, [pc, #236]	; (80054c8 <UART_SetConfig+0x2d4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	; 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <UART_SetConfig+0x2d4>)
 80053f0:	fba3 2302 	umull	r2, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053fc:	441c      	add	r4, r3
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800540c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	63b9      	str	r1, [r7, #56]	; 0x38
 8005418:	415b      	adcs	r3, r3
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6339      	str	r1, [r7, #48]	; 0x30
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005454:	464b      	mov	r3, r9
 8005456:	460a      	mov	r2, r1
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800546c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005474:	460b      	mov	r3, r1
 8005476:	18db      	adds	r3, r3, r3
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
 800547a:	4613      	mov	r3, r2
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800548a:	f7fa ff29 	bl	80002e0 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <UART_SetConfig+0x2d4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	; 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	3332      	adds	r3, #50	; 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <UART_SetConfig+0x2d4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 0207 	and.w	r2, r3, #7
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054bc:	e106      	b.n	80056cc <UART_SetConfig+0x4d8>
 80054be:	bf00      	nop
 80054c0:	40011000 	.word	0x40011000
 80054c4:	40011400 	.word	0x40011400
 80054c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054de:	4642      	mov	r2, r8
 80054e0:	464b      	mov	r3, r9
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	415b      	adcs	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ee:	4641      	mov	r1, r8
 80054f0:	1854      	adds	r4, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb43 0501 	adc.w	r5, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005514:	464b      	mov	r3, r9
 8005516:	eb45 0303 	adc.w	r3, r5, r3
 800551a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800552a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800553a:	4629      	mov	r1, r5
 800553c:	008b      	lsls	r3, r1, #2
 800553e:	4621      	mov	r1, r4
 8005540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005544:	4621      	mov	r1, r4
 8005546:	008a      	lsls	r2, r1, #2
 8005548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800554c:	f7fa fec8 	bl	80002e0 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b60      	ldr	r3, [pc, #384]	; (80056d8 <UART_SetConfig+0x4e4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800556c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	61b9      	str	r1, [r7, #24]
 8005578:	415b      	adcs	r3, r3
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005580:	4641      	mov	r1, r8
 8005582:	1851      	adds	r1, r2, r1
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	4649      	mov	r1, r9
 8005588:	414b      	adcs	r3, r1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005598:	4659      	mov	r1, fp
 800559a:	00cb      	lsls	r3, r1, #3
 800559c:	4651      	mov	r1, sl
 800559e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a2:	4651      	mov	r1, sl
 80055a4:	00ca      	lsls	r2, r1, #3
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	4642      	mov	r2, r8
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055b4:	464b      	mov	r3, r9
 80055b6:	460a      	mov	r2, r1
 80055b8:	eb42 0303 	adc.w	r3, r2, r3
 80055bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055d8:	4649      	mov	r1, r9
 80055da:	008b      	lsls	r3, r1, #2
 80055dc:	4641      	mov	r1, r8
 80055de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e2:	4641      	mov	r1, r8
 80055e4:	008a      	lsls	r2, r1, #2
 80055e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055ea:	f7fa fe79 	bl	80002e0 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b38      	ldr	r3, [pc, #224]	; (80056d8 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	; 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	; 0x32
 8005608:	4a33      	ldr	r2, [pc, #204]	; (80056d8 <UART_SetConfig+0x4e4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005614:	441c      	add	r4, r3
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	673b      	str	r3, [r7, #112]	; 0x70
 800561e:	677a      	str	r2, [r7, #116]	; 0x74
 8005620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	415b      	adcs	r3, r3
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
 8005666:	464b      	mov	r3, r9
 8005668:	460a      	mov	r2, r1
 800566a:	eb42 0303 	adc.w	r3, r2, r3
 800566e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	663b      	str	r3, [r7, #96]	; 0x60
 800567a:	667a      	str	r2, [r7, #100]	; 0x64
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005688:	4649      	mov	r1, r9
 800568a:	008b      	lsls	r3, r1, #2
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005692:	4641      	mov	r1, r8
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800569a:	f7fa fe21 	bl	80002e0 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <UART_SetConfig+0x4e4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	; 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	3332      	adds	r3, #50	; 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <UART_SetConfig+0x4e4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d8:	51eb851f 	.word	0x51eb851f

080056dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80056e0:	4904      	ldr	r1, [pc, #16]	; (80056f4 <MX_FATFS_Init+0x18>)
 80056e2:	4805      	ldr	r0, [pc, #20]	; (80056f8 <MX_FATFS_Init+0x1c>)
 80056e4:	f002 fd78 	bl	80081d8 <FATFS_LinkDriver>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <MX_FATFS_Init+0x20>)
 80056ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056f0:	bf00      	nop
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	2000096c 	.word	0x2000096c
 80056f8:	20000010 	.word	0x20000010
 80056fc:	20000968 	.word	0x20000968

08005700 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005704:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005706:	4618      	mov	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive number to identify the drive */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	4618      	mov	r0, r3
 800571e:	f7fb fc7f 	bl	8001020 <SD_disk_initialize>
 8005722:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	4618      	mov	r0, r3
 800573a:	f7fb fd5b 	bl	80011f4 <SD_disk_status>
 800573e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <USER_read>:
	BYTE pdrv,      /* Physical drive number to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005758:	7bf8      	ldrb	r0, [r7, #15]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	f7fb fd5e 	bl	8001220 <SD_disk_read>
 8005764:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <USER_write>:
	BYTE pdrv,          /* Physical drive number to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800577e:	7bf8      	ldrb	r0, [r7, #15]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	f7fb fdb5 	bl	80012f4 <SD_disk_write>
 800578a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive number (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	603a      	str	r2, [r7, #0]
 800579e:	71fb      	strb	r3, [r7, #7]
 80057a0:	460b      	mov	r3, r1
 80057a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl (pdrv, cmd, buff);;
 80057a4:	79b9      	ldrb	r1, [r7, #6]
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fb fe26 	bl	80013fc <SD_disk_ioctl>
 80057b0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	4a08      	ldr	r2, [pc, #32]	; (80057ec <disk_status+0x30>)
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	79fa      	ldrb	r2, [r7, #7]
 80057d4:	4905      	ldr	r1, [pc, #20]	; (80057ec <disk_status+0x30>)
 80057d6:	440a      	add	r2, r1
 80057d8:	7a12      	ldrb	r2, [r2, #8]
 80057da:	4610      	mov	r0, r2
 80057dc:	4798      	blx	r3
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000998 	.word	0x20000998

080057f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	4a0e      	ldr	r2, [pc, #56]	; (800583c <disk_initialize+0x4c>)
 8005802:	5cd3      	ldrb	r3, [r2, r3]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d114      	bne.n	8005832 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	4a0c      	ldr	r2, [pc, #48]	; (800583c <disk_initialize+0x4c>)
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	79fa      	ldrb	r2, [r7, #7]
 8005816:	4909      	ldr	r1, [pc, #36]	; (800583c <disk_initialize+0x4c>)
 8005818:	440a      	add	r2, r1
 800581a:	7a12      	ldrb	r2, [r2, #8]
 800581c:	4610      	mov	r0, r2
 800581e:	4798      	blx	r3
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	4a03      	ldr	r2, [pc, #12]	; (800583c <disk_initialize+0x4c>)
 800582e:	2101      	movs	r1, #1
 8005830:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000998 	.word	0x20000998

08005840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	4a0a      	ldr	r2, [pc, #40]	; (800587c <disk_read+0x3c>)
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	689c      	ldr	r4, [r3, #8]
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	4a07      	ldr	r2, [pc, #28]	; (800587c <disk_read+0x3c>)
 8005860:	4413      	add	r3, r2
 8005862:	7a18      	ldrb	r0, [r3, #8]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	47a0      	blx	r4
 800586c:	4603      	mov	r3, r0
 800586e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
}
 8005872:	4618      	mov	r0, r3
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd90      	pop	{r4, r7, pc}
 800587a:	bf00      	nop
 800587c:	20000998 	.word	0x20000998

08005880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <disk_write+0x3c>)
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	68dc      	ldr	r4, [r3, #12]
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	4a07      	ldr	r2, [pc, #28]	; (80058bc <disk_write+0x3c>)
 80058a0:	4413      	add	r3, r2
 80058a2:	7a18      	ldrb	r0, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	47a0      	blx	r4
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000998 	.word	0x20000998

080058c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	603a      	str	r2, [r7, #0]
 80058ca:	71fb      	strb	r3, [r7, #7]
 80058cc:	460b      	mov	r3, r1
 80058ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <disk_ioctl+0x38>)
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	79fa      	ldrb	r2, [r7, #7]
 80058de:	4906      	ldr	r1, [pc, #24]	; (80058f8 <disk_ioctl+0x38>)
 80058e0:	440a      	add	r2, r1
 80058e2:	7a10      	ldrb	r0, [r2, #8]
 80058e4:	79b9      	ldrb	r1, [r7, #6]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	4798      	blx	r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000998 	.word	0x20000998

080058fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3301      	adds	r3, #1
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800590c:	89fb      	ldrh	r3, [r7, #14]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	b21a      	sxth	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b21b      	sxth	r3, r3
 8005918:	4313      	orrs	r3, r2
 800591a:	b21b      	sxth	r3, r3
 800591c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800591e:	89fb      	ldrh	r3, [r7, #14]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3303      	adds	r3, #3
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	3202      	adds	r2, #2
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	3201      	adds	r2, #1
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
	return rv;
 8005964:	68fb      	ldr	r3, [r7, #12]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	887a      	ldrh	r2, [r7, #2]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	1c53      	adds	r3, r2, #1
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1c59      	adds	r1, r3, #1
 8005a24:	6179      	str	r1, [r7, #20]
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f1      	bne.n	8005a1a <mem_cpy+0x1a>
	}
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a42:	b480      	push	{r7}
 8005a44:	b087      	sub	sp, #28
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	617a      	str	r2, [r7, #20]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f3      	bne.n	8005a52 <mem_set+0x10>
}
 8005a6a:	bf00      	nop
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	; 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	61ba      	str	r2, [r7, #24]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	1acb      	subs	r3, r1, r3
 8005aa4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <mem_cmp+0x40>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0eb      	beq.n	8005a90 <mem_cmp+0x18>

	return r;
 8005ab8:	697b      	ldr	r3, [r7, #20]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3724      	adds	r7, #36	; 0x24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ad0:	e002      	b.n	8005ad8 <chk_chr+0x12>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	607b      	str	r3, [r7, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <chk_chr+0x26>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d1f2      	bne.n	8005ad2 <chk_chr+0xc>
	return *str;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	781b      	ldrb	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <lock_fs+0x22>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f002 fb9d 	bl	800824e <ff_req_grant>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <lock_fs+0x22>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <lock_fs+0x24>
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <unlock_fs+0x2e>
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d00a      	beq.n	8005b56 <unlock_fs+0x2e>
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	2b0b      	cmp	r3, #11
 8005b44:	d007      	beq.n	8005b56 <unlock_fs+0x2e>
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	2b0f      	cmp	r3, #15
 8005b4a:	d004      	beq.n	8005b56 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f002 fb91 	bl	8008278 <ff_rel_grant>
	}
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e029      	b.n	8005bc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b74:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <chk_lock+0xb4>)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	4413      	add	r3, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01d      	beq.n	8005bbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b82:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <chk_lock+0xb4>)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d116      	bne.n	8005bc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <chk_lock+0xb4>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d10c      	bne.n	8005bc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <chk_lock+0xb4>)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	4413      	add	r3, r2
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d102      	bne.n	8005bc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005bbc:	e007      	b.n	8005bce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d9d2      	bls.n	8005b74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d109      	bne.n	8005be8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <chk_lock+0x80>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d101      	bne.n	8005be4 <chk_lock+0x84>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e010      	b.n	8005c06 <chk_lock+0xa6>
 8005be4:	2312      	movs	r3, #18
 8005be6:	e00e      	b.n	8005c06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <chk_lock+0xa0>
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <chk_lock+0xb4>)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	4413      	add	r3, r2
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d101      	bne.n	8005c04 <chk_lock+0xa4>
 8005c00:	2310      	movs	r3, #16
 8005c02:	e000      	b.n	8005c06 <chk_lock+0xa6>
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000978 	.word	0x20000978

08005c18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e002      	b.n	8005c2a <enq_lock+0x12>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d806      	bhi.n	8005c3e <enq_lock+0x26>
 8005c30:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <enq_lock+0x40>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4413      	add	r3, r2
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f2      	bne.n	8005c24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000978 	.word	0x20000978

08005c5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e01f      	b.n	8005cac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c6c:	4a41      	ldr	r2, [pc, #260]	; (8005d74 <inc_lock+0x118>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d113      	bne.n	8005ca6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <inc_lock+0x118>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	4413      	add	r3, r2
 8005c86:	3304      	adds	r3, #4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d109      	bne.n	8005ca6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c92:	4a38      	ldr	r2, [pc, #224]	; (8005d74 <inc_lock+0x118>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	4413      	add	r3, r2
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d006      	beq.n	8005cb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d9dc      	bls.n	8005c6c <inc_lock+0x10>
 8005cb2:	e000      	b.n	8005cb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005cb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d132      	bne.n	8005d22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e002      	b.n	8005cc8 <inc_lock+0x6c>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d806      	bhi.n	8005cdc <inc_lock+0x80>
 8005cce:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <inc_lock+0x118>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f2      	bne.n	8005cc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d101      	bne.n	8005ce6 <inc_lock+0x8a>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e040      	b.n	8005d68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4922      	ldr	r1, [pc, #136]	; (8005d74 <inc_lock+0x118>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	440b      	add	r3, r1
 8005cf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	491e      	ldr	r1, [pc, #120]	; (8005d74 <inc_lock+0x118>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	440b      	add	r3, r1
 8005d00:	3304      	adds	r3, #4
 8005d02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	491a      	ldr	r1, [pc, #104]	; (8005d74 <inc_lock+0x118>)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	440b      	add	r3, r1
 8005d10:	3308      	adds	r3, #8
 8005d12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <inc_lock+0x118>)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	4413      	add	r3, r2
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	2200      	movs	r2, #0
 8005d20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d009      	beq.n	8005d3c <inc_lock+0xe0>
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <inc_lock+0x118>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	4413      	add	r3, r2
 8005d30:	330c      	adds	r3, #12
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <inc_lock+0xe0>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e015      	b.n	8005d68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <inc_lock+0xf8>
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <inc_lock+0x118>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	e001      	b.n	8005d58 <inc_lock+0xfc>
 8005d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d58:	4906      	ldr	r1, [pc, #24]	; (8005d74 <inc_lock+0x118>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	440b      	add	r3, r1
 8005d60:	330c      	adds	r3, #12
 8005d62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000978 	.word	0x20000978

08005d78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d825      	bhi.n	8005dd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <dec_lock+0x74>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	4413      	add	r3, r2
 8005d94:	330c      	adds	r3, #12
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
 8005d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da0:	d101      	bne.n	8005da6 <dec_lock+0x2e>
 8005da2:	2300      	movs	r3, #0
 8005da4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <dec_lock+0x3a>
 8005dac:	89fb      	ldrh	r3, [r7, #14]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005db2:	4a0e      	ldr	r2, [pc, #56]	; (8005dec <dec_lock+0x74>)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	4413      	add	r3, r2
 8005dba:	330c      	adds	r3, #12
 8005dbc:	89fa      	ldrh	r2, [r7, #14]
 8005dbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005dc0:	89fb      	ldrh	r3, [r7, #14]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <dec_lock+0x5a>
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <dec_lock+0x74>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	4413      	add	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	737b      	strb	r3, [r7, #13]
 8005dd6:	e001      	b.n	8005ddc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005dd8:	2302      	movs	r3, #2
 8005dda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005ddc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000978 	.word	0x20000978

08005df0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e010      	b.n	8005e20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	; (8005e34 <clear_lock+0x44>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	4413      	add	r3, r2
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d105      	bne.n	8005e1a <clear_lock+0x2a>
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <clear_lock+0x44>)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4413      	add	r3, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d9eb      	bls.n	8005dfe <clear_lock+0xe>
	}
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000978 	.word	0x20000978

08005e38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d034      	beq.n	8005eb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7858      	ldrb	r0, [r3, #1]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	f7ff fd0e 	bl	8005880 <disk_write>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	e022      	b.n	8005eb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	1ad2      	subs	r2, r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d217      	bcs.n	8005eb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	789b      	ldrb	r3, [r3, #2]
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e010      	b.n	8005eb0 <sync_window+0x78>
					wsect += fs->fsize;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7858      	ldrb	r0, [r3, #1]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	f7ff fceb 	bl	8005880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d8eb      	bhi.n	8005e8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d01b      	beq.n	8005f10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ffad 	bl	8005e38 <sync_window>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d113      	bne.n	8005f10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7858      	ldrb	r0, [r3, #1]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	f7ff fca3 	bl	8005840 <disk_read>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295
 8005f04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff87 	bl	8005e38 <sync_window>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d158      	bne.n	8005fe6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d148      	bne.n	8005fce <sync_fs+0xb2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	791b      	ldrb	r3, [r3, #4]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d144      	bne.n	8005fce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3334      	adds	r3, #52	; 0x34
 8005f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fd77 	bl	8005a42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3334      	adds	r3, #52	; 0x34
 8005f58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f5c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fd06 	bl	8005972 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3334      	adds	r3, #52	; 0x34
 8005f6a:	4921      	ldr	r1, [pc, #132]	; (8005ff0 <sync_fs+0xd4>)
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fd1b 	bl	80059a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3334      	adds	r3, #52	; 0x34
 8005f76:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f7a:	491e      	ldr	r1, [pc, #120]	; (8005ff4 <sync_fs+0xd8>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fd13 	bl	80059a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3334      	adds	r3, #52	; 0x34
 8005f86:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7ff fd09 	bl	80059a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3334      	adds	r3, #52	; 0x34
 8005f9a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7ff fcff 	bl	80059a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7858      	ldrb	r0, [r3, #1]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f7ff fc5c 	bl	8005880 <disk_write>
			fs->fsi_flag = 0;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fc72 	bl	80058c0 <disk_ioctl>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <sync_fs+0xca>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	41615252 	.word	0x41615252
 8005ff4:	61417272 	.word	0x61417272

08005ff8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	3b02      	subs	r3, #2
 8006006:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	3b02      	subs	r3, #2
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d301      	bcc.n	8006018 <clust2sect+0x20>
 8006014:	2300      	movs	r3, #0
 8006016:	e008      	b.n	800602a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	461a      	mov	r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	fb03 f202 	mul.w	r2, r3, r2
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4413      	add	r3, r2
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d904      	bls.n	8006056 <get_fat+0x20>
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006056:	2301      	movs	r3, #1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e08f      	b.n	800617c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800605c:	f04f 33ff 	mov.w	r3, #4294967295
 8006060:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d062      	beq.n	8006130 <get_fat+0xfa>
 800606a:	2b03      	cmp	r3, #3
 800606c:	dc7c      	bgt.n	8006168 <get_fat+0x132>
 800606e:	2b01      	cmp	r3, #1
 8006070:	d002      	beq.n	8006078 <get_fat+0x42>
 8006072:	2b02      	cmp	r3, #2
 8006074:	d042      	beq.n	80060fc <get_fat+0xc6>
 8006076:	e077      	b.n	8006168 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	0a5b      	lsrs	r3, r3, #9
 800608e:	4413      	add	r3, r2
 8006090:	4619      	mov	r1, r3
 8006092:	6938      	ldr	r0, [r7, #16]
 8006094:	f7ff ff14 	bl	8005ec0 <move_window>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d167      	bne.n	800616e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	60fa      	str	r2, [r7, #12]
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	0a5b      	lsrs	r3, r3, #9
 80060ba:	4413      	add	r3, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f7ff fefe 	bl	8005ec0 <move_window>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d153      	bne.n	8006172 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <get_fat+0xbc>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	e002      	b.n	80060f8 <get_fat+0xc2>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f8:	617b      	str	r3, [r7, #20]
			break;
 80060fa:	e03f      	b.n	800617c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	4413      	add	r3, r2
 8006106:	4619      	mov	r1, r3
 8006108:	6938      	ldr	r0, [r7, #16]
 800610a:	f7ff fed9 	bl	8005ec0 <move_window>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d130      	bne.n	8006176 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006122:	4413      	add	r3, r2
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fbe9 	bl	80058fc <ld_word>
 800612a:	4603      	mov	r3, r0
 800612c:	617b      	str	r3, [r7, #20]
			break;
 800612e:	e025      	b.n	800617c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	09db      	lsrs	r3, r3, #7
 8006138:	4413      	add	r3, r2
 800613a:	4619      	mov	r1, r3
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f7ff febf 	bl	8005ec0 <move_window>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d118      	bne.n	800617a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006156:	4413      	add	r3, r2
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fbe7 	bl	800592c <ld_dword>
 800615e:	4603      	mov	r3, r0
 8006160:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006164:	617b      	str	r3, [r7, #20]
			break;
 8006166:	e009      	b.n	800617c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006168:	2301      	movs	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e006      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800616e:	bf00      	nop
 8006170:	e004      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800617a:	bf00      	nop
		}
	}

	return val;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006186:	b590      	push	{r4, r7, lr}
 8006188:	b089      	sub	sp, #36	; 0x24
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006192:	2302      	movs	r3, #2
 8006194:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b01      	cmp	r3, #1
 800619a:	f240 80d9 	bls.w	8006350 <put_fat+0x1ca>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	f080 80d3 	bcs.w	8006350 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f000 8096 	beq.w	80062e0 <put_fat+0x15a>
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	f300 80cb 	bgt.w	8006350 <put_fat+0x1ca>
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d002      	beq.n	80061c4 <put_fat+0x3e>
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d06e      	beq.n	80062a0 <put_fat+0x11a>
 80061c2:	e0c5      	b.n	8006350 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	0a5b      	lsrs	r3, r3, #9
 80061da:	4413      	add	r3, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff fe6e 	bl	8005ec0 <move_window>
 80061e4:	4603      	mov	r3, r0
 80061e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061e8:	7ffb      	ldrb	r3, [r7, #31]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 80a9 	bne.w	8006342 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	61b9      	str	r1, [r7, #24]
 80061fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006200:	4413      	add	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <put_fat+0xa4>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	b25a      	sxtb	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	b25b      	sxtb	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b25b      	sxtb	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e001      	b.n	800622e <put_fat+0xa8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	0a5b      	lsrs	r3, r3, #9
 8006240:	4413      	add	r3, r2
 8006242:	4619      	mov	r1, r3
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fe3b 	bl	8005ec0 <move_window>
 800624a:	4603      	mov	r3, r0
 800624c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d178      	bne.n	8006346 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	4413      	add	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <put_fat+0xf0>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	b2db      	uxtb	r3, r3
 8006274:	e00e      	b.n	8006294 <put_fat+0x10e>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f023 030f 	bic.w	r3, r3, #15
 8006280:	b25a      	sxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	b25b      	sxtb	r3, r3
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	b25b      	sxtb	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b25b      	sxtb	r3, r3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	70da      	strb	r2, [r3, #3]
			break;
 800629e:	e057      	b.n	8006350 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	4413      	add	r3, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fe07 	bl	8005ec0 <move_window>
 80062b2:	4603      	mov	r3, r0
 80062b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062b6:	7ffb      	ldrb	r3, [r7, #31]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d146      	bne.n	800634a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80062ca:	4413      	add	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	b292      	uxth	r2, r2
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fb4d 	bl	8005972 <st_word>
			fs->wflag = 1;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	70da      	strb	r2, [r3, #3]
			break;
 80062de:	e037      	b.n	8006350 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	4413      	add	r3, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff fde7 	bl	8005ec0 <move_window>
 80062f2:	4603      	mov	r3, r0
 80062f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d128      	bne.n	800634e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006310:	4413      	add	r3, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fb0a 	bl	800592c <ld_dword>
 8006318:	4603      	mov	r3, r0
 800631a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800631e:	4323      	orrs	r3, r4
 8006320:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006330:	4413      	add	r3, r2
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fb37 	bl	80059a8 <st_dword>
			fs->wflag = 1;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	70da      	strb	r2, [r3, #3]
			break;
 8006340:	e006      	b.n	8006350 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006342:	bf00      	nop
 8006344:	e004      	b.n	8006350 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006346:	bf00      	nop
 8006348:	e002      	b.n	8006350 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800634a:	bf00      	nop
 800634c:	e000      	b.n	8006350 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800634e:	bf00      	nop
		}
	}
	return res;
 8006350:	7ffb      	ldrb	r3, [r7, #31]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3724      	adds	r7, #36	; 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd90      	pop	{r4, r7, pc}

0800635a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b088      	sub	sp, #32
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d904      	bls.n	8006380 <remove_chain+0x26>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	d301      	bcc.n	8006384 <remove_chain+0x2a>
 8006380:	2302      	movs	r3, #2
 8006382:	e04b      	b.n	800641c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800638a:	f04f 32ff 	mov.w	r2, #4294967295
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	69b8      	ldr	r0, [r7, #24]
 8006392:	f7ff fef8 	bl	8006186 <put_fat>
 8006396:	4603      	mov	r3, r0
 8006398:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800639a:	7ffb      	ldrb	r3, [r7, #31]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <remove_chain+0x4a>
 80063a0:	7ffb      	ldrb	r3, [r7, #31]
 80063a2:	e03b      	b.n	800641c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff fe45 	bl	8006036 <get_fat>
 80063ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d031      	beq.n	8006418 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <remove_chain+0x64>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e02e      	b.n	800641c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d101      	bne.n	80063ca <remove_chain+0x70>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e028      	b.n	800641c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063ca:	2200      	movs	r2, #0
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	69b8      	ldr	r0, [r7, #24]
 80063d0:	f7ff fed9 	bl	8006186 <put_fat>
 80063d4:	4603      	mov	r3, r0
 80063d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063d8:	7ffb      	ldrb	r3, [r7, #31]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <remove_chain+0x88>
 80063de:	7ffb      	ldrb	r3, [r7, #31]
 80063e0:	e01c      	b.n	800641c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	3b02      	subs	r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d20b      	bcs.n	8006408 <remove_chain+0xae>
			fs->free_clst++;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	d3c6      	bcc.n	80063a4 <remove_chain+0x4a>
 8006416:	e000      	b.n	800641a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006418:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10d      	bne.n	8006456 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <create_chain+0x2c>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	429a      	cmp	r2, r3
 800644e:	d31b      	bcc.n	8006488 <create_chain+0x64>
 8006450:	2301      	movs	r3, #1
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e018      	b.n	8006488 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fdec 	bl	8006036 <get_fat>
 800645e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d801      	bhi.n	800646a <create_chain+0x46>
 8006466:	2301      	movs	r3, #1
 8006468:	e070      	b.n	800654c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d101      	bne.n	8006476 <create_chain+0x52>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e06a      	b.n	800654c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	429a      	cmp	r2, r3
 800647e:	d201      	bcs.n	8006484 <create_chain+0x60>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	e063      	b.n	800654c <create_chain+0x128>
		scl = clst;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	429a      	cmp	r2, r3
 800649a:	d307      	bcc.n	80064ac <create_chain+0x88>
				ncl = 2;
 800649c:	2302      	movs	r3, #2
 800649e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d901      	bls.n	80064ac <create_chain+0x88>
 80064a8:	2300      	movs	r3, #0
 80064aa:	e04f      	b.n	800654c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80064ac:	69f9      	ldr	r1, [r7, #28]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fdc1 	bl	8006036 <get_fat>
 80064b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00e      	beq.n	80064da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d003      	beq.n	80064ca <create_chain+0xa6>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d101      	bne.n	80064ce <create_chain+0xaa>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	e03e      	b.n	800654c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d1da      	bne.n	800648c <create_chain+0x68>
 80064d6:	2300      	movs	r3, #0
 80064d8:	e038      	b.n	800654c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295
 80064e0:	69f9      	ldr	r1, [r7, #28]
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7ff fe4f 	bl	8006186 <put_fat>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <create_chain+0xe2>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6938      	ldr	r0, [r7, #16]
 80064fe:	f7ff fe42 	bl	8006186 <put_fat>
 8006502:	4603      	mov	r3, r0
 8006504:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d116      	bne.n	800653a <create_chain+0x116>
		fs->last_clst = ncl;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	695a      	ldr	r2, [r3, #20]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	3b02      	subs	r3, #2
 800651c:	429a      	cmp	r2, r3
 800651e:	d804      	bhi.n	800652a <create_chain+0x106>
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	1e5a      	subs	r2, r3, #1
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	f043 0301 	orr.w	r3, r3, #1
 8006532:	b2da      	uxtb	r2, r3
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	711a      	strb	r2, [r3, #4]
 8006538:	e007      	b.n	800654a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <create_chain+0x122>
 8006540:	f04f 33ff 	mov.w	r3, #4294967295
 8006544:	e000      	b.n	8006548 <create_chain+0x124>
 8006546:	2301      	movs	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800654a:	69fb      	ldr	r3, [r7, #28]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	3304      	adds	r3, #4
 800656a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	0a5b      	lsrs	r3, r3, #9
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	8952      	ldrh	r2, [r2, #10]
 8006574:	fbb3 f3f2 	udiv	r3, r3, r2
 8006578:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	613a      	str	r2, [r7, #16]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <clmt_clust+0x3a>
 800658a:	2300      	movs	r3, #0
 800658c:	e010      	b.n	80065b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	d307      	bcc.n	80065a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3304      	adds	r3, #4
 80065a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065a4:	e7e9      	b.n	800657a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80065a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	4413      	add	r3, r2
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065d2:	d204      	bcs.n	80065de <dir_sdi+0x22>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065de:	2302      	movs	r3, #2
 80065e0:	e063      	b.n	80066aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <dir_sdi+0x46>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d902      	bls.n	8006602 <dir_sdi+0x46>
		clst = fs->dirbase;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10c      	bne.n	8006622 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	8912      	ldrh	r2, [r2, #8]
 8006610:	4293      	cmp	r3, r2
 8006612:	d301      	bcc.n	8006618 <dir_sdi+0x5c>
 8006614:	2302      	movs	r3, #2
 8006616:	e048      	b.n	80066aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	61da      	str	r2, [r3, #28]
 8006620:	e029      	b.n	8006676 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	895b      	ldrh	r3, [r3, #10]
 8006626:	025b      	lsls	r3, r3, #9
 8006628:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800662a:	e019      	b.n	8006660 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6979      	ldr	r1, [r7, #20]
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fd00 	bl	8006036 <get_fat>
 8006636:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d101      	bne.n	8006644 <dir_sdi+0x88>
 8006640:	2301      	movs	r3, #1
 8006642:	e032      	b.n	80066aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d904      	bls.n	8006654 <dir_sdi+0x98>
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	429a      	cmp	r2, r3
 8006652:	d301      	bcc.n	8006658 <dir_sdi+0x9c>
 8006654:	2302      	movs	r3, #2
 8006656:	e028      	b.n	80066aa <dir_sdi+0xee>
			ofs -= csz;
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	429a      	cmp	r2, r3
 8006666:	d2e1      	bcs.n	800662c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006668:	6979      	ldr	r1, [r7, #20]
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f7ff fcc4 	bl	8005ff8 <clust2sect>
 8006670:	4602      	mov	r2, r0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <dir_sdi+0xcc>
 8006684:	2302      	movs	r3, #2
 8006686:	e010      	b.n	80066aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	0a5b      	lsrs	r3, r3, #9
 8006690:	441a      	add	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	441a      	add	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	3320      	adds	r3, #32
 80066c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <dir_next+0x28>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d8:	d301      	bcc.n	80066de <dir_next+0x2c>
 80066da:	2304      	movs	r3, #4
 80066dc:	e0aa      	b.n	8006834 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f040 8098 	bne.w	800681a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	8912      	ldrh	r2, [r2, #8]
 8006704:	4293      	cmp	r3, r2
 8006706:	f0c0 8088 	bcc.w	800681a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	61da      	str	r2, [r3, #28]
 8006710:	2304      	movs	r3, #4
 8006712:	e08f      	b.n	8006834 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	0a5b      	lsrs	r3, r3, #9
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	8952      	ldrh	r2, [r2, #10]
 800671c:	3a01      	subs	r2, #1
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d17a      	bne.n	800681a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7ff fc82 	bl	8006036 <get_fat>
 8006732:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d801      	bhi.n	800673e <dir_next+0x8c>
 800673a:	2302      	movs	r3, #2
 800673c:	e07a      	b.n	8006834 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d101      	bne.n	800674a <dir_next+0x98>
 8006746:	2301      	movs	r3, #1
 8006748:	e074      	b.n	8006834 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	429a      	cmp	r2, r3
 8006752:	d358      	bcc.n	8006806 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d104      	bne.n	8006764 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	61da      	str	r2, [r3, #28]
 8006760:	2304      	movs	r3, #4
 8006762:	e067      	b.n	8006834 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7ff fe59 	bl	8006424 <create_chain>
 8006772:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <dir_next+0xcc>
 800677a:	2307      	movs	r3, #7
 800677c:	e05a      	b.n	8006834 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <dir_next+0xd6>
 8006784:	2302      	movs	r3, #2
 8006786:	e055      	b.n	8006834 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d101      	bne.n	8006794 <dir_next+0xe2>
 8006790:	2301      	movs	r3, #1
 8006792:	e04f      	b.n	8006834 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff fb4f 	bl	8005e38 <sync_window>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <dir_next+0xf2>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e047      	b.n	8006834 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3334      	adds	r3, #52	; 0x34
 80067a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff f947 	bl	8005a42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f7ff fc1c 	bl	8005ff8 <clust2sect>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
 80067c6:	e012      	b.n	80067ee <dir_next+0x13c>
						fs->wflag = 1;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff fb32 	bl	8005e38 <sync_window>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <dir_next+0x12c>
 80067da:	2301      	movs	r3, #1
 80067dc:	e02a      	b.n	8006834 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3301      	adds	r3, #1
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	895b      	ldrh	r3, [r3, #10]
 80067f2:	461a      	mov	r2, r3
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d3e6      	bcc.n	80067c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fbf2 	bl	8005ff8 <clust2sect>
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682c:	441a      	add	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff feb4 	bl	80065bc <dir_sdi>
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12b      	bne.n	80068b6 <dir_alloc+0x7a>
		n = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	4619      	mov	r1, r3
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff fb29 	bl	8005ec0 <move_window>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d11d      	bne.n	80068b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2be5      	cmp	r3, #229	; 0xe5
 8006880:	d004      	beq.n	800688c <dir_alloc+0x50>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d107      	bne.n	800689c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3301      	adds	r3, #1
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d102      	bne.n	80068a0 <dir_alloc+0x64>
 800689a:	e00c      	b.n	80068b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068a0:	2101      	movs	r1, #1
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff ff05 	bl	80066b2 <dir_next>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0d7      	beq.n	8006862 <dir_alloc+0x26>
 80068b2:	e000      	b.n	80068b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d101      	bne.n	80068c0 <dir_alloc+0x84>
 80068bc:	2307      	movs	r3, #7
 80068be:	75fb      	strb	r3, [r7, #23]
	return res;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	331a      	adds	r3, #26
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f80f 	bl	80058fc <ld_word>
 80068de:	4603      	mov	r3, r0
 80068e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d109      	bne.n	80068fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff f804 	bl	80058fc <ld_word>
 80068f4:	4603      	mov	r3, r0
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068fe:	68fb      	ldr	r3, [r7, #12]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	331a      	adds	r3, #26
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	b292      	uxth	r2, r2
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff f827 	bl	8005972 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d109      	bne.n	8006940 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f103 0214 	add.w	r2, r3, #20
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	b29b      	uxth	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7ff f819 	bl	8005972 <st_word>
	}
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006952:	2304      	movs	r3, #4
 8006954:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800695c:	e03c      	b.n	80069d8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	4619      	mov	r1, r3
 8006964:	6938      	ldr	r0, [r7, #16]
 8006966:	f7ff faab 	bl	8005ec0 <move_window>
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d136      	bne.n	80069e2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006982:	2304      	movs	r3, #4
 8006984:	75fb      	strb	r3, [r7, #23]
 8006986:	e031      	b.n	80069ec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	330b      	adds	r3, #11
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006994:	73bb      	strb	r3, [r7, #14]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7bba      	ldrb	r2, [r7, #14]
 800699a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	2be5      	cmp	r3, #229	; 0xe5
 80069a0:	d011      	beq.n	80069c6 <dir_read+0x7e>
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b2e      	cmp	r3, #46	; 0x2e
 80069a6:	d00e      	beq.n	80069c6 <dir_read+0x7e>
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	2b0f      	cmp	r3, #15
 80069ac:	d00b      	beq.n	80069c6 <dir_read+0x7e>
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	f023 0320 	bic.w	r3, r3, #32
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00f      	beq.n	80069e6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff fe72 	bl	80066b2 <dir_next>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d108      	bne.n	80069ea <dir_read+0xa2>
	while (dp->sect) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1be      	bne.n	800695e <dir_read+0x16>
 80069e0:	e004      	b.n	80069ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <dir_read+0xa4>
				break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80069ea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <dir_read+0xb0>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	61da      	str	r2, [r3, #28]
	return res;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a10:	2100      	movs	r1, #0
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff fdd2 	bl	80065bc <dir_sdi>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <dir_find+0x24>
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	e03e      	b.n	8006aa4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6938      	ldr	r0, [r7, #16]
 8006a2e:	f7ff fa47 	bl	8005ec0 <move_window>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d12f      	bne.n	8006a9c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <dir_find+0x4e>
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	75fb      	strb	r3, [r7, #23]
 8006a4e:	e028      	b.n	8006aa2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	330b      	adds	r3, #11
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	330b      	adds	r3, #11
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <dir_find+0x86>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a18      	ldr	r0, [r3, #32]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3324      	adds	r3, #36	; 0x24
 8006a7a:	220b      	movs	r2, #11
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f7fe fffb 	bl	8005a78 <mem_cmp>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a88:	2100      	movs	r1, #0
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fe11 	bl	80066b2 <dir_next>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0c5      	beq.n	8006a26 <dir_find+0x24>
 8006a9a:	e002      	b.n	8006aa2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006a9c:	bf00      	nop
 8006a9e:	e000      	b.n	8006aa2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006aa0:	bf00      	nop

	return res;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006aba:	2101      	movs	r1, #1
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff febd 	bl	800683c <dir_alloc>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11c      	bne.n	8006b06 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	68b8      	ldr	r0, [r7, #8]
 8006ad4:	f7ff f9f4 	bl	8005ec0 <move_window>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d111      	bne.n	8006b06 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe ffa9 	bl	8005a42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a18      	ldr	r0, [r3, #32]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	220b      	movs	r2, #11
 8006afa:	4619      	mov	r1, r3
 8006afc:	f7fe ff80 	bl	8005a00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2201      	movs	r2, #1
 8006b04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff f9cb 	bl	8005ec0 <move_window>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	22e5      	movs	r2, #229	; 0xe5
 8006b3a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006b42:	7afb      	ldrb	r3, [r7, #11]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d04e      	beq.n	8006c02 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006b6c:	e021      	b.n	8006bb2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1a      	ldr	r2, [r3, #32]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	6179      	str	r1, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d100      	bne.n	8006b86 <get_fileinfo+0x3a>
 8006b84:	e015      	b.n	8006bb2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b05      	cmp	r3, #5
 8006b8a:	d101      	bne.n	8006b90 <get_fileinfo+0x44>
 8006b8c:	23e5      	movs	r3, #229	; 0xe5
 8006b8e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d106      	bne.n	8006ba4 <get_fileinfo+0x58>
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	613a      	str	r2, [r7, #16]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	222e      	movs	r2, #46	; 0x2e
 8006ba2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	613a      	str	r2, [r7, #16]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4413      	add	r3, r2
 8006bae:	7bfa      	ldrb	r2, [r7, #15]
 8006bb0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b0a      	cmp	r3, #10
 8006bb6:	d9da      	bls.n	8006b6e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3309      	adds	r3, #9
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	7ada      	ldrb	r2, [r3, #11]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	331c      	adds	r3, #28
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe fea9 	bl	800592c <ld_dword>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	3316      	adds	r3, #22
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fea0 	bl	800592c <ld_dword>
 8006bec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	80da      	strh	r2, [r3, #6]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	809a      	strh	r2, [r3, #4]
 8006c00:	e000      	b.n	8006c04 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c02:	bf00      	nop
}
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c22:	220b      	movs	r2, #11
 8006c24:	2120      	movs	r1, #32
 8006c26:	68b8      	ldr	r0, [r7, #8]
 8006c28:	f7fe ff0b 	bl	8005a42 <mem_set>
	si = i = 0; ni = 8;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	2308      	movs	r3, #8
 8006c36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	61fa      	str	r2, [r7, #28]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c46:	7efb      	ldrb	r3, [r7, #27]
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d94e      	bls.n	8006cea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c4c:	7efb      	ldrb	r3, [r7, #27]
 8006c4e:	2b2f      	cmp	r3, #47	; 0x2f
 8006c50:	d006      	beq.n	8006c60 <create_name+0x54>
 8006c52:	7efb      	ldrb	r3, [r7, #27]
 8006c54:	2b5c      	cmp	r3, #92	; 0x5c
 8006c56:	d110      	bne.n	8006c7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c58:	e002      	b.n	8006c60 <create_name+0x54>
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b2f      	cmp	r3, #47	; 0x2f
 8006c6a:	d0f6      	beq.n	8006c5a <create_name+0x4e>
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b5c      	cmp	r3, #92	; 0x5c
 8006c76:	d0f0      	beq.n	8006c5a <create_name+0x4e>
			break;
 8006c78:	e038      	b.n	8006cec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006c7a:	7efb      	ldrb	r3, [r7, #27]
 8006c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7e:	d003      	beq.n	8006c88 <create_name+0x7c>
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d30c      	bcc.n	8006ca2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b0b      	cmp	r3, #11
 8006c8c:	d002      	beq.n	8006c94 <create_name+0x88>
 8006c8e:	7efb      	ldrb	r3, [r7, #27]
 8006c90:	2b2e      	cmp	r3, #46	; 0x2e
 8006c92:	d001      	beq.n	8006c98 <create_name+0x8c>
 8006c94:	2306      	movs	r3, #6
 8006c96:	e044      	b.n	8006d22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006c98:	2308      	movs	r3, #8
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	230b      	movs	r3, #11
 8006c9e:	617b      	str	r3, [r7, #20]
			continue;
 8006ca0:	e022      	b.n	8006ce8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ca2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da04      	bge.n	8006cb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006caa:	7efb      	ldrb	r3, [r7, #27]
 8006cac:	3b80      	subs	r3, #128	; 0x80
 8006cae:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <create_name+0x120>)
 8006cb0:	5cd3      	ldrb	r3, [r2, r3]
 8006cb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006cb4:	7efb      	ldrb	r3, [r7, #27]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	481d      	ldr	r0, [pc, #116]	; (8006d30 <create_name+0x124>)
 8006cba:	f7fe ff04 	bl	8005ac6 <chk_chr>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <create_name+0xbc>
 8006cc4:	2306      	movs	r3, #6
 8006cc6:	e02c      	b.n	8006d22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006cc8:	7efb      	ldrb	r3, [r7, #27]
 8006cca:	2b60      	cmp	r3, #96	; 0x60
 8006ccc:	d905      	bls.n	8006cda <create_name+0xce>
 8006cce:	7efb      	ldrb	r3, [r7, #27]
 8006cd0:	2b7a      	cmp	r3, #122	; 0x7a
 8006cd2:	d802      	bhi.n	8006cda <create_name+0xce>
 8006cd4:	7efb      	ldrb	r3, [r7, #27]
 8006cd6:	3b20      	subs	r3, #32
 8006cd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	613a      	str	r2, [r7, #16]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	7efa      	ldrb	r2, [r7, #27]
 8006ce6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006ce8:	e7a6      	b.n	8006c38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006cea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <create_name+0xf4>
 8006cfc:	2306      	movs	r3, #6
 8006cfe:	e010      	b.n	8006d22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2be5      	cmp	r3, #229	; 0xe5
 8006d06:	d102      	bne.n	8006d0e <create_name+0x102>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d0e:	7efb      	ldrb	r3, [r7, #27]
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d801      	bhi.n	8006d18 <create_name+0x10c>
 8006d14:	2204      	movs	r2, #4
 8006d16:	e000      	b.n	8006d1a <create_name+0x10e>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	330b      	adds	r3, #11
 8006d1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	0800b7d0 	.word	0x0800b7d0
 8006d30:	0800b76c 	.word	0x0800b76c

08006d34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d48:	e002      	b.n	8006d50 <follow_path+0x1c>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b2f      	cmp	r3, #47	; 0x2f
 8006d56:	d0f8      	beq.n	8006d4a <follow_path+0x16>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006d5e:	d0f4      	beq.n	8006d4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2200      	movs	r2, #0
 8006d64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b1f      	cmp	r3, #31
 8006d6c:	d80a      	bhi.n	8006d84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d76:	2100      	movs	r1, #0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fc1f 	bl	80065bc <dir_sdi>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e043      	b.n	8006e0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d84:	463b      	mov	r3, r7
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff3f 	bl	8006c0c <create_name>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d134      	bne.n	8006e02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff fe32 	bl	8006a02 <dir_find>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006da8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d127      	bne.n	8006e06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006db6:	7afb      	ldrb	r3, [r7, #11]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d122      	bne.n	8006e06 <follow_path+0xd2>
 8006dc0:	2305      	movs	r3, #5
 8006dc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006dc4:	e01f      	b.n	8006e06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d11c      	bne.n	8006e0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	799b      	ldrb	r3, [r3, #6]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006ddc:	2305      	movs	r3, #5
 8006dde:	75fb      	strb	r3, [r7, #23]
 8006de0:	e014      	b.n	8006e0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df0:	4413      	add	r3, r2
 8006df2:	4619      	mov	r1, r3
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff fd68 	bl	80068ca <ld_clust>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e00:	e7c0      	b.n	8006d84 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e02:	bf00      	nop
 8006e04:	e002      	b.n	8006e0c <follow_path+0xd8>
				break;
 8006e06:	bf00      	nop
 8006e08:	e000      	b.n	8006e0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e0a:	bf00      	nop
			}
		}
	}

	return res;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d031      	beq.n	8006e90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e002      	b.n	8006e3a <get_ldnumber+0x24>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3301      	adds	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d903      	bls.n	8006e4a <get_ldnumber+0x34>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b3a      	cmp	r3, #58	; 0x3a
 8006e48:	d1f4      	bne.n	8006e34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b3a      	cmp	r3, #58	; 0x3a
 8006e50:	d11c      	bne.n	8006e8c <get_ldnumber+0x76>
			tp = *path;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	60fa      	str	r2, [r7, #12]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	3b30      	subs	r3, #48	; 0x30
 8006e62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b09      	cmp	r3, #9
 8006e68:	d80e      	bhi.n	8006e88 <get_ldnumber+0x72>
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d10a      	bne.n	8006e88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d107      	bne.n	8006e88 <get_ldnumber+0x72>
					vol = (int)i;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	e002      	b.n	8006e92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e90:	693b      	ldr	r3, [r7, #16]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	70da      	strb	r2, [r3, #3]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff f800 	bl	8005ec0 <move_window>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <check_fs+0x2a>
 8006ec6:	2304      	movs	r3, #4
 8006ec8:	e038      	b.n	8006f3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3334      	adds	r3, #52	; 0x34
 8006ece:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fd12 	bl	80058fc <ld_word>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <check_fs+0x48>
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e029      	b.n	8006f3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006eee:	2be9      	cmp	r3, #233	; 0xe9
 8006ef0:	d009      	beq.n	8006f06 <check_fs+0x66>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ef8:	2beb      	cmp	r3, #235	; 0xeb
 8006efa:	d11e      	bne.n	8006f3a <check_fs+0x9a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f02:	2b90      	cmp	r3, #144	; 0x90
 8006f04:	d119      	bne.n	8006f3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3334      	adds	r3, #52	; 0x34
 8006f0a:	3336      	adds	r3, #54	; 0x36
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fd0d 	bl	800592c <ld_dword>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f18:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <check_fs+0xa4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d101      	bne.n	8006f22 <check_fs+0x82>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e00c      	b.n	8006f3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3334      	adds	r3, #52	; 0x34
 8006f26:	3352      	adds	r3, #82	; 0x52
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fcff 	bl	800592c <ld_dword>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4a05      	ldr	r2, [pc, #20]	; (8006f48 <check_fs+0xa8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d101      	bne.n	8006f3a <check_fs+0x9a>
 8006f36:	2300      	movs	r3, #0
 8006f38:	e000      	b.n	8006f3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f3a:	2302      	movs	r3, #2
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	00544146 	.word	0x00544146
 8006f48:	33544146 	.word	0x33544146

08006f4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b096      	sub	sp, #88	; 0x58
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff ff58 	bl	8006e16 <get_ldnumber>
 8006f66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da01      	bge.n	8006f72 <find_volume+0x26>
 8006f6e:	230b      	movs	r3, #11
 8006f70:	e235      	b.n	80073de <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f72:	4aa5      	ldr	r2, [pc, #660]	; (8007208 <find_volume+0x2bc>)
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <find_volume+0x3a>
 8006f82:	230c      	movs	r3, #12
 8006f84:	e22b      	b.n	80073de <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8006f86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f88:	f7fe fdb8 	bl	8005afc <lock_fs>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <find_volume+0x4a>
 8006f92:	230f      	movs	r3, #15
 8006f94:	e223      	b.n	80073de <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01a      	beq.n	8006fe2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe fc03 	bl	80057bc <disk_status>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10c      	bne.n	8006fe2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <find_volume+0x92>
 8006fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006fda:	230a      	movs	r3, #10
 8006fdc:	e1ff      	b.n	80073de <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e1fd      	b.n	80073de <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fbfb 	bl	80057f0 <disk_initialize>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800700c:	2303      	movs	r3, #3
 800700e:	e1e6      	b.n	80073de <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <find_volume+0xda>
 8007016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007022:	230a      	movs	r3, #10
 8007024:	e1db      	b.n	80073de <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800702a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800702c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800702e:	f7ff ff37 	bl	8006ea0 <check_fs>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800703c:	2b02      	cmp	r3, #2
 800703e:	d149      	bne.n	80070d4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007040:	2300      	movs	r3, #0
 8007042:	643b      	str	r3, [r7, #64]	; 0x40
 8007044:	e01e      	b.n	8007084 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800704c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007054:	4413      	add	r3, r2
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	3304      	adds	r3, #4
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d006      	beq.n	8007070 <find_volume+0x124>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	3308      	adds	r3, #8
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fc60 	bl	800592c <ld_dword>
 800706c:	4602      	mov	r2, r0
 800706e:	e000      	b.n	8007072 <find_volume+0x126>
 8007070:	2200      	movs	r2, #0
 8007072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3358      	adds	r3, #88	; 0x58
 8007078:	443b      	add	r3, r7
 800707a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	3301      	adds	r3, #1
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
 8007084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007086:	2b03      	cmp	r3, #3
 8007088:	d9dd      	bls.n	8007046 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800708a:	2300      	movs	r3, #0
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800708e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <find_volume+0x14e>
 8007094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007096:	3b01      	subs	r3, #1
 8007098:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800709a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3358      	adds	r3, #88	; 0x58
 80070a0:	443b      	add	r3, r7
 80070a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <find_volume+0x16e>
 80070ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070b2:	f7ff fef5 	bl	8006ea0 <check_fs>
 80070b6:	4603      	mov	r3, r0
 80070b8:	e000      	b.n	80070bc <find_volume+0x170>
 80070ba:	2303      	movs	r3, #3
 80070bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d905      	bls.n	80070d4 <find_volume+0x188>
 80070c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ca:	3301      	adds	r3, #1
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40
 80070ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d9e2      	bls.n	800709a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d101      	bne.n	80070e0 <find_volume+0x194>
 80070dc:	2301      	movs	r3, #1
 80070de:	e17e      	b.n	80073de <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d901      	bls.n	80070ec <find_volume+0x1a0>
 80070e8:	230d      	movs	r3, #13
 80070ea:	e178      	b.n	80073de <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	3334      	adds	r3, #52	; 0x34
 80070f0:	330b      	adds	r3, #11
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fc02 	bl	80058fc <ld_word>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fe:	d001      	beq.n	8007104 <find_volume+0x1b8>
 8007100:	230d      	movs	r3, #13
 8007102:	e16c      	b.n	80073de <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	3334      	adds	r3, #52	; 0x34
 8007108:	3316      	adds	r3, #22
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fbf6 	bl	80058fc <ld_word>
 8007110:	4603      	mov	r3, r0
 8007112:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <find_volume+0x1dc>
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	3334      	adds	r3, #52	; 0x34
 800711e:	3324      	adds	r3, #36	; 0x24
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe fc03 	bl	800592c <ld_dword>
 8007126:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800712c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	789b      	ldrb	r3, [r3, #2]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d005      	beq.n	800714c <find_volume+0x200>
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	789b      	ldrb	r3, [r3, #2]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d001      	beq.n	800714c <find_volume+0x200>
 8007148:	230d      	movs	r3, #13
 800714a:	e148      	b.n	80073de <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	789b      	ldrb	r3, [r3, #2]
 8007150:	461a      	mov	r2, r3
 8007152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007154:	fb02 f303 	mul.w	r3, r2, r3
 8007158:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007160:	b29a      	uxth	r2, r3
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	895b      	ldrh	r3, [r3, #10]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <find_volume+0x234>
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	895b      	ldrh	r3, [r3, #10]
 8007172:	461a      	mov	r2, r3
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	895b      	ldrh	r3, [r3, #10]
 8007178:	3b01      	subs	r3, #1
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <find_volume+0x238>
 8007180:	230d      	movs	r3, #13
 8007182:	e12c      	b.n	80073de <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	3334      	adds	r3, #52	; 0x34
 8007188:	3311      	adds	r3, #17
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fbb6 	bl	80058fc <ld_word>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	891b      	ldrh	r3, [r3, #8]
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <find_volume+0x25e>
 80071a6:	230d      	movs	r3, #13
 80071a8:	e119      	b.n	80073de <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	3334      	adds	r3, #52	; 0x34
 80071ae:	3313      	adds	r3, #19
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fba3 	bl	80058fc <ld_word>
 80071b6:	4603      	mov	r3, r0
 80071b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <find_volume+0x282>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	3334      	adds	r3, #52	; 0x34
 80071c4:	3320      	adds	r3, #32
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fbb0 	bl	800592c <ld_dword>
 80071cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	3334      	adds	r3, #52	; 0x34
 80071d2:	330e      	adds	r3, #14
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fb91 	bl	80058fc <ld_word>
 80071da:	4603      	mov	r3, r0
 80071dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <find_volume+0x29c>
 80071e4:	230d      	movs	r3, #13
 80071e6:	e0fa      	b.n	80073de <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80071e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ec:	4413      	add	r3, r2
 80071ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f0:	8912      	ldrh	r2, [r2, #8]
 80071f2:	0912      	lsrs	r2, r2, #4
 80071f4:	b292      	uxth	r2, r2
 80071f6:	4413      	add	r3, r2
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80071fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	429a      	cmp	r2, r3
 8007200:	d204      	bcs.n	800720c <find_volume+0x2c0>
 8007202:	230d      	movs	r3, #13
 8007204:	e0eb      	b.n	80073de <find_volume+0x492>
 8007206:	bf00      	nop
 8007208:	20000970 	.word	0x20000970
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800720c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007214:	8952      	ldrh	r2, [r2, #10]
 8007216:	fbb3 f3f2 	udiv	r3, r3, r2
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <find_volume+0x2da>
 8007222:	230d      	movs	r3, #13
 8007224:	e0db      	b.n	80073de <find_volume+0x492>
		fmt = FS_FAT32;
 8007226:	2303      	movs	r3, #3
 8007228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007232:	4293      	cmp	r3, r2
 8007234:	d802      	bhi.n	800723c <find_volume+0x2f0>
 8007236:	2302      	movs	r3, #2
 8007238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007242:	4293      	cmp	r3, r2
 8007244:	d802      	bhi.n	800724c <find_volume+0x300>
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007258:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800725a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800725c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725e:	441a      	add	r2, r3
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	441a      	add	r2, r3
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800726e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007272:	2b03      	cmp	r3, #3
 8007274:	d11e      	bne.n	80072b4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	3334      	adds	r3, #52	; 0x34
 800727a:	332a      	adds	r3, #42	; 0x2a
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe fb3d 	bl	80058fc <ld_word>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <find_volume+0x340>
 8007288:	230d      	movs	r3, #13
 800728a:	e0a8      	b.n	80073de <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	891b      	ldrh	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <find_volume+0x34c>
 8007294:	230d      	movs	r3, #13
 8007296:	e0a2      	b.n	80073de <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	3334      	adds	r3, #52	; 0x34
 800729c:	332c      	adds	r3, #44	; 0x2c
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fb44 	bl	800592c <ld_dword>
 80072a4:	4602      	mov	r2, r0
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	647b      	str	r3, [r7, #68]	; 0x44
 80072b2:	e01f      	b.n	80072f4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	891b      	ldrh	r3, [r3, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <find_volume+0x374>
 80072bc:	230d      	movs	r3, #13
 80072be:	e08e      	b.n	80073de <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c6:	441a      	add	r2, r3
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d103      	bne.n	80072dc <find_volume+0x390>
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	e00a      	b.n	80072f2 <find_volume+0x3a6>
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	4613      	mov	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	085a      	lsrs	r2, r3, #1
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80072fe:	0a5b      	lsrs	r3, r3, #9
 8007300:	429a      	cmp	r2, r3
 8007302:	d201      	bcs.n	8007308 <find_volume+0x3bc>
 8007304:	230d      	movs	r3, #13
 8007306:	e06a      	b.n	80073de <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	615a      	str	r2, [r3, #20]
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	2280      	movs	r2, #128	; 0x80
 800731c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800731e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007322:	2b03      	cmp	r3, #3
 8007324:	d149      	bne.n	80073ba <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	3334      	adds	r3, #52	; 0x34
 800732a:	3330      	adds	r3, #48	; 0x30
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fae5 	bl	80058fc <ld_word>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d140      	bne.n	80073ba <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733a:	3301      	adds	r3, #1
 800733c:	4619      	mov	r1, r3
 800733e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007340:	f7fe fdbe 	bl	8005ec0 <move_window>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d137      	bne.n	80073ba <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2200      	movs	r2, #0
 800734e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	3334      	adds	r3, #52	; 0x34
 8007354:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007358:	4618      	mov	r0, r3
 800735a:	f7fe facf 	bl	80058fc <ld_word>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007366:	429a      	cmp	r2, r3
 8007368:	d127      	bne.n	80073ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	3334      	adds	r3, #52	; 0x34
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fadc 	bl	800592c <ld_dword>
 8007374:	4603      	mov	r3, r0
 8007376:	4a1c      	ldr	r2, [pc, #112]	; (80073e8 <find_volume+0x49c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d11e      	bne.n	80073ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	3334      	adds	r3, #52	; 0x34
 8007380:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fad1 	bl	800592c <ld_dword>
 800738a:	4603      	mov	r3, r0
 800738c:	4a17      	ldr	r2, [pc, #92]	; (80073ec <find_volume+0x4a0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d113      	bne.n	80073ba <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	3334      	adds	r3, #52	; 0x34
 8007396:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fac6 	bl	800592c <ld_dword>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	3334      	adds	r3, #52	; 0x34
 80073aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fabc 	bl	800592c <ld_dword>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <find_volume+0x4a4>)
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	3301      	adds	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <find_volume+0x4a4>)
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <find_volume+0x4a4>)
 80073d0:	881a      	ldrh	r2, [r3, #0]
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073d8:	f7fe fd0a 	bl	8005df0 <clear_lock>
#endif
	return FR_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3758      	adds	r7, #88	; 0x58
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	41615252 	.word	0x41615252
 80073ec:	61417272 	.word	0x61417272
 80073f0:	20000974 	.word	0x20000974

080073f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80073fe:	2309      	movs	r3, #9
 8007400:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d02e      	beq.n	8007466 <validate+0x72>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d02a      	beq.n	8007466 <validate+0x72>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d025      	beq.n	8007466 <validate+0x72>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	889a      	ldrh	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	88db      	ldrh	r3, [r3, #6]
 8007424:	429a      	cmp	r2, r3
 8007426:	d11e      	bne.n	8007466 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fb65 	bl	8005afc <lock_fs>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d014      	beq.n	8007462 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f9bc 	bl	80057bc <disk_status>
 8007444:	4603      	mov	r3, r0
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <validate+0x60>
				res = FR_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	e008      	b.n	8007466 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fb64 	bl	8005b28 <unlock_fs>
 8007460:	e001      	b.n	8007466 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007462:	230f      	movs	r3, #15
 8007464:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <validate+0x7e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	e000      	b.n	8007474 <validate+0x80>
 8007472:	2300      	movs	r3, #0
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	6013      	str	r3, [r2, #0]
	return res;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007496:	f107 0310 	add.w	r3, r7, #16
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fcbb 	bl	8006e16 <get_ldnumber>
 80074a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da01      	bge.n	80074ac <f_mount+0x28>
 80074a8:	230b      	movs	r3, #11
 80074aa:	e048      	b.n	800753e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074ac:	4a26      	ldr	r2, [pc, #152]	; (8007548 <f_mount+0xc4>)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00f      	beq.n	80074dc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074bc:	69b8      	ldr	r0, [r7, #24]
 80074be:	f7fe fc97 	bl	8005df0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 feb5 	bl	8008236 <ff_del_syncobj>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <f_mount+0x52>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e033      	b.n	800753e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00f      	beq.n	8007502 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	330c      	adds	r3, #12
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f000 fe7f 	bl	80081f6 <ff_cre_syncobj>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <f_mount+0x7e>
 80074fe:	2302      	movs	r3, #2
 8007500:	e01d      	b.n	800753e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4910      	ldr	r1, [pc, #64]	; (8007548 <f_mount+0xc4>)
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <f_mount+0x94>
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d001      	beq.n	800751c <f_mount+0x98>
 8007518:	2300      	movs	r3, #0
 800751a:	e010      	b.n	800753e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800751c:	f107 010c 	add.w	r1, r7, #12
 8007520:	f107 0308 	add.w	r3, r7, #8
 8007524:	2200      	movs	r2, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fd10 	bl	8006f4c <find_volume>
 800752c:	4603      	mov	r3, r0
 800752e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	7dfa      	ldrb	r2, [r7, #23]
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe faf6 	bl	8005b28 <unlock_fs>
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000970 	.word	0x20000970

0800754c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b098      	sub	sp, #96	; 0x60
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	4613      	mov	r3, r2
 8007558:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <f_open+0x18>
 8007560:	2309      	movs	r3, #9
 8007562:	e1b4      	b.n	80078ce <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800756a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800756c:	79fa      	ldrb	r2, [r7, #7]
 800756e:	f107 0110 	add.w	r1, r7, #16
 8007572:	f107 0308 	add.w	r3, r7, #8
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fce8 	bl	8006f4c <find_volume>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8191 	bne.w	80078ae <f_open+0x362>
		dj.obj.fs = fs;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fbcb 	bl	8006d34 <follow_path>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11a      	bne.n	80075e2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80075ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da03      	bge.n	80075be <f_open+0x72>
				res = FR_INVALID_NAME;
 80075b6:	2306      	movs	r3, #6
 80075b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075bc:	e011      	b.n	80075e2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	f107 0314 	add.w	r3, r7, #20
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fac2 	bl	8005b60 <chk_lock>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	f003 031c 	and.w	r3, r3, #28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d07f      	beq.n	80076ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80075ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d017      	beq.n	8007624 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80075f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d10e      	bne.n	800761a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075fc:	f7fe fb0c 	bl	8005c18 <enq_lock>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d006      	beq.n	8007614 <f_open+0xc8>
 8007606:	f107 0314 	add.w	r3, r7, #20
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff fa4e 	bl	8006aac <dir_register>
 8007610:	4603      	mov	r3, r0
 8007612:	e000      	b.n	8007616 <f_open+0xca>
 8007614:	2312      	movs	r3, #18
 8007616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	f043 0308 	orr.w	r3, r3, #8
 8007620:	71fb      	strb	r3, [r7, #7]
 8007622:	e010      	b.n	8007646 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007624:	7ebb      	ldrb	r3, [r7, #26]
 8007626:	f003 0311 	and.w	r3, r3, #17
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <f_open+0xea>
					res = FR_DENIED;
 800762e:	2307      	movs	r3, #7
 8007630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007634:	e007      	b.n	8007646 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <f_open+0xfa>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764a:	2b00      	cmp	r3, #0
 800764c:	d168      	bne.n	8007720 <f_open+0x1d4>
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d063      	beq.n	8007720 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007658:	f7fe f852 	bl	8005700 <get_fattime>
 800765c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800765e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007660:	330e      	adds	r3, #14
 8007662:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe f99f 	bl	80059a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	3316      	adds	r3, #22
 800766e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe f999 	bl	80059a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	330b      	adds	r3, #11
 800767a:	2220      	movs	r2, #32
 800767c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007682:	4611      	mov	r1, r2
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff f920 	bl	80068ca <ld_clust>
 800768a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007690:	2200      	movs	r2, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f938 	bl	8006908 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769a:	331c      	adds	r3, #28
 800769c:	2100      	movs	r1, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe f982 	bl	80059a8 <st_dword>
					fs->wflag = 1;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2201      	movs	r2, #1
 80076a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d037      	beq.n	8007720 <f_open+0x1d4>
						dw = fs->winsect;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80076b6:	f107 0314 	add.w	r3, r7, #20
 80076ba:	2200      	movs	r2, #0
 80076bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fe fe4b 	bl	800635a <remove_chain>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80076ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d126      	bne.n	8007720 <f_open+0x1d4>
							res = move_window(fs, dw);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fbf2 	bl	8005ec0 <move_window>
 80076dc:	4603      	mov	r3, r0
 80076de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076e6:	3a01      	subs	r2, #1
 80076e8:	611a      	str	r2, [r3, #16]
 80076ea:	e019      	b.n	8007720 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80076ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d115      	bne.n	8007720 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076f4:	7ebb      	ldrb	r3, [r7, #26]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <f_open+0x1ba>
					res = FR_NO_FILE;
 80076fe:	2304      	movs	r3, #4
 8007700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007704:	e00c      	b.n	8007720 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <f_open+0x1d4>
 8007710:	7ebb      	ldrb	r3, [r7, #26]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <f_open+0x1d4>
						res = FR_DENIED;
 800771a:	2307      	movs	r3, #7
 800771c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007724:	2b00      	cmp	r3, #0
 8007726:	d128      	bne.n	800777a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007738:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf14      	ite	ne
 8007752:	2301      	movne	r3, #1
 8007754:	2300      	moveq	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	f107 0314 	add.w	r3, r7, #20
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fa7b 	bl	8005c5c <inc_lock>
 8007766:	4602      	mov	r2, r0
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <f_open+0x22e>
 8007774:	2302      	movs	r3, #2
 8007776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800777a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 8095 	bne.w	80078ae <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007788:	4611      	mov	r1, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff f89d 	bl	80068ca <ld_clust>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007798:	331c      	adds	r3, #28
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe f8c6 	bl	800592c <ld_dword>
 80077a0:	4602      	mov	r2, r0
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	88da      	ldrh	r2, [r3, #6]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	79fa      	ldrb	r2, [r7, #7]
 80077be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3330      	adds	r3, #48	; 0x30
 80077d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077da:	2100      	movs	r1, #0
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe f930 	bl	8005a42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d060      	beq.n	80078ae <f_open+0x362>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d05c      	beq.n	80078ae <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	895b      	ldrh	r3, [r3, #10]
 8007800:	025b      	lsls	r3, r3, #9
 8007802:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	657b      	str	r3, [r7, #84]	; 0x54
 8007810:	e016      	b.n	8007840 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fc0d 	bl	8006036 <get_fat>
 800781c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800781e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007820:	2b01      	cmp	r3, #1
 8007822:	d802      	bhi.n	800782a <f_open+0x2de>
 8007824:	2302      	movs	r3, #2
 8007826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800782a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d102      	bne.n	8007838 <f_open+0x2ec>
 8007832:	2301      	movs	r3, #1
 8007834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
 8007840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007844:	2b00      	cmp	r3, #0
 8007846:	d103      	bne.n	8007850 <f_open+0x304>
 8007848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800784a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784c:	429a      	cmp	r2, r3
 800784e:	d8e0      	bhi.n	8007812 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007854:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800785a:	2b00      	cmp	r3, #0
 800785c:	d127      	bne.n	80078ae <f_open+0x362>
 800785e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007864:	2b00      	cmp	r3, #0
 8007866:	d022      	beq.n	80078ae <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fbc3 	bl	8005ff8 <clust2sect>
 8007872:	6478      	str	r0, [r7, #68]	; 0x44
 8007874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <f_open+0x336>
						res = FR_INT_ERR;
 800787a:	2302      	movs	r3, #2
 800787c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007880:	e015      	b.n	80078ae <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007884:	0a5a      	lsrs	r2, r3, #9
 8007886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007888:	441a      	add	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	7858      	ldrb	r0, [r3, #1]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	2301      	movs	r3, #1
 800789e:	f7fd ffcf 	bl	8005840 <disk_read>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <f_open+0x362>
 80078a8:	2301      	movs	r3, #1
 80078aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80078ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <f_open+0x370>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe f92f 	bl	8005b28 <unlock_fs>
 80078ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3760      	adds	r7, #96	; 0x60
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b08c      	sub	sp, #48	; 0x30
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f107 0210 	add.w	r2, r7, #16
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fd7c 	bl	80073f4 <validate>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <f_write+0x44>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	7d5b      	ldrb	r3, [r3, #21]
 800790e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <f_write+0x58>
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe f900 	bl	8005b28 <unlock_fs>
 8007928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800792c:	e173      	b.n	8007c16 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	7d1b      	ldrb	r3, [r3, #20]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <f_write+0x72>
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2107      	movs	r1, #7
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe f8f2 	bl	8005b28 <unlock_fs>
 8007944:	2307      	movs	r3, #7
 8007946:	e166      	b.n	8007c16 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	441a      	add	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	429a      	cmp	r2, r3
 8007956:	f080 814b 	bcs.w	8007bf0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	43db      	mvns	r3, r3
 8007960:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007962:	e145      	b.n	8007bf0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 8101 	bne.w	8007b74 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	0a5b      	lsrs	r3, r3, #9
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	8952      	ldrh	r2, [r2, #10]
 800797c:	3a01      	subs	r2, #1
 800797e:	4013      	ands	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d14d      	bne.n	8007a24 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10c      	bne.n	80079aa <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d11a      	bne.n	80079d2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fd3f 	bl	8006424 <create_chain>
 80079a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80079a8:	e013      	b.n	80079d2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	4619      	mov	r1, r3
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7fe fdcb 	bl	8006554 <clmt_clust>
 80079be:	62b8      	str	r0, [r7, #40]	; 0x28
 80079c0:	e007      	b.n	80079d2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f7fe fd2a 	bl	8006424 <create_chain>
 80079d0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8110 	beq.w	8007bfa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d109      	bne.n	80079f4 <f_write+0x11e>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2202      	movs	r2, #2
 80079e4:	755a      	strb	r2, [r3, #21]
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2102      	movs	r1, #2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe f89c 	bl	8005b28 <unlock_fs>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e110      	b.n	8007c16 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d109      	bne.n	8007a10 <f_write+0x13a>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	755a      	strb	r2, [r3, #21]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe f88e 	bl	8005b28 <unlock_fs>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e102      	b.n	8007c16 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a14:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <f_write+0x14e>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a22:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	7d1b      	ldrb	r3, [r3, #20]
 8007a28:	b25b      	sxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da1d      	bge.n	8007a6a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	7858      	ldrb	r0, [r3, #1]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a1a      	ldr	r2, [r3, #32]
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f7fd ff1f 	bl	8005880 <disk_write>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <f_write+0x186>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	755a      	strb	r2, [r3, #21]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2101      	movs	r1, #1
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe f868 	bl	8005b28 <unlock_fs>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0dc      	b.n	8007c16 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	7d1b      	ldrb	r3, [r3, #20]
 8007a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe fac0 	bl	8005ff8 <clust2sect>
 8007a78:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <f_write+0x1be>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2202      	movs	r2, #2
 8007a84:	755a      	strb	r2, [r3, #21]
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2102      	movs	r1, #2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe f84c 	bl	8005b28 <unlock_fs>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e0c0      	b.n	8007c16 <f_write+0x340>
			sect += csect;
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	0a5b      	lsrs	r3, r3, #9
 8007aa0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d041      	beq.n	8007b2c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	4413      	add	r3, r2
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	8952      	ldrh	r2, [r2, #10]
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d905      	bls.n	8007ac2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	895b      	ldrh	r3, [r3, #10]
 8007aba:	461a      	mov	r2, r3
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	7858      	ldrb	r0, [r3, #1]
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	69f9      	ldr	r1, [r7, #28]
 8007acc:	f7fd fed8 	bl	8005880 <disk_write>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <f_write+0x214>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	755a      	strb	r2, [r3, #21]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe f821 	bl	8005b28 <unlock_fs>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e095      	b.n	8007c16 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1a      	ldr	r2, [r3, #32]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d915      	bls.n	8007b24 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1a      	ldr	r2, [r3, #32]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	025b      	lsls	r3, r3, #9
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b10:	4619      	mov	r1, r3
 8007b12:	f7fd ff75 	bl	8005a00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	7d1b      	ldrb	r3, [r3, #20]
 8007b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	025b      	lsls	r3, r3, #9
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007b2a:	e044      	b.n	8007bb6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d01b      	beq.n	8007b6e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d215      	bcs.n	8007b6e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	7858      	ldrb	r0, [r3, #1]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	f7fd fe76 	bl	8005840 <disk_read>
 8007b54:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	755a      	strb	r2, [r3, #21]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fd ffdf 	bl	8005b28 <unlock_fs>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e053      	b.n	8007c16 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d901      	bls.n	8007b8e <f_write+0x2b8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9c:	4413      	add	r3, r2
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	69f9      	ldr	r1, [r7, #28]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fd ff2c 	bl	8005a00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
 8007bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	4413      	add	r3, r2
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	619a      	str	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	bf38      	it	cc
 8007bd6:	461a      	movcc	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	60da      	str	r2, [r3, #12]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	441a      	add	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f47f aeb6 	bne.w	8007964 <f_write+0x8e>
 8007bf8:	e000      	b.n	8007bfc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bfa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	7d1b      	ldrb	r3, [r3, #20]
 8007c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd ff8a 	bl	8005b28 <unlock_fs>
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3730      	adds	r7, #48	; 0x30
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f107 0208 	add.w	r2, r7, #8
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fbe0 	bl	80073f4 <validate>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d16d      	bne.n	8007d1a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7d1b      	ldrb	r3, [r3, #20]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d067      	beq.n	8007d1a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	da1a      	bge.n	8007c8a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	7858      	ldrb	r0, [r3, #1]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	2301      	movs	r3, #1
 8007c64:	f7fd fe0c 	bl	8005880 <disk_write>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d006      	beq.n	8007c7c <f_sync+0x5e>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2101      	movs	r1, #1
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd ff58 	bl	8005b28 <unlock_fs>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e055      	b.n	8007d28 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7d1b      	ldrb	r3, [r3, #20]
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c8a:	f7fd fd39 	bl	8005700 <get_fattime>
 8007c8e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7fe f911 	bl	8005ec0 <move_window>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d138      	bne.n	8007d1a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	330b      	adds	r3, #11
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	330b      	adds	r3, #11
 8007cb8:	f042 0220 	orr.w	r2, r2, #32
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6818      	ldr	r0, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	f7fe fe1c 	bl	8006908 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f103 021c 	add.w	r2, r3, #28
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fd fe63 	bl	80059a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3316      	adds	r3, #22
 8007ce6:	6939      	ldr	r1, [r7, #16]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fe5d 	bl	80059a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3312      	adds	r3, #18
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd fe3c 	bl	8005972 <st_word>
					fs->wflag = 1;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe f90a 	bl	8005f1c <sync_fs>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7d1b      	ldrb	r3, [r3, #20]
 8007d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	7dfa      	ldrb	r2, [r7, #23]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fd ff01 	bl	8005b28 <unlock_fs>
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ff70 	bl	8007c1e <f_sync>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d11d      	bne.n	8007d84 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff fb4f 	bl	80073f4 <validate>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d111      	bne.n	8007d84 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe f807 	bl	8005d78 <dec_lock>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd fed2 	bl	8005b28 <unlock_fs>
#endif
		}
	}
	return res;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <f_opendir+0x14>
 8007d9e:	2309      	movs	r3, #9
 8007da0:	e06a      	b.n	8007e78 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007da6:	f107 010c 	add.w	r1, r7, #12
 8007daa:	463b      	mov	r3, r7
 8007dac:	2200      	movs	r2, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f8cc 	bl	8006f4c <find_volume>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d14f      	bne.n	8007e5e <f_opendir+0xd0>
		obj->fs = fs;
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7fe ffb3 	bl	8006d34 <follow_path>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d13d      	bne.n	8007e54 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db12      	blt.n	8007e0a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	799b      	ldrb	r3, [r3, #6]
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f7fe fd66 	bl	80068ca <ld_clust>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	e001      	b.n	8007e0a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007e06:	2305      	movs	r3, #5
 8007e08:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d121      	bne.n	8007e54 <f_opendir+0xc6>
				obj->id = fs->id;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	88da      	ldrh	r2, [r3, #6]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fe fbce 	bl	80065bc <dir_sdi>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d114      	bne.n	8007e54 <f_opendir+0xc6>
					if (obj->sclust) {
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fd ff11 	bl	8005c5c <inc_lock>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <f_opendir+0xc6>
 8007e48:	2312      	movs	r3, #18
 8007e4a:	75fb      	strb	r3, [r7, #23]
 8007e4c:	e002      	b.n	8007e54 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2200      	movs	r2, #0
 8007e52:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d101      	bne.n	8007e5e <f_opendir+0xd0>
 8007e5a:	2305      	movs	r3, #5
 8007e5c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <f_opendir+0xdc>
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	7dfa      	ldrb	r2, [r7, #23]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd fe59 	bl	8005b28 <unlock_fs>
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f107 0208 	add.w	r2, r7, #8
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff faaf 	bl	80073f4 <validate>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d115      	bne.n	8007ecc <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d006      	beq.n	8007eb6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd ff63 	bl	8005d78 <dec_lock>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd fe2e 	bl	8005b28 <unlock_fs>
#endif
	}
	return res;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f107 0208 	add.w	r2, r7, #8
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fa83 	bl	80073f4 <validate>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d126      	bne.n	8007f46 <f_readdir+0x70>
		if (!fno) {
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fe fb5b 	bl	80065bc <dir_sdi>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
 8007f0a:	e01c      	b.n	8007f46 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7fe fd1a 	bl	8006948 <dir_read>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d101      	bne.n	8007f22 <f_readdir+0x4c>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10e      	bne.n	8007f46 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7fe fe0e 	bl	8006b4c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fe fbbd 	bl	80066b2 <dir_next>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d101      	bne.n	8007f46 <f_readdir+0x70>
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7bfa      	ldrb	r2, [r7, #15]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fd fdeb 	bl	8005b28 <unlock_fs>
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b090      	sub	sp, #64	; 0x40
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007f66:	f107 010c 	add.w	r1, r7, #12
 8007f6a:	1d3b      	adds	r3, r7, #4
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe ffec 	bl	8006f4c <find_volume>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007f7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d11f      	bne.n	8007fc2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	f107 030c 	add.w	r3, r7, #12
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fed2 	bl	8006d34 <follow_path>
 8007f90:	4603      	mov	r3, r0
 8007f92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007f96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d111      	bne.n	8007fc2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007f9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007fa2:	b25b      	sxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da03      	bge.n	8007fb0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007fa8:	2306      	movs	r3, #6
 8007faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007fae:	e008      	b.n	8007fc2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <f_stat+0x66>
 8007fb6:	f107 030c 	add.w	r3, r7, #12
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fdc5 	bl	8006b4c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fd fdac 	bl	8005b28 <unlock_fs>
 8007fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3740      	adds	r7, #64	; 0x40
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b09e      	sub	sp, #120	; 0x78
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007fe8:	f107 010c 	add.w	r1, r7, #12
 8007fec:	1d3b      	adds	r3, r7, #4
 8007fee:	2202      	movs	r2, #2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe ffab 	bl	8006f4c <find_volume>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8008000:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008004:	2b00      	cmp	r3, #0
 8008006:	f040 808e 	bne.w	8008126 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fe8e 	bl	8006d34 <follow_path>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800801e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008022:	2b00      	cmp	r3, #0
 8008024:	d108      	bne.n	8008038 <f_unlink+0x5c>
 8008026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800802a:	2102      	movs	r1, #2
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fd97 	bl	8005b60 <chk_lock>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008038:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800803c:	2b00      	cmp	r3, #0
 800803e:	d172      	bne.n	8008126 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008040:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008044:	b25b      	sxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	da03      	bge.n	8008052 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800804a:	2306      	movs	r3, #6
 800804c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008050:	e008      	b.n	8008064 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008052:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800805e:	2307      	movs	r3, #7
 8008060:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008064:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008068:	2b00      	cmp	r3, #0
 800806a:	d134      	bne.n	80080d6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fc29 	bl	80068ca <ld_clust>
 8008078:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800807a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b00      	cmp	r3, #0
 8008084:	d027      	beq.n	80080d6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800808a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800808c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800808e:	f107 0310 	add.w	r3, r7, #16
 8008092:	2100      	movs	r1, #0
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe fa91 	bl	80065bc <dir_sdi>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80080a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d116      	bne.n	80080d6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80080a8:	f107 0310 	add.w	r3, r7, #16
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fc4a 	bl	8006948 <dir_read>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80080ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <f_unlink+0xec>
 80080c2:	2307      	movs	r3, #7
 80080c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80080c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d102      	bne.n	80080d6 <f_unlink+0xfa>
 80080d0:	2300      	movs	r3, #0
 80080d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80080d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d123      	bne.n	8008126 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80080de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe fd14 	bl	8006b10 <dir_remove>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80080ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10c      	bne.n	8008110 <f_unlink+0x134>
 80080f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80080fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008100:	2200      	movs	r2, #0
 8008102:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe f928 	bl	800635a <remove_chain>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008110:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <f_unlink+0x14a>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd fefe 	bl	8005f1c <sync_fs>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd fcfa 	bl	8005b28 <unlock_fs>
 8008134:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008138:	4618      	mov	r0, r3
 800813a:	3778      	adds	r7, #120	; 0x78
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008156:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008158:	7a5b      	ldrb	r3, [r3, #9]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d131      	bne.n	80081c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008162:	7a5b      	ldrb	r3, [r3, #9]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	461a      	mov	r2, r3
 8008168:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 800816a:	2100      	movs	r1, #0
 800816c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800816e:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008170:	7a5b      	ldrb	r3, [r3, #9]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	4a17      	ldr	r2, [pc, #92]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008180:	7a5b      	ldrb	r3, [r3, #9]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008188:	4413      	add	r3, r2
 800818a:	79fa      	ldrb	r2, [r7, #7]
 800818c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800818e:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 8008190:	7a5b      	ldrb	r3, [r3, #9]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	b2d1      	uxtb	r1, r2
 8008198:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <FATFS_LinkDriverEx+0x94>)
 800819a:	7251      	strb	r1, [r2, #9]
 800819c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800819e:	7dbb      	ldrb	r3, [r7, #22]
 80081a0:	3330      	adds	r3, #48	; 0x30
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3301      	adds	r3, #1
 80081ac:	223a      	movs	r2, #58	; 0x3a
 80081ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3302      	adds	r3, #2
 80081b4:	222f      	movs	r2, #47	; 0x2f
 80081b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3303      	adds	r3, #3
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000998 	.word	0x20000998

080081d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081e2:	2200      	movs	r2, #0
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff ffaa 	bl	8008140 <FATFS_LinkDriverEx>
 80081ec:	4603      	mov	r3, r0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	4603      	mov	r3, r0
 80081fe:	6039      	str	r1, [r7, #0]
 8008200:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	2300      	movs	r3, #0
 8008208:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800820a:	f107 030c 	add.w	r3, r7, #12
 800820e:	2101      	movs	r1, #1
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f84e 	bl	80082b2 <osSemaphoreCreate>
 8008216:	4602      	mov	r2, r0
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	617b      	str	r3, [r7, #20]

    return ret;
 800822c:	697b      	ldr	r3, [r7, #20]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8ee 	bl	8008420 <osSemaphoreDelete>
#endif
    return 1;
 8008244:	2301      	movs	r3, #1
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800825a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f85a 	bl	8008318 <osSemaphoreWait>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800826a:	2301      	movs	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f897 	bl	80083b4 <osSemaphoreRelease>
#endif
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008294:	f3ef 8305 	mrs	r3, IPSR
 8008298:	607b      	str	r3, [r7, #4]
  return(result);
 800829a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800829c:	2b00      	cmp	r3, #0
 800829e:	bf14      	ite	ne
 80082a0:	2301      	movne	r3, #1
 80082a2:	2300      	moveq	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b086      	sub	sp, #24
 80082b6:	af02      	add	r7, sp, #8
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00f      	beq.n	80082e4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d10a      	bne.n	80082e0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	2203      	movs	r2, #3
 80082d0:	9200      	str	r2, [sp, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	2001      	movs	r0, #1
 80082d8:	f000 f9d2 	bl	8008680 <xQueueGenericCreateStatic>
 80082dc:	4603      	mov	r3, r0
 80082de:	e016      	b.n	800830e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	e014      	b.n	800830e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d110      	bne.n	800830c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80082ea:	2203      	movs	r2, #3
 80082ec:	2100      	movs	r1, #0
 80082ee:	2001      	movs	r0, #1
 80082f0:	f000 fa3e 	bl	8008770 <xQueueGenericCreate>
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <osSemaphoreCreate+0x56>
 80082fc:	2300      	movs	r3, #0
 80082fe:	2200      	movs	r2, #0
 8008300:	2100      	movs	r1, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fa8e 	bl	8008824 <xQueueGenericSend>
      return sema;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	e000      	b.n	800830e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800830c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008322:	2300      	movs	r3, #0
 8008324:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	e03a      	b.n	80083a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833a:	d103      	bne.n	8008344 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800833c:	f04f 33ff 	mov.w	r3, #4294967295
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e009      	b.n	8008358 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d006      	beq.n	8008358 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <osSemaphoreWait+0x40>
      ticks = 1;
 8008354:	2301      	movs	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008358:	f7ff ff99 	bl	800828e <inHandlerMode>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d017      	beq.n	8008392 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008362:	f107 0308 	add.w	r3, r7, #8
 8008366:	461a      	mov	r2, r3
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fcf2 	bl	8008d54 <xQueueReceiveFromISR>
 8008370:	4603      	mov	r3, r0
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008376:	23ff      	movs	r3, #255	; 0xff
 8008378:	e015      	b.n	80083a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d011      	beq.n	80083a4 <osSemaphoreWait+0x8c>
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <osSemaphoreWait+0x98>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	e008      	b.n	80083a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fbd1 	bl	8008b3c <xQueueSemaphoreTake>
 800839a:	4603      	mov	r3, r0
 800839c:	2b01      	cmp	r3, #1
 800839e:	d001      	beq.n	80083a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80083a0:	23ff      	movs	r3, #255	; 0xff
 80083a2:	e000      	b.n	80083a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80083c4:	f7ff ff63 	bl	800828e <inHandlerMode>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d016      	beq.n	80083fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80083ce:	f107 0308 	add.w	r3, r7, #8
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb23 	bl	8008a20 <xQueueGiveFromISR>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80083e0:	23ff      	movs	r3, #255	; 0xff
 80083e2:	e017      	b.n	8008414 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d013      	beq.n	8008412 <osSemaphoreRelease+0x5e>
 80083ea:	4b0c      	ldr	r3, [pc, #48]	; (800841c <osSemaphoreRelease+0x68>)
 80083ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	e00a      	b.n	8008412 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa0e 	bl	8008824 <xQueueGenericSend>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d001      	beq.n	8008412 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800840e:	23ff      	movs	r3, #255	; 0xff
 8008410:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008412:	68fb      	ldr	r3, [r7, #12]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	e000ed04 	.word	0xe000ed04

08008420 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008428:	f7ff ff31 	bl	800828e <inHandlerMode>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008432:	2382      	movs	r3, #130	; 0x82
 8008434:	e003      	b.n	800843e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fd0c 	bl	8008e54 <vQueueDelete>

  return osOK; 
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f103 0208 	add.w	r2, r3, #8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f103 0208 	add.w	r2, r3, #8
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f103 0208 	add.w	r2, r3, #8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	601a      	str	r2, [r3, #0]
}
 80084dc:	bf00      	nop
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d103      	bne.n	8008508 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	e00c      	b.n	8008522 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3308      	adds	r3, #8
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e002      	b.n	8008516 <vListInsert+0x2e>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	429a      	cmp	r2, r3
 8008520:	d2f6      	bcs.n	8008510 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
}
 800854e:	bf00      	nop
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	6892      	ldr	r2, [r2, #8]
 8008570:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6852      	ldr	r2, [r2, #4]
 800857a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	429a      	cmp	r2, r3
 8008584:	d103      	bne.n	800858e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	1e5a      	subs	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085da:	f001 fec3 	bl	800a364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	3b01      	subs	r3, #1
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008610:	fb01 f303 	mul.w	r3, r1, r3
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	22ff      	movs	r2, #255	; 0xff
 800861e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	22ff      	movs	r2, #255	; 0xff
 8008626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d114      	bne.n	800865a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01a      	beq.n	800866e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3310      	adds	r3, #16
 800863c:	4618      	mov	r0, r3
 800863e:	f001 f989 	bl	8009954 <xTaskRemoveFromEventList>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d012      	beq.n	800866e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008648:	4b0c      	ldr	r3, [pc, #48]	; (800867c <xQueueGenericReset+0xcc>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	e009      	b.n	800866e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3310      	adds	r3, #16
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fef1 	bl	8008446 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3324      	adds	r3, #36	; 0x24
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff feec 	bl	8008446 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800866e:	f001 fea9 	bl	800a3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008672:	2301      	movs	r3, #1
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	e000ed04 	.word	0xe000ed04

08008680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <xQueueGenericCreateStatic+0x52>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <xQueueGenericCreateStatic+0x56>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <xQueueGenericCreateStatic+0x58>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	623b      	str	r3, [r7, #32]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <xQueueGenericCreateStatic+0x7e>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <xQueueGenericCreateStatic+0x82>
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <xQueueGenericCreateStatic+0x84>
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	61fb      	str	r3, [r7, #28]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800871e:	2348      	movs	r3, #72	; 0x48
 8008720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b48      	cmp	r3, #72	; 0x48
 8008726:	d00a      	beq.n	800873e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	61bb      	str	r3, [r7, #24]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800873e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00d      	beq.n	8008766 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008752:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	4613      	mov	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	68b9      	ldr	r1, [r7, #8]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f83f 	bl	80087e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008768:	4618      	mov	r0, r3
 800876a:	3730      	adds	r7, #48	; 0x30
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af02      	add	r7, sp, #8
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	613b      	str	r3, [r7, #16]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3348      	adds	r3, #72	; 0x48
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fefd 	bl	800a5a8 <pvPortMalloc>
 80087ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	3348      	adds	r3, #72	; 0x48
 80087be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087c8:	79fa      	ldrb	r2, [r7, #7]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f805 	bl	80087e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087da:	69bb      	ldr	r3, [r7, #24]
	}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e002      	b.n	8008806 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008812:	2101      	movs	r1, #1
 8008814:	69b8      	ldr	r0, [r7, #24]
 8008816:	f7ff fecb 	bl	80085b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08e      	sub	sp, #56	; 0x38
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008832:	2300      	movs	r3, #0
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10a      	bne.n	8008856 <xQueueGenericSend+0x32>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d103      	bne.n	8008864 <xQueueGenericSend+0x40>
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <xQueueGenericSend+0x44>
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <xQueueGenericSend+0x46>
 8008868:	2300      	movs	r3, #0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <xQueueGenericSend+0x60>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2b02      	cmp	r3, #2
 8008888:	d103      	bne.n	8008892 <xQueueGenericSend+0x6e>
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <xQueueGenericSend+0x72>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <xQueueGenericSend+0x74>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	623b      	str	r3, [r7, #32]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088b2:	f001 fa0b 	bl	8009ccc <xTaskGetSchedulerState>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <xQueueGenericSend+0x9e>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <xQueueGenericSend+0xa2>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <xQueueGenericSend+0xa4>
 80088c6:	2300      	movs	r3, #0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	61fb      	str	r3, [r7, #28]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088e2:	f001 fd3f 	bl	800a364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d302      	bcc.n	80088f8 <xQueueGenericSend+0xd4>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d129      	bne.n	800894c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088fe:	f000 fae4 	bl	8008eca <prvCopyDataToQueue>
 8008902:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	d010      	beq.n	800892e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	3324      	adds	r3, #36	; 0x24
 8008910:	4618      	mov	r0, r3
 8008912:	f001 f81f 	bl	8009954 <xTaskRemoveFromEventList>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d013      	beq.n	8008944 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800891c:	4b3f      	ldr	r3, [pc, #252]	; (8008a1c <xQueueGenericSend+0x1f8>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	e00a      	b.n	8008944 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d007      	beq.n	8008944 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008934:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <xQueueGenericSend+0x1f8>)
 8008936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008944:	f001 fd3e 	bl	800a3c4 <vPortExitCritical>
				return pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	e063      	b.n	8008a14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d103      	bne.n	800895a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008952:	f001 fd37 	bl	800a3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008956:	2300      	movs	r3, #0
 8008958:	e05c      	b.n	8008a14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008960:	f107 0314 	add.w	r3, r7, #20
 8008964:	4618      	mov	r0, r3
 8008966:	f001 f857 	bl	8009a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800896a:	2301      	movs	r3, #1
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800896e:	f001 fd29 	bl	800a3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008972:	f000 fe0d 	bl	8009590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008976:	f001 fcf5 	bl	800a364 <vPortEnterCritical>
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008980:	b25b      	sxtb	r3, r3
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d103      	bne.n	8008990 <xQueueGenericSend+0x16c>
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008996:	b25b      	sxtb	r3, r3
 8008998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899c:	d103      	bne.n	80089a6 <xQueueGenericSend+0x182>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089a6:	f001 fd0d 	bl	800a3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089aa:	1d3a      	adds	r2, r7, #4
 80089ac:	f107 0314 	add.w	r3, r7, #20
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 f846 	bl	8009a44 <xTaskCheckForTimeOut>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d124      	bne.n	8008a08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089c0:	f000 fb7b 	bl	80090ba <prvIsQueueFull>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d018      	beq.n	80089fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	3310      	adds	r3, #16
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 ff9a 	bl	800990c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089da:	f000 fb06 	bl	8008fea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089de:	f000 fde5 	bl	80095ac <xTaskResumeAll>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f47f af7c 	bne.w	80088e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <xQueueGenericSend+0x1f8>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	e772      	b.n	80088e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089fe:	f000 faf4 	bl	8008fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a02:	f000 fdd3 	bl	80095ac <xTaskResumeAll>
 8008a06:	e76c      	b.n	80088e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a0a:	f000 faee 	bl	8008fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a0e:	f000 fdcd 	bl	80095ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3738      	adds	r7, #56	; 0x38
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08e      	sub	sp, #56	; 0x38
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	623b      	str	r3, [r7, #32]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	61fb      	str	r3, [r7, #28]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <xQueueGiveFromISR+0x58>
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <xQueueGiveFromISR+0x5c>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <xQueueGiveFromISR+0x5e>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10a      	bne.n	8008a98 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61bb      	str	r3, [r7, #24]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a98:	f001 fd46 	bl	800a528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a9c:	f3ef 8211 	mrs	r2, BASEPRI
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	617a      	str	r2, [r7, #20]
 8008ab2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ab4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d22b      	bcs.n	8008b20 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ada:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae2:	d112      	bne.n	8008b0a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d016      	beq.n	8008b1a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	3324      	adds	r3, #36	; 0x24
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 ff2f 	bl	8009954 <xTaskRemoveFromEventList>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00e      	beq.n	8008b1a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2201      	movs	r2, #1
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e007      	b.n	8008b1a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0e:	3301      	adds	r3, #1
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	b25a      	sxtb	r2, r3
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1e:	e001      	b.n	8008b24 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3738      	adds	r7, #56	; 0x38
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	623b      	str	r3, [r7, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	61fb      	str	r3, [r7, #28]
}
 8008b88:	bf00      	nop
 8008b8a:	e7fe      	b.n	8008b8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b8c:	f001 f89e 	bl	8009ccc <xTaskGetSchedulerState>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <xQueueSemaphoreTake+0x60>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <xQueueSemaphoreTake+0x64>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <xQueueSemaphoreTake+0x66>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10a      	bne.n	8008bbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	61bb      	str	r3, [r7, #24]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bbc:	f001 fbd2 	bl	800a364 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d024      	beq.n	8008c16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	1e5a      	subs	r2, r3, #1
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bdc:	f001 fa1e 	bl	800a01c <pvTaskIncrementMutexHeldCount>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00f      	beq.n	8008c0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	3310      	adds	r3, #16
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 feae 	bl	8009954 <xTaskRemoveFromEventList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d007      	beq.n	8008c0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bfe:	4b54      	ldr	r3, [pc, #336]	; (8008d50 <xQueueSemaphoreTake+0x214>)
 8008c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c0e:	f001 fbd9 	bl	800a3c4 <vPortExitCritical>
				return pdPASS;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e097      	b.n	8008d46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d111      	bne.n	8008c40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00a      	beq.n	8008c38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	617b      	str	r3, [r7, #20]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c38:	f001 fbc4 	bl	800a3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e082      	b.n	8008d46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c46:	f107 030c 	add.w	r3, r7, #12
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fee4 	bl	8009a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c50:	2301      	movs	r3, #1
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c54:	f001 fbb6 	bl	800a3c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c58:	f000 fc9a 	bl	8009590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c5c:	f001 fb82 	bl	800a364 <vPortEnterCritical>
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c66:	b25b      	sxtb	r3, r3
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d103      	bne.n	8008c76 <xQueueSemaphoreTake+0x13a>
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c7c:	b25b      	sxtb	r3, r3
 8008c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c82:	d103      	bne.n	8008c8c <xQueueSemaphoreTake+0x150>
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c8c:	f001 fb9a 	bl	800a3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c90:	463a      	mov	r2, r7
 8008c92:	f107 030c 	add.w	r3, r7, #12
 8008c96:	4611      	mov	r1, r2
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fed3 	bl	8009a44 <xTaskCheckForTimeOut>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d132      	bne.n	8008d0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ca6:	f000 f9f2 	bl	800908e <prvIsQueueEmpty>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d026      	beq.n	8008cfe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008cb8:	f001 fb54 	bl	800a364 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 f821 	bl	8009d08 <xTaskPriorityInherit>
 8008cc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008cc8:	f001 fb7c 	bl	800a3c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	3324      	adds	r3, #36	; 0x24
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fe19 	bl	800990c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cdc:	f000 f985 	bl	8008fea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ce0:	f000 fc64 	bl	80095ac <xTaskResumeAll>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f47f af68 	bne.w	8008bbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008cec:	4b18      	ldr	r3, [pc, #96]	; (8008d50 <xQueueSemaphoreTake+0x214>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	e75e      	b.n	8008bbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d00:	f000 f973 	bl	8008fea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d04:	f000 fc52 	bl	80095ac <xTaskResumeAll>
 8008d08:	e758      	b.n	8008bbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d0c:	f000 f96d 	bl	8008fea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d10:	f000 fc4c 	bl	80095ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d16:	f000 f9ba 	bl	800908e <prvIsQueueEmpty>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f43f af4d 	beq.w	8008bbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00d      	beq.n	8008d44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008d28:	f001 fb1c 	bl	800a364 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d2e:	f000 f8b4 	bl	8008e9a <prvGetDisinheritPriorityAfterTimeout>
 8008d32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 f8e0 	bl	8009f00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d40:	f001 fb40 	bl	800a3c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3738      	adds	r7, #56	; 0x38
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	; 0x38
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	623b      	str	r3, [r7, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <xQueueReceiveFromISR+0x3a>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <xQueueReceiveFromISR+0x3e>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <xQueueReceiveFromISR+0x40>
 8008d92:	2300      	movs	r3, #0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	61fb      	str	r3, [r7, #28]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dae:	f001 fbbb 	bl	800a528 <vPortValidateInterruptPriority>
	__asm volatile
 8008db2:	f3ef 8211 	mrs	r2, BASEPRI
 8008db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	61ba      	str	r2, [r7, #24]
 8008dc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008dca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d02f      	beq.n	8008e3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de8:	f000 f8d9 	bl	8008f9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	1e5a      	subs	r2, r3, #1
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008df4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d112      	bne.n	8008e24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d016      	beq.n	8008e34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	3310      	adds	r3, #16
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fda2 	bl	8009954 <xTaskRemoveFromEventList>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00e      	beq.n	8008e34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e007      	b.n	8008e34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e28:	3301      	adds	r3, #1
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	b25a      	sxtb	r2, r3
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e34:	2301      	movs	r3, #1
 8008e36:	637b      	str	r3, [r7, #52]	; 0x34
 8008e38:	e001      	b.n	8008e3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f383 8811 	msr	BASEPRI, r3
}
 8008e48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3738      	adds	r7, #56	; 0x38
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <vQueueDelete+0x28>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60bb      	str	r3, [r7, #8]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 f935 	bl	80090ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 fc57 	bl	800a740 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e92:	bf00      	nop
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d006      	beq.n	8008eb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f1c3 0307 	rsb	r3, r3, #7
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e001      	b.n	8008ebc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
	}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b086      	sub	sp, #24
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10d      	bne.n	8008f04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d14d      	bne.n	8008f8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 ff7d 	bl	8009df4 <xTaskPriorityDisinherit>
 8008efa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	609a      	str	r2, [r3, #8]
 8008f02:	e043      	b.n	8008f8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d119      	bne.n	8008f3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6858      	ldr	r0, [r3, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	461a      	mov	r2, r3
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	f001 fd85 	bl	800aa24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	441a      	add	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d32b      	bcc.n	8008f8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	e026      	b.n	8008f8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	68d8      	ldr	r0, [r3, #12]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	461a      	mov	r2, r3
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	f001 fd6b 	bl	800aa24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	425b      	negs	r3, r3
 8008f58:	441a      	add	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d207      	bcs.n	8008f7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	425b      	negs	r3, r3
 8008f74:	441a      	add	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d105      	bne.n	8008f8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f94:	697b      	ldr	r3, [r7, #20]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d018      	beq.n	8008fe2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	441a      	add	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d303      	bcc.n	8008fd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68d9      	ldr	r1, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6838      	ldr	r0, [r7, #0]
 8008fde:	f001 fd21 	bl	800aa24 <memcpy>
	}
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ff2:	f001 f9b7 	bl	800a364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ffc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ffe:	e011      	b.n	8009024 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d012      	beq.n	800902e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3324      	adds	r3, #36	; 0x24
 800900c:	4618      	mov	r0, r3
 800900e:	f000 fca1 	bl	8009954 <xTaskRemoveFromEventList>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009018:	f000 fd76 	bl	8009b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	3b01      	subs	r3, #1
 8009020:	b2db      	uxtb	r3, r3
 8009022:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009028:	2b00      	cmp	r3, #0
 800902a:	dce9      	bgt.n	8009000 <prvUnlockQueue+0x16>
 800902c:	e000      	b.n	8009030 <prvUnlockQueue+0x46>
					break;
 800902e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	22ff      	movs	r2, #255	; 0xff
 8009034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009038:	f001 f9c4 	bl	800a3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800903c:	f001 f992 	bl	800a364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009046:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009048:	e011      	b.n	800906e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d012      	beq.n	8009078 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3310      	adds	r3, #16
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fc7c 	bl	8009954 <xTaskRemoveFromEventList>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009062:	f000 fd51 	bl	8009b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	3b01      	subs	r3, #1
 800906a:	b2db      	uxtb	r3, r3
 800906c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800906e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009072:	2b00      	cmp	r3, #0
 8009074:	dce9      	bgt.n	800904a <prvUnlockQueue+0x60>
 8009076:	e000      	b.n	800907a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009078:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	22ff      	movs	r2, #255	; 0xff
 800907e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009082:	f001 f99f 	bl	800a3c4 <vPortExitCritical>
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009096:	f001 f965 	bl	800a364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d102      	bne.n	80090a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090a2:	2301      	movs	r3, #1
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e001      	b.n	80090ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ac:	f001 f98a 	bl	800a3c4 <vPortExitCritical>

	return xReturn;
 80090b0:	68fb      	ldr	r3, [r7, #12]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090c2:	f001 f94f 	bl	800a364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d102      	bne.n	80090d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090d2:	2301      	movs	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	e001      	b.n	80090dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090dc:	f001 f972 	bl	800a3c4 <vPortExitCritical>

	return xReturn;
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e016      	b.n	8009128 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80090fa:	4a10      	ldr	r2, [pc, #64]	; (800913c <vQueueUnregisterQueue+0x50>)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d10b      	bne.n	8009122 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <vQueueUnregisterQueue+0x50>)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2100      	movs	r1, #0
 8009110:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009114:	4a09      	ldr	r2, [pc, #36]	; (800913c <vQueueUnregisterQueue+0x50>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	4413      	add	r3, r2
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]
				break;
 8009120:	e006      	b.n	8009130 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b07      	cmp	r3, #7
 800912c:	d9e5      	bls.n	80090fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	200009a4 	.word	0x200009a4

08009140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08e      	sub	sp, #56	; 0x38
 8009144:	af04      	add	r7, sp, #16
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	623b      	str	r3, [r7, #32]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xTaskCreateStatic+0x46>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	61fb      	str	r3, [r7, #28]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009186:	2354      	movs	r3, #84	; 0x54
 8009188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b54      	cmp	r3, #84	; 0x54
 800918e:	d00a      	beq.n	80091a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	61bb      	str	r3, [r7, #24]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01e      	beq.n	80091ec <xTaskCreateStatic+0xac>
 80091ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01b      	beq.n	80091ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	2202      	movs	r2, #2
 80091c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091c6:	2300      	movs	r3, #0
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	f107 0314 	add.w	r3, r7, #20
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	68b9      	ldr	r1, [r7, #8]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 f850 	bl	8009284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091e6:	f000 f8d5 	bl	8009394 <prvAddNewTaskToReadyList>
 80091ea:	e001      	b.n	80091f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091f0:	697b      	ldr	r3, [r7, #20]
	}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3728      	adds	r7, #40	; 0x28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b08c      	sub	sp, #48	; 0x30
 80091fe:	af04      	add	r7, sp, #16
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	60b9      	str	r1, [r7, #8]
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	4613      	mov	r3, r2
 8009208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4618      	mov	r0, r3
 8009210:	f001 f9ca 	bl	800a5a8 <pvPortMalloc>
 8009214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00e      	beq.n	800923a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800921c:	2054      	movs	r0, #84	; 0x54
 800921e:	f001 f9c3 	bl	800a5a8 <pvPortMalloc>
 8009222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	631a      	str	r2, [r3, #48]	; 0x30
 8009230:	e005      	b.n	800923e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009232:	6978      	ldr	r0, [r7, #20]
 8009234:	f001 fa84 	bl	800a740 <vPortFree>
 8009238:	e001      	b.n	800923e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d017      	beq.n	8009274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	2300      	movs	r3, #0
 8009250:	9303      	str	r3, [sp, #12]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	9302      	str	r3, [sp, #8]
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68b9      	ldr	r1, [r7, #8]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f80e 	bl	8009284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009268:	69f8      	ldr	r0, [r7, #28]
 800926a:	f000 f893 	bl	8009394 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800926e:	2301      	movs	r3, #1
 8009270:	61bb      	str	r3, [r7, #24]
 8009272:	e002      	b.n	800927a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009274:	f04f 33ff 	mov.w	r3, #4294967295
 8009278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800927a:	69bb      	ldr	r3, [r7, #24]
	}
 800927c:	4618      	mov	r0, r3
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800929c:	3b01      	subs	r3, #1
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	617b      	str	r3, [r7, #20]
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01f      	beq.n	8009312 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092d2:	2300      	movs	r3, #0
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	e012      	b.n	80092fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	7819      	ldrb	r1, [r3, #0]
 80092e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	4413      	add	r3, r2
 80092e6:	3334      	adds	r3, #52	; 0x34
 80092e8:	460a      	mov	r2, r1
 80092ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	3301      	adds	r3, #1
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2b0f      	cmp	r3, #15
 8009302:	d9e9      	bls.n	80092d8 <prvInitialiseNewTask+0x54>
 8009304:	e000      	b.n	8009308 <prvInitialiseNewTask+0x84>
			{
				break;
 8009306:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009310:	e003      	b.n	800931a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	2b06      	cmp	r3, #6
 800931e:	d901      	bls.n	8009324 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009320:	2306      	movs	r3, #6
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009328:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800932e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	2200      	movs	r2, #0
 8009334:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	3304      	adds	r3, #4
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff f8a3 	bl	8008486 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	3318      	adds	r3, #24
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff f89e 	bl	8008486 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f1c3 0207 	rsb	r2, r3, #7
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	2200      	movs	r2, #0
 8009364:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	68f9      	ldr	r1, [r7, #12]
 8009372:	69b8      	ldr	r0, [r7, #24]
 8009374:	f000 fecc 	bl	800a110 <pxPortInitialiseStack>
 8009378:	4602      	mov	r2, r0
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800938a:	bf00      	nop
 800938c:	3720      	adds	r7, #32
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800939c:	f000 ffe2 	bl	800a364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093a0:	4b2a      	ldr	r3, [pc, #168]	; (800944c <prvAddNewTaskToReadyList+0xb8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	4a29      	ldr	r2, [pc, #164]	; (800944c <prvAddNewTaskToReadyList+0xb8>)
 80093a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093aa:	4b29      	ldr	r3, [pc, #164]	; (8009450 <prvAddNewTaskToReadyList+0xbc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093b2:	4a27      	ldr	r2, [pc, #156]	; (8009450 <prvAddNewTaskToReadyList+0xbc>)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093b8:	4b24      	ldr	r3, [pc, #144]	; (800944c <prvAddNewTaskToReadyList+0xb8>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d110      	bne.n	80093e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093c0:	f000 fbc6 	bl	8009b50 <prvInitialiseTaskLists>
 80093c4:	e00d      	b.n	80093e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093c6:	4b23      	ldr	r3, [pc, #140]	; (8009454 <prvAddNewTaskToReadyList+0xc0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093ce:	4b20      	ldr	r3, [pc, #128]	; (8009450 <prvAddNewTaskToReadyList+0xbc>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d8:	429a      	cmp	r2, r3
 80093da:	d802      	bhi.n	80093e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093dc:	4a1c      	ldr	r2, [pc, #112]	; (8009450 <prvAddNewTaskToReadyList+0xbc>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093e2:	4b1d      	ldr	r3, [pc, #116]	; (8009458 <prvAddNewTaskToReadyList+0xc4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	4a1b      	ldr	r2, [pc, #108]	; (8009458 <prvAddNewTaskToReadyList+0xc4>)
 80093ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	2201      	movs	r2, #1
 80093f2:	409a      	lsls	r2, r3
 80093f4:	4b19      	ldr	r3, [pc, #100]	; (800945c <prvAddNewTaskToReadyList+0xc8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	4a18      	ldr	r2, [pc, #96]	; (800945c <prvAddNewTaskToReadyList+0xc8>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4a15      	ldr	r2, [pc, #84]	; (8009460 <prvAddNewTaskToReadyList+0xcc>)
 800940c:	441a      	add	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7ff f843 	bl	80084a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800941a:	f000 ffd3 	bl	800a3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800941e:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <prvAddNewTaskToReadyList+0xc0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00e      	beq.n	8009444 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009426:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <prvAddNewTaskToReadyList+0xbc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009430:	429a      	cmp	r2, r3
 8009432:	d207      	bcs.n	8009444 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009434:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <prvAddNewTaskToReadyList+0xd0>)
 8009436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20000ae4 	.word	0x20000ae4
 8009450:	200009e4 	.word	0x200009e4
 8009454:	20000af0 	.word	0x20000af0
 8009458:	20000b00 	.word	0x20000b00
 800945c:	20000aec 	.word	0x20000aec
 8009460:	200009e8 	.word	0x200009e8
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d017      	beq.n	80094aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <vTaskDelay+0x60>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <vTaskDelay+0x30>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60bb      	str	r3, [r7, #8]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009498:	f000 f87a 	bl	8009590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800949c:	2100      	movs	r1, #0
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fdd0 	bl	800a044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094a4:	f000 f882 	bl	80095ac <xTaskResumeAll>
 80094a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d107      	bne.n	80094c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094b0:	4b06      	ldr	r3, [pc, #24]	; (80094cc <vTaskDelay+0x64>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000b0c 	.word	0x20000b0c
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08a      	sub	sp, #40	; 0x28
 80094d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094de:	463a      	mov	r2, r7
 80094e0:	1d39      	adds	r1, r7, #4
 80094e2:	f107 0308 	add.w	r3, r7, #8
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f8 f8ba 	bl	8001660 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	9202      	str	r2, [sp, #8]
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	460a      	mov	r2, r1
 80094fe:	491e      	ldr	r1, [pc, #120]	; (8009578 <vTaskStartScheduler+0xa8>)
 8009500:	481e      	ldr	r0, [pc, #120]	; (800957c <vTaskStartScheduler+0xac>)
 8009502:	f7ff fe1d 	bl	8009140 <xTaskCreateStatic>
 8009506:	4603      	mov	r3, r0
 8009508:	4a1d      	ldr	r2, [pc, #116]	; (8009580 <vTaskStartScheduler+0xb0>)
 800950a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800950c:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <vTaskStartScheduler+0xb0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e001      	b.n	800951e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d116      	bne.n	8009552 <vTaskStartScheduler+0x82>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	613b      	str	r3, [r7, #16]
}
 8009536:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009538:	4b12      	ldr	r3, [pc, #72]	; (8009584 <vTaskStartScheduler+0xb4>)
 800953a:	f04f 32ff 	mov.w	r2, #4294967295
 800953e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009540:	4b11      	ldr	r3, [pc, #68]	; (8009588 <vTaskStartScheduler+0xb8>)
 8009542:	2201      	movs	r2, #1
 8009544:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009546:	4b11      	ldr	r3, [pc, #68]	; (800958c <vTaskStartScheduler+0xbc>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800954c:	f000 fe68 	bl	800a220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009550:	e00e      	b.n	8009570 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d10a      	bne.n	8009570 <vTaskStartScheduler+0xa0>
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	60fb      	str	r3, [r7, #12]
}
 800956c:	bf00      	nop
 800956e:	e7fe      	b.n	800956e <vTaskStartScheduler+0x9e>
}
 8009570:	bf00      	nop
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	0800b7b0 	.word	0x0800b7b0
 800957c:	08009b21 	.word	0x08009b21
 8009580:	20000b08 	.word	0x20000b08
 8009584:	20000b04 	.word	0x20000b04
 8009588:	20000af0 	.word	0x20000af0
 800958c:	20000ae8 	.word	0x20000ae8

08009590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009594:	4b04      	ldr	r3, [pc, #16]	; (80095a8 <vTaskSuspendAll+0x18>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3301      	adds	r3, #1
 800959a:	4a03      	ldr	r2, [pc, #12]	; (80095a8 <vTaskSuspendAll+0x18>)
 800959c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800959e:	bf00      	nop
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000b0c 	.word	0x20000b0c

080095ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095ba:	4b41      	ldr	r3, [pc, #260]	; (80096c0 <xTaskResumeAll+0x114>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	603b      	str	r3, [r7, #0]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095d8:	f000 fec4 	bl	800a364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095dc:	4b38      	ldr	r3, [pc, #224]	; (80096c0 <xTaskResumeAll+0x114>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	4a37      	ldr	r2, [pc, #220]	; (80096c0 <xTaskResumeAll+0x114>)
 80095e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095e6:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <xTaskResumeAll+0x114>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d161      	bne.n	80096b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095ee:	4b35      	ldr	r3, [pc, #212]	; (80096c4 <xTaskResumeAll+0x118>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d05d      	beq.n	80096b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095f6:	e02e      	b.n	8009656 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095f8:	4b33      	ldr	r3, [pc, #204]	; (80096c8 <xTaskResumeAll+0x11c>)
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3318      	adds	r3, #24
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe ffa8 	bl	800855a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3304      	adds	r3, #4
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe ffa3 	bl	800855a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	2201      	movs	r2, #1
 800961a:	409a      	lsls	r2, r3
 800961c:	4b2b      	ldr	r3, [pc, #172]	; (80096cc <xTaskResumeAll+0x120>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4313      	orrs	r3, r2
 8009622:	4a2a      	ldr	r2, [pc, #168]	; (80096cc <xTaskResumeAll+0x120>)
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <xTaskResumeAll+0x124>)
 8009634:	441a      	add	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7fe ff2f 	bl	80084a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009646:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <xTaskResumeAll+0x128>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	429a      	cmp	r2, r3
 800964e:	d302      	bcc.n	8009656 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009650:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <xTaskResumeAll+0x12c>)
 8009652:	2201      	movs	r2, #1
 8009654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009656:	4b1c      	ldr	r3, [pc, #112]	; (80096c8 <xTaskResumeAll+0x11c>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1cc      	bne.n	80095f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009664:	f000 fb12 	bl	8009c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009668:	4b1c      	ldr	r3, [pc, #112]	; (80096dc <xTaskResumeAll+0x130>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009674:	f000 f836 	bl	80096e4 <xTaskIncrementTick>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <xTaskResumeAll+0x12c>)
 8009680:	2201      	movs	r2, #1
 8009682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3b01      	subs	r3, #1
 8009688:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1f1      	bne.n	8009674 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009690:	4b12      	ldr	r3, [pc, #72]	; (80096dc <xTaskResumeAll+0x130>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009696:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <xTaskResumeAll+0x12c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d009      	beq.n	80096b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800969e:	2301      	movs	r3, #1
 80096a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096a2:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <xTaskResumeAll+0x134>)
 80096a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f000 fe87 	bl	800a3c4 <vPortExitCritical>

	return xAlreadyYielded;
 80096b6:	68bb      	ldr	r3, [r7, #8]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000b0c 	.word	0x20000b0c
 80096c4:	20000ae4 	.word	0x20000ae4
 80096c8:	20000aa4 	.word	0x20000aa4
 80096cc:	20000aec 	.word	0x20000aec
 80096d0:	200009e8 	.word	0x200009e8
 80096d4:	200009e4 	.word	0x200009e4
 80096d8:	20000af8 	.word	0x20000af8
 80096dc:	20000af4 	.word	0x20000af4
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ee:	4b4e      	ldr	r3, [pc, #312]	; (8009828 <xTaskIncrementTick+0x144>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f040 808e 	bne.w	8009814 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096f8:	4b4c      	ldr	r3, [pc, #304]	; (800982c <xTaskIncrementTick+0x148>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3301      	adds	r3, #1
 80096fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009700:	4a4a      	ldr	r2, [pc, #296]	; (800982c <xTaskIncrementTick+0x148>)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d120      	bne.n	800974e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800970c:	4b48      	ldr	r3, [pc, #288]	; (8009830 <xTaskIncrementTick+0x14c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <xTaskIncrementTick+0x48>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	603b      	str	r3, [r7, #0]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <xTaskIncrementTick+0x46>
 800972c:	4b40      	ldr	r3, [pc, #256]	; (8009830 <xTaskIncrementTick+0x14c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	4b40      	ldr	r3, [pc, #256]	; (8009834 <xTaskIncrementTick+0x150>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a3e      	ldr	r2, [pc, #248]	; (8009830 <xTaskIncrementTick+0x14c>)
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	4a3e      	ldr	r2, [pc, #248]	; (8009834 <xTaskIncrementTick+0x150>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	4b3d      	ldr	r3, [pc, #244]	; (8009838 <xTaskIncrementTick+0x154>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	4a3c      	ldr	r2, [pc, #240]	; (8009838 <xTaskIncrementTick+0x154>)
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	f000 fa9f 	bl	8009c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800974e:	4b3b      	ldr	r3, [pc, #236]	; (800983c <xTaskIncrementTick+0x158>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	429a      	cmp	r2, r3
 8009756:	d348      	bcc.n	80097ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009758:	4b35      	ldr	r3, [pc, #212]	; (8009830 <xTaskIncrementTick+0x14c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d104      	bne.n	800976c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009762:	4b36      	ldr	r3, [pc, #216]	; (800983c <xTaskIncrementTick+0x158>)
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	601a      	str	r2, [r3, #0]
					break;
 800976a:	e03e      	b.n	80097ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800976c:	4b30      	ldr	r3, [pc, #192]	; (8009830 <xTaskIncrementTick+0x14c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	429a      	cmp	r2, r3
 8009782:	d203      	bcs.n	800978c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009784:	4a2d      	ldr	r2, [pc, #180]	; (800983c <xTaskIncrementTick+0x158>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800978a:	e02e      	b.n	80097ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	3304      	adds	r3, #4
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fee2 	bl	800855a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	3318      	adds	r3, #24
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fed9 	bl	800855a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	2201      	movs	r2, #1
 80097ae:	409a      	lsls	r2, r3
 80097b0:	4b23      	ldr	r3, [pc, #140]	; (8009840 <xTaskIncrementTick+0x15c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	4a22      	ldr	r2, [pc, #136]	; (8009840 <xTaskIncrementTick+0x15c>)
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4a1f      	ldr	r2, [pc, #124]	; (8009844 <xTaskIncrementTick+0x160>)
 80097c8:	441a      	add	r2, r3
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f7fe fe65 	bl	80084a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097da:	4b1b      	ldr	r3, [pc, #108]	; (8009848 <xTaskIncrementTick+0x164>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d3b9      	bcc.n	8009758 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80097e4:	2301      	movs	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097e8:	e7b6      	b.n	8009758 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097ea:	4b17      	ldr	r3, [pc, #92]	; (8009848 <xTaskIncrementTick+0x164>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	4914      	ldr	r1, [pc, #80]	; (8009844 <xTaskIncrementTick+0x160>)
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d901      	bls.n	8009806 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009802:	2301      	movs	r3, #1
 8009804:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009806:	4b11      	ldr	r3, [pc, #68]	; (800984c <xTaskIncrementTick+0x168>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d007      	beq.n	800981e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800980e:	2301      	movs	r3, #1
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	e004      	b.n	800981e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <xTaskIncrementTick+0x16c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	4a0d      	ldr	r2, [pc, #52]	; (8009850 <xTaskIncrementTick+0x16c>)
 800981c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800981e:	697b      	ldr	r3, [r7, #20]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000b0c 	.word	0x20000b0c
 800982c:	20000ae8 	.word	0x20000ae8
 8009830:	20000a9c 	.word	0x20000a9c
 8009834:	20000aa0 	.word	0x20000aa0
 8009838:	20000afc 	.word	0x20000afc
 800983c:	20000b04 	.word	0x20000b04
 8009840:	20000aec 	.word	0x20000aec
 8009844:	200009e8 	.word	0x200009e8
 8009848:	200009e4 	.word	0x200009e4
 800984c:	20000af8 	.word	0x20000af8
 8009850:	20000af4 	.word	0x20000af4

08009854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800985a:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <vTaskSwitchContext+0xa4>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009862:	4b26      	ldr	r3, [pc, #152]	; (80098fc <vTaskSwitchContext+0xa8>)
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009868:	e03f      	b.n	80098ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800986a:	4b24      	ldr	r3, [pc, #144]	; (80098fc <vTaskSwitchContext+0xa8>)
 800986c:	2200      	movs	r2, #0
 800986e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009870:	4b23      	ldr	r3, [pc, #140]	; (8009900 <vTaskSwitchContext+0xac>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	fab3 f383 	clz	r3, r3
 800987c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	f1c3 031f 	rsb	r3, r3, #31
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	491f      	ldr	r1, [pc, #124]	; (8009904 <vTaskSwitchContext+0xb0>)
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	440b      	add	r3, r1
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10a      	bne.n	80098b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	607b      	str	r3, [r7, #4]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <vTaskSwitchContext+0x5a>
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4a12      	ldr	r2, [pc, #72]	; (8009904 <vTaskSwitchContext+0xb0>)
 80098bc:	4413      	add	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3308      	adds	r3, #8
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d104      	bne.n	80098e0 <vTaskSwitchContext+0x8c>
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	605a      	str	r2, [r3, #4]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	4a08      	ldr	r2, [pc, #32]	; (8009908 <vTaskSwitchContext+0xb4>)
 80098e8:	6013      	str	r3, [r2, #0]
}
 80098ea:	bf00      	nop
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	20000b0c 	.word	0x20000b0c
 80098fc:	20000af8 	.word	0x20000af8
 8009900:	20000aec 	.word	0x20000aec
 8009904:	200009e8 	.word	0x200009e8
 8009908:	200009e4 	.word	0x200009e4

0800990c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60fb      	str	r3, [r7, #12]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <vTaskPlaceOnEventList+0x44>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3318      	adds	r3, #24
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fe fdd4 	bl	80084e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009940:	2101      	movs	r1, #1
 8009942:	6838      	ldr	r0, [r7, #0]
 8009944:	f000 fb7e 	bl	800a044 <prvAddCurrentTaskToDelayedList>
}
 8009948:	bf00      	nop
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	200009e4 	.word	0x200009e4

08009954 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	60fb      	str	r3, [r7, #12]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	3318      	adds	r3, #24
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fde8 	bl	800855a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998a:	4b1d      	ldr	r3, [pc, #116]	; (8009a00 <xTaskRemoveFromEventList+0xac>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d11c      	bne.n	80099cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	3304      	adds	r3, #4
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe fddf 	bl	800855a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	4b17      	ldr	r3, [pc, #92]	; (8009a04 <xTaskRemoveFromEventList+0xb0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	4a16      	ldr	r2, [pc, #88]	; (8009a04 <xTaskRemoveFromEventList+0xb0>)
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4a13      	ldr	r2, [pc, #76]	; (8009a08 <xTaskRemoveFromEventList+0xb4>)
 80099bc:	441a      	add	r2, r3
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f7fe fd6b 	bl	80084a0 <vListInsertEnd>
 80099ca:	e005      	b.n	80099d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	3318      	adds	r3, #24
 80099d0:	4619      	mov	r1, r3
 80099d2:	480e      	ldr	r0, [pc, #56]	; (8009a0c <xTaskRemoveFromEventList+0xb8>)
 80099d4:	f7fe fd64 	bl	80084a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099dc:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <xTaskRemoveFromEventList+0xbc>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d905      	bls.n	80099f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099e6:	2301      	movs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099ea:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <xTaskRemoveFromEventList+0xc0>)
 80099ec:	2201      	movs	r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e001      	b.n	80099f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099f6:	697b      	ldr	r3, [r7, #20]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	20000b0c 	.word	0x20000b0c
 8009a04:	20000aec 	.word	0x20000aec
 8009a08:	200009e8 	.word	0x200009e8
 8009a0c:	20000aa4 	.word	0x20000aa4
 8009a10:	200009e4 	.word	0x200009e4
 8009a14:	20000af8 	.word	0x20000af8

08009a18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a20:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <vTaskInternalSetTimeOutState+0x24>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <vTaskInternalSetTimeOutState+0x28>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000afc 	.word	0x20000afc
 8009a40:	20000ae8 	.word	0x20000ae8

08009a44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	613b      	str	r3, [r7, #16]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60fb      	str	r3, [r7, #12]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a86:	f000 fc6d 	bl	800a364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a8a:	4b1d      	ldr	r3, [pc, #116]	; (8009b00 <xTaskCheckForTimeOut+0xbc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d102      	bne.n	8009aaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	e023      	b.n	8009af2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b15      	ldr	r3, [pc, #84]	; (8009b04 <xTaskCheckForTimeOut+0xc0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d007      	beq.n	8009ac6 <xTaskCheckForTimeOut+0x82>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d302      	bcc.n	8009ac6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	61fb      	str	r3, [r7, #28]
 8009ac4:	e015      	b.n	8009af2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d20b      	bcs.n	8009ae8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	1ad2      	subs	r2, r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff ff9b 	bl	8009a18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	61fb      	str	r3, [r7, #28]
 8009ae6:	e004      	b.n	8009af2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009aee:	2301      	movs	r3, #1
 8009af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009af2:	f000 fc67 	bl	800a3c4 <vPortExitCritical>

	return xReturn;
 8009af6:	69fb      	ldr	r3, [r7, #28]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000ae8 	.word	0x20000ae8
 8009b04:	20000afc 	.word	0x20000afc

08009b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b0c:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <vTaskMissedYield+0x14>)
 8009b0e:	2201      	movs	r2, #1
 8009b10:	601a      	str	r2, [r3, #0]
}
 8009b12:	bf00      	nop
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	20000af8 	.word	0x20000af8

08009b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b28:	f000 f852 	bl	8009bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <prvIdleTask+0x28>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d9f9      	bls.n	8009b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <prvIdleTask+0x2c>)
 8009b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b44:	e7f0      	b.n	8009b28 <prvIdleTask+0x8>
 8009b46:	bf00      	nop
 8009b48:	200009e8 	.word	0x200009e8
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b56:	2300      	movs	r3, #0
 8009b58:	607b      	str	r3, [r7, #4]
 8009b5a:	e00c      	b.n	8009b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4a12      	ldr	r2, [pc, #72]	; (8009bb0 <prvInitialiseTaskLists+0x60>)
 8009b68:	4413      	add	r3, r2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fc6b 	bl	8008446 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3301      	adds	r3, #1
 8009b74:	607b      	str	r3, [r7, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b06      	cmp	r3, #6
 8009b7a:	d9ef      	bls.n	8009b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b7c:	480d      	ldr	r0, [pc, #52]	; (8009bb4 <prvInitialiseTaskLists+0x64>)
 8009b7e:	f7fe fc62 	bl	8008446 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b82:	480d      	ldr	r0, [pc, #52]	; (8009bb8 <prvInitialiseTaskLists+0x68>)
 8009b84:	f7fe fc5f 	bl	8008446 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b88:	480c      	ldr	r0, [pc, #48]	; (8009bbc <prvInitialiseTaskLists+0x6c>)
 8009b8a:	f7fe fc5c 	bl	8008446 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b8e:	480c      	ldr	r0, [pc, #48]	; (8009bc0 <prvInitialiseTaskLists+0x70>)
 8009b90:	f7fe fc59 	bl	8008446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b94:	480b      	ldr	r0, [pc, #44]	; (8009bc4 <prvInitialiseTaskLists+0x74>)
 8009b96:	f7fe fc56 	bl	8008446 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <prvInitialiseTaskLists+0x78>)
 8009b9c:	4a05      	ldr	r2, [pc, #20]	; (8009bb4 <prvInitialiseTaskLists+0x64>)
 8009b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <prvInitialiseTaskLists+0x7c>)
 8009ba2:	4a05      	ldr	r2, [pc, #20]	; (8009bb8 <prvInitialiseTaskLists+0x68>)
 8009ba4:	601a      	str	r2, [r3, #0]
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200009e8 	.word	0x200009e8
 8009bb4:	20000a74 	.word	0x20000a74
 8009bb8:	20000a88 	.word	0x20000a88
 8009bbc:	20000aa4 	.word	0x20000aa4
 8009bc0:	20000ab8 	.word	0x20000ab8
 8009bc4:	20000ad0 	.word	0x20000ad0
 8009bc8:	20000a9c 	.word	0x20000a9c
 8009bcc:	20000aa0 	.word	0x20000aa0

08009bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bd6:	e019      	b.n	8009c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bd8:	f000 fbc4 	bl	800a364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bdc:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <prvCheckTasksWaitingTermination+0x50>)
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fcb6 	bl	800855a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bee:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <prvCheckTasksWaitingTermination+0x54>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	4a0b      	ldr	r2, [pc, #44]	; (8009c24 <prvCheckTasksWaitingTermination+0x54>)
 8009bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bf8:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <prvCheckTasksWaitingTermination+0x58>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	4a0a      	ldr	r2, [pc, #40]	; (8009c28 <prvCheckTasksWaitingTermination+0x58>)
 8009c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c02:	f000 fbdf 	bl	800a3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f810 	bl	8009c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c0c:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <prvCheckTasksWaitingTermination+0x58>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e1      	bne.n	8009bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20000ab8 	.word	0x20000ab8
 8009c24:	20000ae4 	.word	0x20000ae4
 8009c28:	20000acc 	.word	0x20000acc

08009c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d108      	bne.n	8009c50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fd7c 	bl	800a740 <vPortFree>
				vPortFree( pxTCB );
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fd79 	bl	800a740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c4e:	e018      	b.n	8009c82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d103      	bne.n	8009c62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fd70 	bl	800a740 <vPortFree>
	}
 8009c60:	e00f      	b.n	8009c82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d00a      	beq.n	8009c82 <prvDeleteTCB+0x56>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60fb      	str	r3, [r7, #12]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <prvDeleteTCB+0x54>
	}
 8009c82:	bf00      	nop
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <prvResetNextTaskUnblockTime+0x38>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8009c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ca4:	e008      	b.n	8009cb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca6:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <prvResetNextTaskUnblockTime+0x38>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	4a04      	ldr	r2, [pc, #16]	; (8009cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8009cb6:	6013      	str	r3, [r2, #0]
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	20000a9c 	.word	0x20000a9c
 8009cc8:	20000b04 	.word	0x20000b04

08009ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <xTaskGetSchedulerState+0x34>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	607b      	str	r3, [r7, #4]
 8009cde:	e008      	b.n	8009cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ce0:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <xTaskGetSchedulerState+0x38>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ce8:	2302      	movs	r3, #2
 8009cea:	607b      	str	r3, [r7, #4]
 8009cec:	e001      	b.n	8009cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009cf2:	687b      	ldr	r3, [r7, #4]
	}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	20000af0 	.word	0x20000af0
 8009d04:	20000b0c 	.word	0x20000b0c

08009d08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d05e      	beq.n	8009ddc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d22:	4b31      	ldr	r3, [pc, #196]	; (8009de8 <xTaskPriorityInherit+0xe0>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d24e      	bcs.n	8009dca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	db06      	blt.n	8009d42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d34:	4b2c      	ldr	r3, [pc, #176]	; (8009de8 <xTaskPriorityInherit+0xe0>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	f1c3 0207 	rsb	r2, r3, #7
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	6959      	ldr	r1, [r3, #20]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4a26      	ldr	r2, [pc, #152]	; (8009dec <xTaskPriorityInherit+0xe4>)
 8009d54:	4413      	add	r3, r2
 8009d56:	4299      	cmp	r1, r3
 8009d58:	d12f      	bne.n	8009dba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fbfb 	bl	800855a <uxListRemove>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	2201      	movs	r2, #1
 8009d70:	fa02 f303 	lsl.w	r3, r2, r3
 8009d74:	43da      	mvns	r2, r3
 8009d76:	4b1e      	ldr	r3, [pc, #120]	; (8009df0 <xTaskPriorityInherit+0xe8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	4a1c      	ldr	r2, [pc, #112]	; (8009df0 <xTaskPriorityInherit+0xe8>)
 8009d7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <xTaskPriorityInherit+0xe0>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8e:	2201      	movs	r2, #1
 8009d90:	409a      	lsls	r2, r3
 8009d92:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <xTaskPriorityInherit+0xe8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	4a15      	ldr	r2, [pc, #84]	; (8009df0 <xTaskPriorityInherit+0xe8>)
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4a10      	ldr	r2, [pc, #64]	; (8009dec <xTaskPriorityInherit+0xe4>)
 8009daa:	441a      	add	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4619      	mov	r1, r3
 8009db2:	4610      	mov	r0, r2
 8009db4:	f7fe fb74 	bl	80084a0 <vListInsertEnd>
 8009db8:	e004      	b.n	8009dc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dba:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <xTaskPriorityInherit+0xe0>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	e008      	b.n	8009ddc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <xTaskPriorityInherit+0xe0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d201      	bcs.n	8009ddc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
	}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200009e4 	.word	0x200009e4
 8009dec:	200009e8 	.word	0x200009e8
 8009df0:	20000aec 	.word	0x20000aec

08009df4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d06e      	beq.n	8009ee8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e0a:	4b3a      	ldr	r3, [pc, #232]	; (8009ef4 <xTaskPriorityDisinherit+0x100>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d00a      	beq.n	8009e2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	60fb      	str	r3, [r7, #12]
}
 8009e26:	bf00      	nop
 8009e28:	e7fe      	b.n	8009e28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e4c:	1e5a      	subs	r2, r3, #1
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d044      	beq.n	8009ee8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d140      	bne.n	8009ee8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fb75 	bl	800855a <uxListRemove>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d115      	bne.n	8009ea2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7a:	491f      	ldr	r1, [pc, #124]	; (8009ef8 <xTaskPriorityDisinherit+0x104>)
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <xTaskPriorityDisinherit+0xae>
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	2201      	movs	r2, #1
 8009e92:	fa02 f303 	lsl.w	r3, r2, r3
 8009e96:	43da      	mvns	r2, r3
 8009e98:	4b18      	ldr	r3, [pc, #96]	; (8009efc <xTaskPriorityDisinherit+0x108>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	4a17      	ldr	r2, [pc, #92]	; (8009efc <xTaskPriorityDisinherit+0x108>)
 8009ea0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eae:	f1c3 0207 	rsb	r2, r3, #7
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	2201      	movs	r2, #1
 8009ebc:	409a      	lsls	r2, r3
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <xTaskPriorityDisinherit+0x108>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	4a0d      	ldr	r2, [pc, #52]	; (8009efc <xTaskPriorityDisinherit+0x108>)
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4a08      	ldr	r2, [pc, #32]	; (8009ef8 <xTaskPriorityDisinherit+0x104>)
 8009ed6:	441a      	add	r2, r3
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f7fe fade 	bl	80084a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ee8:	697b      	ldr	r3, [r7, #20]
	}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200009e4 	.word	0x200009e4
 8009ef8:	200009e8 	.word	0x200009e8
 8009efc:	20000aec 	.word	0x20000aec

08009f00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d077      	beq.n	800a008 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60fb      	str	r3, [r7, #12]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d902      	bls.n	8009f46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	e002      	b.n	8009f4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	69fa      	ldr	r2, [r7, #28]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d058      	beq.n	800a008 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d153      	bne.n	800a008 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f60:	4b2b      	ldr	r3, [pc, #172]	; (800a010 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d10a      	bne.n	8009f80 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	60bb      	str	r3, [r7, #8]
}
 8009f7c:	bf00      	nop
 8009f7e:	e7fe      	b.n	8009f7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	69fa      	ldr	r2, [r7, #28]
 8009f8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	db04      	blt.n	8009f9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	f1c3 0207 	rsb	r2, r3, #7
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	6959      	ldr	r1, [r3, #20]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4a19      	ldr	r2, [pc, #100]	; (800a014 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009fae:	4413      	add	r3, r2
 8009fb0:	4299      	cmp	r1, r3
 8009fb2:	d129      	bne.n	800a008 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe face 	bl	800855a <uxListRemove>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	2201      	movs	r2, #1
 8009fca:	fa02 f303 	lsl.w	r3, r2, r3
 8009fce:	43da      	mvns	r2, r3
 8009fd0:	4b11      	ldr	r3, [pc, #68]	; (800a018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	4a10      	ldr	r2, [pc, #64]	; (800a018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fd8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fde:	2201      	movs	r2, #1
 8009fe0:	409a      	lsls	r2, r3
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4a06      	ldr	r2, [pc, #24]	; (800a014 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009ffa:	441a      	add	r2, r3
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f7fe fa4c 	bl	80084a0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a008:	bf00      	nop
 800a00a:	3720      	adds	r7, #32
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	200009e4 	.word	0x200009e4
 800a014:	200009e8 	.word	0x200009e8
 800a018:	20000aec 	.word	0x20000aec

0800a01c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <pvTaskIncrementMutexHeldCount+0x24>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <pvTaskIncrementMutexHeldCount+0x24>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a02e:	3201      	adds	r2, #1
 800a030:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a032:	4b03      	ldr	r3, [pc, #12]	; (800a040 <pvTaskIncrementMutexHeldCount+0x24>)
 800a034:	681b      	ldr	r3, [r3, #0]
	}
 800a036:	4618      	mov	r0, r3
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	200009e4 	.word	0x200009e4

0800a044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a04e:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a054:	4b28      	ldr	r3, [pc, #160]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3304      	adds	r3, #4
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fa7d 	bl	800855a <uxListRemove>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a066:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	2201      	movs	r2, #1
 800a06e:	fa02 f303 	lsl.w	r3, r2, r3
 800a072:	43da      	mvns	r2, r3
 800a074:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4013      	ands	r3, r2
 800a07a:	4a20      	ldr	r2, [pc, #128]	; (800a0fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a07c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a084:	d10a      	bne.n	800a09c <prvAddCurrentTaskToDelayedList+0x58>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a08c:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3304      	adds	r3, #4
 800a092:	4619      	mov	r1, r3
 800a094:	481a      	ldr	r0, [pc, #104]	; (800a100 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a096:	f7fe fa03 	bl	80084a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a09a:	e026      	b.n	800a0ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0a4:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d209      	bcs.n	800a0c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0b4:	4b13      	ldr	r3, [pc, #76]	; (800a104 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fe fa11 	bl	80084e8 <vListInsert>
}
 800a0c6:	e010      	b.n	800a0ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0c8:	4b0f      	ldr	r3, [pc, #60]	; (800a108 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f7fe fa07 	bl	80084e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0da:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d202      	bcs.n	800a0ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a0e4:	4a09      	ldr	r2, [pc, #36]	; (800a10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6013      	str	r3, [r2, #0]
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000ae8 	.word	0x20000ae8
 800a0f8:	200009e4 	.word	0x200009e4
 800a0fc:	20000aec 	.word	0x20000aec
 800a100:	20000ad0 	.word	0x20000ad0
 800a104:	20000aa0 	.word	0x20000aa0
 800a108:	20000a9c 	.word	0x20000a9c
 800a10c:	20000b04 	.word	0x20000b04

0800a110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3b04      	subs	r3, #4
 800a120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3b04      	subs	r3, #4
 800a12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f023 0201 	bic.w	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b04      	subs	r3, #4
 800a13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a140:	4a0c      	ldr	r2, [pc, #48]	; (800a174 <pxPortInitialiseStack+0x64>)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	3b14      	subs	r3, #20
 800a14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3b04      	subs	r3, #4
 800a156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f06f 0202 	mvn.w	r2, #2
 800a15e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3b20      	subs	r3, #32
 800a164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a166:	68fb      	ldr	r3, [r7, #12]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	0800a179 	.word	0x0800a179

0800a178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <prvTaskExitError+0x54>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d00a      	beq.n	800a1a2 <prvTaskExitError+0x2a>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	60fb      	str	r3, [r7, #12]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <prvTaskExitError+0x28>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1b6:	bf00      	nop
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0fc      	beq.n	800a1b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1be:	bf00      	nop
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	20000024 	.word	0x20000024

0800a1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1d0:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <pxCurrentTCBConst2>)
 800a1d2:	6819      	ldr	r1, [r3, #0]
 800a1d4:	6808      	ldr	r0, [r1, #0]
 800a1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1da:	f380 8809 	msr	PSP, r0
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f04f 0000 	mov.w	r0, #0
 800a1e6:	f380 8811 	msr	BASEPRI, r0
 800a1ea:	4770      	bx	lr
 800a1ec:	f3af 8000 	nop.w

0800a1f0 <pxCurrentTCBConst2>:
 800a1f0:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop

0800a1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1f8:	4808      	ldr	r0, [pc, #32]	; (800a21c <prvPortStartFirstTask+0x24>)
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	6800      	ldr	r0, [r0, #0]
 800a1fe:	f380 8808 	msr	MSP, r0
 800a202:	f04f 0000 	mov.w	r0, #0
 800a206:	f380 8814 	msr	CONTROL, r0
 800a20a:	b662      	cpsie	i
 800a20c:	b661      	cpsie	f
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	df00      	svc	0
 800a218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a21a:	bf00      	nop
 800a21c:	e000ed08 	.word	0xe000ed08

0800a220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a226:	4b46      	ldr	r3, [pc, #280]	; (800a340 <xPortStartScheduler+0x120>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a46      	ldr	r2, [pc, #280]	; (800a344 <xPortStartScheduler+0x124>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d10a      	bne.n	800a246 <xPortStartScheduler+0x26>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	613b      	str	r3, [r7, #16]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a246:	4b3e      	ldr	r3, [pc, #248]	; (800a340 <xPortStartScheduler+0x120>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a3f      	ldr	r2, [pc, #252]	; (800a348 <xPortStartScheduler+0x128>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d10a      	bne.n	800a266 <xPortStartScheduler+0x46>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	60fb      	str	r3, [r7, #12]
}
 800a262:	bf00      	nop
 800a264:	e7fe      	b.n	800a264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a266:	4b39      	ldr	r3, [pc, #228]	; (800a34c <xPortStartScheduler+0x12c>)
 800a268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	22ff      	movs	r2, #255	; 0xff
 800a276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a280:	78fb      	ldrb	r3, [r7, #3]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	4b31      	ldr	r3, [pc, #196]	; (800a350 <xPortStartScheduler+0x130>)
 800a28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a28e:	4b31      	ldr	r3, [pc, #196]	; (800a354 <xPortStartScheduler+0x134>)
 800a290:	2207      	movs	r2, #7
 800a292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a294:	e009      	b.n	800a2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a296:	4b2f      	ldr	r3, [pc, #188]	; (800a354 <xPortStartScheduler+0x134>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	4a2d      	ldr	r2, [pc, #180]	; (800a354 <xPortStartScheduler+0x134>)
 800a29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b2:	2b80      	cmp	r3, #128	; 0x80
 800a2b4:	d0ef      	beq.n	800a296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2b6:	4b27      	ldr	r3, [pc, #156]	; (800a354 <xPortStartScheduler+0x134>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f1c3 0307 	rsb	r3, r3, #7
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d00a      	beq.n	800a2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	60bb      	str	r3, [r7, #8]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2d8:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <xPortStartScheduler+0x134>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	4a1d      	ldr	r2, [pc, #116]	; (800a354 <xPortStartScheduler+0x134>)
 800a2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2e2:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <xPortStartScheduler+0x134>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ea:	4a1a      	ldr	r2, [pc, #104]	; (800a354 <xPortStartScheduler+0x134>)
 800a2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2f6:	4b18      	ldr	r3, [pc, #96]	; (800a358 <xPortStartScheduler+0x138>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a17      	ldr	r2, [pc, #92]	; (800a358 <xPortStartScheduler+0x138>)
 800a2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a302:	4b15      	ldr	r3, [pc, #84]	; (800a358 <xPortStartScheduler+0x138>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a14      	ldr	r2, [pc, #80]	; (800a358 <xPortStartScheduler+0x138>)
 800a308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a30e:	f000 f8dd 	bl	800a4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <xPortStartScheduler+0x13c>)
 800a314:	2200      	movs	r2, #0
 800a316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a318:	f000 f8fc 	bl	800a514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a31c:	4b10      	ldr	r3, [pc, #64]	; (800a360 <xPortStartScheduler+0x140>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a0f      	ldr	r2, [pc, #60]	; (800a360 <xPortStartScheduler+0x140>)
 800a322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a328:	f7ff ff66 	bl	800a1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a32c:	f7ff fa92 	bl	8009854 <vTaskSwitchContext>
	prvTaskExitError();
 800a330:	f7ff ff22 	bl	800a178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	e000ed00 	.word	0xe000ed00
 800a344:	410fc271 	.word	0x410fc271
 800a348:	410fc270 	.word	0x410fc270
 800a34c:	e000e400 	.word	0xe000e400
 800a350:	20000b10 	.word	0x20000b10
 800a354:	20000b14 	.word	0x20000b14
 800a358:	e000ed20 	.word	0xe000ed20
 800a35c:	20000024 	.word	0x20000024
 800a360:	e000ef34 	.word	0xe000ef34

0800a364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	607b      	str	r3, [r7, #4]
}
 800a37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a37e:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <vPortEnterCritical+0x58>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	4a0d      	ldr	r2, [pc, #52]	; (800a3bc <vPortEnterCritical+0x58>)
 800a386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a388:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <vPortEnterCritical+0x58>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d10f      	bne.n	800a3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <vPortEnterCritical+0x5c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	603b      	str	r3, [r7, #0]
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <vPortEnterCritical+0x4a>
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	20000024 	.word	0x20000024
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3ca:	4b12      	ldr	r3, [pc, #72]	; (800a414 <vPortExitCritical+0x50>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <vPortExitCritical+0x24>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	607b      	str	r3, [r7, #4]
}
 800a3e4:	bf00      	nop
 800a3e6:	e7fe      	b.n	800a3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3e8:	4b0a      	ldr	r3, [pc, #40]	; (800a414 <vPortExitCritical+0x50>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	4a09      	ldr	r2, [pc, #36]	; (800a414 <vPortExitCritical+0x50>)
 800a3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3f2:	4b08      	ldr	r3, [pc, #32]	; (800a414 <vPortExitCritical+0x50>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d105      	bne.n	800a406 <vPortExitCritical+0x42>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	f383 8811 	msr	BASEPRI, r3
}
 800a404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a406:	bf00      	nop
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000024 	.word	0x20000024
	...

0800a420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a420:	f3ef 8009 	mrs	r0, PSP
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	4b15      	ldr	r3, [pc, #84]	; (800a480 <pxCurrentTCBConst>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	f01e 0f10 	tst.w	lr, #16
 800a430:	bf08      	it	eq
 800a432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43a:	6010      	str	r0, [r2, #0]
 800a43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a444:	f380 8811 	msr	BASEPRI, r0
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f7ff fa00 	bl	8009854 <vTaskSwitchContext>
 800a454:	f04f 0000 	mov.w	r0, #0
 800a458:	f380 8811 	msr	BASEPRI, r0
 800a45c:	bc09      	pop	{r0, r3}
 800a45e:	6819      	ldr	r1, [r3, #0]
 800a460:	6808      	ldr	r0, [r1, #0]
 800a462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a466:	f01e 0f10 	tst.w	lr, #16
 800a46a:	bf08      	it	eq
 800a46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a470:	f380 8809 	msr	PSP, r0
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst>:
 800a480:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	607b      	str	r3, [r7, #4]
}
 800a4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4a2:	f7ff f91f 	bl	80096e4 <xTaskIncrementTick>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4ac:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <SysTick_Handler+0x40>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	f383 8811 	msr	BASEPRI, r3
}
 800a4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <vPortSetupTimerInterrupt+0x34>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <vPortSetupTimerInterrupt+0x38>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <vPortSetupTimerInterrupt+0x3c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <vPortSetupTimerInterrupt+0x40>)
 800a4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e6:	099b      	lsrs	r3, r3, #6
 800a4e8:	4a09      	ldr	r2, [pc, #36]	; (800a510 <vPortSetupTimerInterrupt+0x44>)
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ee:	4b04      	ldr	r3, [pc, #16]	; (800a500 <vPortSetupTimerInterrupt+0x34>)
 800a4f0:	2207      	movs	r2, #7
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	e000e010 	.word	0xe000e010
 800a504:	e000e018 	.word	0xe000e018
 800a508:	20000004 	.word	0x20000004
 800a50c:	10624dd3 	.word	0x10624dd3
 800a510:	e000e014 	.word	0xe000e014

0800a514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a524 <vPortEnableVFP+0x10>
 800a518:	6801      	ldr	r1, [r0, #0]
 800a51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a51e:	6001      	str	r1, [r0, #0]
 800a520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a522:	bf00      	nop
 800a524:	e000ed88 	.word	0xe000ed88

0800a528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a52e:	f3ef 8305 	mrs	r3, IPSR
 800a532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b0f      	cmp	r3, #15
 800a538:	d914      	bls.n	800a564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a53a:	4a17      	ldr	r2, [pc, #92]	; (800a598 <vPortValidateInterruptPriority+0x70>)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a544:	4b15      	ldr	r3, [pc, #84]	; (800a59c <vPortValidateInterruptPriority+0x74>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	7afa      	ldrb	r2, [r7, #11]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d20a      	bcs.n	800a564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	607b      	str	r3, [r7, #4]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a564:	4b0e      	ldr	r3, [pc, #56]	; (800a5a0 <vPortValidateInterruptPriority+0x78>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a56c:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <vPortValidateInterruptPriority+0x7c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d90a      	bls.n	800a58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	603b      	str	r3, [r7, #0]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <vPortValidateInterruptPriority+0x60>
	}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	e000e3f0 	.word	0xe000e3f0
 800a59c:	20000b10 	.word	0x20000b10
 800a5a0:	e000ed0c 	.word	0xe000ed0c
 800a5a4:	20000b14 	.word	0x20000b14

0800a5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5b4:	f7fe ffec 	bl	8009590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5b8:	4b5b      	ldr	r3, [pc, #364]	; (800a728 <pvPortMalloc+0x180>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5c0:	f000 f920 	bl	800a804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5c4:	4b59      	ldr	r3, [pc, #356]	; (800a72c <pvPortMalloc+0x184>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f040 8093 	bne.w	800a6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01d      	beq.n	800a614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5d8:	2208      	movs	r2, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d014      	beq.n	800a614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f023 0307 	bic.w	r3, r3, #7
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <pvPortMalloc+0x6c>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	617b      	str	r3, [r7, #20]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d06e      	beq.n	800a6f8 <pvPortMalloc+0x150>
 800a61a:	4b45      	ldr	r3, [pc, #276]	; (800a730 <pvPortMalloc+0x188>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d869      	bhi.n	800a6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a624:	4b43      	ldr	r3, [pc, #268]	; (800a734 <pvPortMalloc+0x18c>)
 800a626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a628:	4b42      	ldr	r3, [pc, #264]	; (800a734 <pvPortMalloc+0x18c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a62e:	e004      	b.n	800a63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	429a      	cmp	r2, r3
 800a642:	d903      	bls.n	800a64c <pvPortMalloc+0xa4>
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f1      	bne.n	800a630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a64c:	4b36      	ldr	r3, [pc, #216]	; (800a728 <pvPortMalloc+0x180>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a652:	429a      	cmp	r2, r3
 800a654:	d050      	beq.n	800a6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2208      	movs	r2, #8
 800a65c:	4413      	add	r3, r2
 800a65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	2308      	movs	r3, #8
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	429a      	cmp	r2, r3
 800a676:	d91f      	bls.n	800a6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	613b      	str	r3, [r7, #16]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6b2:	69b8      	ldr	r0, [r7, #24]
 800a6b4:	f000 f908 	bl	800a8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6b8:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <pvPortMalloc+0x188>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	4a1b      	ldr	r2, [pc, #108]	; (800a730 <pvPortMalloc+0x188>)
 800a6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <pvPortMalloc+0x188>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4b1b      	ldr	r3, [pc, #108]	; (800a738 <pvPortMalloc+0x190>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d203      	bcs.n	800a6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6d2:	4b17      	ldr	r3, [pc, #92]	; (800a730 <pvPortMalloc+0x188>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a18      	ldr	r2, [pc, #96]	; (800a738 <pvPortMalloc+0x190>)
 800a6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	4b13      	ldr	r3, [pc, #76]	; (800a72c <pvPortMalloc+0x184>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <pvPortMalloc+0x194>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4a11      	ldr	r2, [pc, #68]	; (800a73c <pvPortMalloc+0x194>)
 800a6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6f8:	f7fe ff58 	bl	80095ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00a      	beq.n	800a71c <pvPortMalloc+0x174>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60fb      	str	r3, [r7, #12]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <pvPortMalloc+0x172>
	return pvReturn;
 800a71c:	69fb      	ldr	r3, [r7, #28]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3728      	adds	r7, #40	; 0x28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20004720 	.word	0x20004720
 800a72c:	20004734 	.word	0x20004734
 800a730:	20004724 	.word	0x20004724
 800a734:	20004718 	.word	0x20004718
 800a738:	20004728 	.word	0x20004728
 800a73c:	2000472c 	.word	0x2000472c

0800a740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d04d      	beq.n	800a7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a752:	2308      	movs	r3, #8
 800a754:	425b      	negs	r3, r3
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4413      	add	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	4b24      	ldr	r3, [pc, #144]	; (800a7f8 <vPortFree+0xb8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4013      	ands	r3, r2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10a      	bne.n	800a784 <vPortFree+0x44>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60fb      	str	r3, [r7, #12]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00a      	beq.n	800a7a2 <vPortFree+0x62>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	60bb      	str	r3, [r7, #8]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	4b14      	ldr	r3, [pc, #80]	; (800a7f8 <vPortFree+0xb8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01e      	beq.n	800a7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d11a      	bne.n	800a7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <vPortFree+0xb8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7c8:	f7fe fee2 	bl	8009590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <vPortFree+0xbc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4a09      	ldr	r2, [pc, #36]	; (800a7fc <vPortFree+0xbc>)
 800a7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7da:	6938      	ldr	r0, [r7, #16]
 800a7dc:	f000 f874 	bl	800a8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <vPortFree+0xc0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	4a06      	ldr	r2, [pc, #24]	; (800a800 <vPortFree+0xc0>)
 800a7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ea:	f7fe fedf 	bl	80095ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7ee:	bf00      	nop
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20004734 	.word	0x20004734
 800a7fc:	20004724 	.word	0x20004724
 800a800:	20004730 	.word	0x20004730

0800a804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a80a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a810:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <prvHeapInit+0xac>)
 800a812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3307      	adds	r3, #7
 800a822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0307 	bic.w	r3, r3, #7
 800a82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	4a1f      	ldr	r2, [pc, #124]	; (800a8b0 <prvHeapInit+0xac>)
 800a834:	4413      	add	r3, r2
 800a836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a83c:	4a1d      	ldr	r2, [pc, #116]	; (800a8b4 <prvHeapInit+0xb0>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a842:	4b1c      	ldr	r3, [pc, #112]	; (800a8b4 <prvHeapInit+0xb0>)
 800a844:	2200      	movs	r2, #0
 800a846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a850:	2208      	movs	r2, #8
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <prvHeapInit+0xb4>)
 800a864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a866:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <prvHeapInit+0xb4>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2200      	movs	r2, #0
 800a86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a86e:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <prvHeapInit+0xb4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <prvHeapInit+0xb4>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <prvHeapInit+0xb8>)
 800a892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4a09      	ldr	r2, [pc, #36]	; (800a8c0 <prvHeapInit+0xbc>)
 800a89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <prvHeapInit+0xc0>)
 800a89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	20000b18 	.word	0x20000b18
 800a8b4:	20004718 	.word	0x20004718
 800a8b8:	20004720 	.word	0x20004720
 800a8bc:	20004728 	.word	0x20004728
 800a8c0:	20004724 	.word	0x20004724
 800a8c4:	20004734 	.word	0x20004734

0800a8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8d0:	4b28      	ldr	r3, [pc, #160]	; (800a974 <prvInsertBlockIntoFreeList+0xac>)
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e002      	b.n	800a8dc <prvInsertBlockIntoFreeList+0x14>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d8f7      	bhi.n	800a8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d108      	bne.n	800a90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	441a      	add	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d118      	bne.n	800a950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	4b15      	ldr	r3, [pc, #84]	; (800a978 <prvInsertBlockIntoFreeList+0xb0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	429a      	cmp	r2, r3
 800a928:	d00d      	beq.n	800a946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	441a      	add	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	e008      	b.n	800a958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <prvInsertBlockIntoFreeList+0xb0>)
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e003      	b.n	800a958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d002      	beq.n	800a966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a966:	bf00      	nop
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20004718 	.word	0x20004718
 800a978:	20004720 	.word	0x20004720

0800a97c <siprintf>:
 800a97c:	b40e      	push	{r1, r2, r3}
 800a97e:	b500      	push	{lr}
 800a980:	b09c      	sub	sp, #112	; 0x70
 800a982:	ab1d      	add	r3, sp, #116	; 0x74
 800a984:	9002      	str	r0, [sp, #8]
 800a986:	9006      	str	r0, [sp, #24]
 800a988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a98c:	4809      	ldr	r0, [pc, #36]	; (800a9b4 <siprintf+0x38>)
 800a98e:	9107      	str	r1, [sp, #28]
 800a990:	9104      	str	r1, [sp, #16]
 800a992:	4909      	ldr	r1, [pc, #36]	; (800a9b8 <siprintf+0x3c>)
 800a994:	f853 2b04 	ldr.w	r2, [r3], #4
 800a998:	9105      	str	r1, [sp, #20]
 800a99a:	6800      	ldr	r0, [r0, #0]
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	a902      	add	r1, sp, #8
 800a9a0:	f000 f9a0 	bl	800ace4 <_svfiprintf_r>
 800a9a4:	9b02      	ldr	r3, [sp, #8]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	b01c      	add	sp, #112	; 0x70
 800a9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b0:	b003      	add	sp, #12
 800a9b2:	4770      	bx	lr
 800a9b4:	20000074 	.word	0x20000074
 800a9b8:	ffff0208 	.word	0xffff0208

0800a9bc <memset>:
 800a9bc:	4402      	add	r2, r0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d100      	bne.n	800a9c6 <memset+0xa>
 800a9c4:	4770      	bx	lr
 800a9c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ca:	e7f9      	b.n	800a9c0 <memset+0x4>

0800a9cc <__errno>:
 800a9cc:	4b01      	ldr	r3, [pc, #4]	; (800a9d4 <__errno+0x8>)
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20000074 	.word	0x20000074

0800a9d8 <__libc_init_array>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	4d0d      	ldr	r5, [pc, #52]	; (800aa10 <__libc_init_array+0x38>)
 800a9dc:	4c0d      	ldr	r4, [pc, #52]	; (800aa14 <__libc_init_array+0x3c>)
 800a9de:	1b64      	subs	r4, r4, r5
 800a9e0:	10a4      	asrs	r4, r4, #2
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	42a6      	cmp	r6, r4
 800a9e6:	d109      	bne.n	800a9fc <__libc_init_array+0x24>
 800a9e8:	4d0b      	ldr	r5, [pc, #44]	; (800aa18 <__libc_init_array+0x40>)
 800a9ea:	4c0c      	ldr	r4, [pc, #48]	; (800aa1c <__libc_init_array+0x44>)
 800a9ec:	f000 fc6a 	bl	800b2c4 <_init>
 800a9f0:	1b64      	subs	r4, r4, r5
 800a9f2:	10a4      	asrs	r4, r4, #2
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	42a6      	cmp	r6, r4
 800a9f8:	d105      	bne.n	800aa06 <__libc_init_array+0x2e>
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa00:	4798      	blx	r3
 800aa02:	3601      	adds	r6, #1
 800aa04:	e7ee      	b.n	800a9e4 <__libc_init_array+0xc>
 800aa06:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0a:	4798      	blx	r3
 800aa0c:	3601      	adds	r6, #1
 800aa0e:	e7f2      	b.n	800a9f6 <__libc_init_array+0x1e>
 800aa10:	0800b88c 	.word	0x0800b88c
 800aa14:	0800b88c 	.word	0x0800b88c
 800aa18:	0800b88c 	.word	0x0800b88c
 800aa1c:	0800b890 	.word	0x0800b890

0800aa20 <__retarget_lock_acquire_recursive>:
 800aa20:	4770      	bx	lr

0800aa22 <__retarget_lock_release_recursive>:
 800aa22:	4770      	bx	lr

0800aa24 <memcpy>:
 800aa24:	440a      	add	r2, r1
 800aa26:	4291      	cmp	r1, r2
 800aa28:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa2c:	d100      	bne.n	800aa30 <memcpy+0xc>
 800aa2e:	4770      	bx	lr
 800aa30:	b510      	push	{r4, lr}
 800aa32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa3a:	4291      	cmp	r1, r2
 800aa3c:	d1f9      	bne.n	800aa32 <memcpy+0xe>
 800aa3e:	bd10      	pop	{r4, pc}

0800aa40 <_free_r>:
 800aa40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa42:	2900      	cmp	r1, #0
 800aa44:	d044      	beq.n	800aad0 <_free_r+0x90>
 800aa46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4a:	9001      	str	r0, [sp, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa52:	bfb8      	it	lt
 800aa54:	18e4      	addlt	r4, r4, r3
 800aa56:	f000 f8df 	bl	800ac18 <__malloc_lock>
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <_free_r+0x94>)
 800aa5c:	9801      	ldr	r0, [sp, #4]
 800aa5e:	6813      	ldr	r3, [r2, #0]
 800aa60:	b933      	cbnz	r3, 800aa70 <_free_r+0x30>
 800aa62:	6063      	str	r3, [r4, #4]
 800aa64:	6014      	str	r4, [r2, #0]
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa6c:	f000 b8da 	b.w	800ac24 <__malloc_unlock>
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	d908      	bls.n	800aa86 <_free_r+0x46>
 800aa74:	6825      	ldr	r5, [r4, #0]
 800aa76:	1961      	adds	r1, r4, r5
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf01      	itttt	eq
 800aa7c:	6819      	ldreq	r1, [r3, #0]
 800aa7e:	685b      	ldreq	r3, [r3, #4]
 800aa80:	1949      	addeq	r1, r1, r5
 800aa82:	6021      	streq	r1, [r4, #0]
 800aa84:	e7ed      	b.n	800aa62 <_free_r+0x22>
 800aa86:	461a      	mov	r2, r3
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	b10b      	cbz	r3, 800aa90 <_free_r+0x50>
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d9fa      	bls.n	800aa86 <_free_r+0x46>
 800aa90:	6811      	ldr	r1, [r2, #0]
 800aa92:	1855      	adds	r5, r2, r1
 800aa94:	42a5      	cmp	r5, r4
 800aa96:	d10b      	bne.n	800aab0 <_free_r+0x70>
 800aa98:	6824      	ldr	r4, [r4, #0]
 800aa9a:	4421      	add	r1, r4
 800aa9c:	1854      	adds	r4, r2, r1
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	6011      	str	r1, [r2, #0]
 800aaa2:	d1e0      	bne.n	800aa66 <_free_r+0x26>
 800aaa4:	681c      	ldr	r4, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	6053      	str	r3, [r2, #4]
 800aaaa:	440c      	add	r4, r1
 800aaac:	6014      	str	r4, [r2, #0]
 800aaae:	e7da      	b.n	800aa66 <_free_r+0x26>
 800aab0:	d902      	bls.n	800aab8 <_free_r+0x78>
 800aab2:	230c      	movs	r3, #12
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	e7d6      	b.n	800aa66 <_free_r+0x26>
 800aab8:	6825      	ldr	r5, [r4, #0]
 800aaba:	1961      	adds	r1, r4, r5
 800aabc:	428b      	cmp	r3, r1
 800aabe:	bf04      	itt	eq
 800aac0:	6819      	ldreq	r1, [r3, #0]
 800aac2:	685b      	ldreq	r3, [r3, #4]
 800aac4:	6063      	str	r3, [r4, #4]
 800aac6:	bf04      	itt	eq
 800aac8:	1949      	addeq	r1, r1, r5
 800aaca:	6021      	streq	r1, [r4, #0]
 800aacc:	6054      	str	r4, [r2, #4]
 800aace:	e7ca      	b.n	800aa66 <_free_r+0x26>
 800aad0:	b003      	add	sp, #12
 800aad2:	bd30      	pop	{r4, r5, pc}
 800aad4:	20004878 	.word	0x20004878

0800aad8 <sbrk_aligned>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	4e0e      	ldr	r6, [pc, #56]	; (800ab14 <sbrk_aligned+0x3c>)
 800aadc:	460c      	mov	r4, r1
 800aade:	6831      	ldr	r1, [r6, #0]
 800aae0:	4605      	mov	r5, r0
 800aae2:	b911      	cbnz	r1, 800aaea <sbrk_aligned+0x12>
 800aae4:	f000 fba6 	bl	800b234 <_sbrk_r>
 800aae8:	6030      	str	r0, [r6, #0]
 800aaea:	4621      	mov	r1, r4
 800aaec:	4628      	mov	r0, r5
 800aaee:	f000 fba1 	bl	800b234 <_sbrk_r>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	d00a      	beq.n	800ab0c <sbrk_aligned+0x34>
 800aaf6:	1cc4      	adds	r4, r0, #3
 800aaf8:	f024 0403 	bic.w	r4, r4, #3
 800aafc:	42a0      	cmp	r0, r4
 800aafe:	d007      	beq.n	800ab10 <sbrk_aligned+0x38>
 800ab00:	1a21      	subs	r1, r4, r0
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 fb96 	bl	800b234 <_sbrk_r>
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d101      	bne.n	800ab10 <sbrk_aligned+0x38>
 800ab0c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab10:	4620      	mov	r0, r4
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	2000487c 	.word	0x2000487c

0800ab18 <_malloc_r>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	1ccd      	adds	r5, r1, #3
 800ab1e:	f025 0503 	bic.w	r5, r5, #3
 800ab22:	3508      	adds	r5, #8
 800ab24:	2d0c      	cmp	r5, #12
 800ab26:	bf38      	it	cc
 800ab28:	250c      	movcc	r5, #12
 800ab2a:	2d00      	cmp	r5, #0
 800ab2c:	4607      	mov	r7, r0
 800ab2e:	db01      	blt.n	800ab34 <_malloc_r+0x1c>
 800ab30:	42a9      	cmp	r1, r5
 800ab32:	d905      	bls.n	800ab40 <_malloc_r+0x28>
 800ab34:	230c      	movs	r3, #12
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	2600      	movs	r6, #0
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac14 <_malloc_r+0xfc>
 800ab44:	f000 f868 	bl	800ac18 <__malloc_lock>
 800ab48:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4c:	461c      	mov	r4, r3
 800ab4e:	bb5c      	cbnz	r4, 800aba8 <_malloc_r+0x90>
 800ab50:	4629      	mov	r1, r5
 800ab52:	4638      	mov	r0, r7
 800ab54:	f7ff ffc0 	bl	800aad8 <sbrk_aligned>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	d155      	bne.n	800ac0a <_malloc_r+0xf2>
 800ab5e:	f8d8 4000 	ldr.w	r4, [r8]
 800ab62:	4626      	mov	r6, r4
 800ab64:	2e00      	cmp	r6, #0
 800ab66:	d145      	bne.n	800abf4 <_malloc_r+0xdc>
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	d048      	beq.n	800abfe <_malloc_r+0xe6>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4638      	mov	r0, r7
 800ab72:	eb04 0903 	add.w	r9, r4, r3
 800ab76:	f000 fb5d 	bl	800b234 <_sbrk_r>
 800ab7a:	4581      	cmp	r9, r0
 800ab7c:	d13f      	bne.n	800abfe <_malloc_r+0xe6>
 800ab7e:	6821      	ldr	r1, [r4, #0]
 800ab80:	1a6d      	subs	r5, r5, r1
 800ab82:	4629      	mov	r1, r5
 800ab84:	4638      	mov	r0, r7
 800ab86:	f7ff ffa7 	bl	800aad8 <sbrk_aligned>
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	d037      	beq.n	800abfe <_malloc_r+0xe6>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	442b      	add	r3, r5
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	f8d8 3000 	ldr.w	r3, [r8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d038      	beq.n	800ac0e <_malloc_r+0xf6>
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	42a2      	cmp	r2, r4
 800aba0:	d12b      	bne.n	800abfa <_malloc_r+0xe2>
 800aba2:	2200      	movs	r2, #0
 800aba4:	605a      	str	r2, [r3, #4]
 800aba6:	e00f      	b.n	800abc8 <_malloc_r+0xb0>
 800aba8:	6822      	ldr	r2, [r4, #0]
 800abaa:	1b52      	subs	r2, r2, r5
 800abac:	d41f      	bmi.n	800abee <_malloc_r+0xd6>
 800abae:	2a0b      	cmp	r2, #11
 800abb0:	d917      	bls.n	800abe2 <_malloc_r+0xca>
 800abb2:	1961      	adds	r1, r4, r5
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	6025      	str	r5, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	6059      	strne	r1, [r3, #4]
 800abbc:	6863      	ldr	r3, [r4, #4]
 800abbe:	bf08      	it	eq
 800abc0:	f8c8 1000 	streq.w	r1, [r8]
 800abc4:	5162      	str	r2, [r4, r5]
 800abc6:	604b      	str	r3, [r1, #4]
 800abc8:	4638      	mov	r0, r7
 800abca:	f104 060b 	add.w	r6, r4, #11
 800abce:	f000 f829 	bl	800ac24 <__malloc_unlock>
 800abd2:	f026 0607 	bic.w	r6, r6, #7
 800abd6:	1d23      	adds	r3, r4, #4
 800abd8:	1af2      	subs	r2, r6, r3
 800abda:	d0ae      	beq.n	800ab3a <_malloc_r+0x22>
 800abdc:	1b9b      	subs	r3, r3, r6
 800abde:	50a3      	str	r3, [r4, r2]
 800abe0:	e7ab      	b.n	800ab3a <_malloc_r+0x22>
 800abe2:	42a3      	cmp	r3, r4
 800abe4:	6862      	ldr	r2, [r4, #4]
 800abe6:	d1dd      	bne.n	800aba4 <_malloc_r+0x8c>
 800abe8:	f8c8 2000 	str.w	r2, [r8]
 800abec:	e7ec      	b.n	800abc8 <_malloc_r+0xb0>
 800abee:	4623      	mov	r3, r4
 800abf0:	6864      	ldr	r4, [r4, #4]
 800abf2:	e7ac      	b.n	800ab4e <_malloc_r+0x36>
 800abf4:	4634      	mov	r4, r6
 800abf6:	6876      	ldr	r6, [r6, #4]
 800abf8:	e7b4      	b.n	800ab64 <_malloc_r+0x4c>
 800abfa:	4613      	mov	r3, r2
 800abfc:	e7cc      	b.n	800ab98 <_malloc_r+0x80>
 800abfe:	230c      	movs	r3, #12
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	4638      	mov	r0, r7
 800ac04:	f000 f80e 	bl	800ac24 <__malloc_unlock>
 800ac08:	e797      	b.n	800ab3a <_malloc_r+0x22>
 800ac0a:	6025      	str	r5, [r4, #0]
 800ac0c:	e7dc      	b.n	800abc8 <_malloc_r+0xb0>
 800ac0e:	605b      	str	r3, [r3, #4]
 800ac10:	deff      	udf	#255	; 0xff
 800ac12:	bf00      	nop
 800ac14:	20004878 	.word	0x20004878

0800ac18 <__malloc_lock>:
 800ac18:	4801      	ldr	r0, [pc, #4]	; (800ac20 <__malloc_lock+0x8>)
 800ac1a:	f7ff bf01 	b.w	800aa20 <__retarget_lock_acquire_recursive>
 800ac1e:	bf00      	nop
 800ac20:	20004874 	.word	0x20004874

0800ac24 <__malloc_unlock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__malloc_unlock+0x8>)
 800ac26:	f7ff befc 	b.w	800aa22 <__retarget_lock_release_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	20004874 	.word	0x20004874

0800ac30 <__ssputs_r>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	688e      	ldr	r6, [r1, #8]
 800ac36:	461f      	mov	r7, r3
 800ac38:	42be      	cmp	r6, r7
 800ac3a:	680b      	ldr	r3, [r1, #0]
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	4690      	mov	r8, r2
 800ac42:	d82c      	bhi.n	800ac9e <__ssputs_r+0x6e>
 800ac44:	898a      	ldrh	r2, [r1, #12]
 800ac46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac4a:	d026      	beq.n	800ac9a <__ssputs_r+0x6a>
 800ac4c:	6965      	ldr	r5, [r4, #20]
 800ac4e:	6909      	ldr	r1, [r1, #16]
 800ac50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac54:	eba3 0901 	sub.w	r9, r3, r1
 800ac58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac5c:	1c7b      	adds	r3, r7, #1
 800ac5e:	444b      	add	r3, r9
 800ac60:	106d      	asrs	r5, r5, #1
 800ac62:	429d      	cmp	r5, r3
 800ac64:	bf38      	it	cc
 800ac66:	461d      	movcc	r5, r3
 800ac68:	0553      	lsls	r3, r2, #21
 800ac6a:	d527      	bpl.n	800acbc <__ssputs_r+0x8c>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	f7ff ff53 	bl	800ab18 <_malloc_r>
 800ac72:	4606      	mov	r6, r0
 800ac74:	b360      	cbz	r0, 800acd0 <__ssputs_r+0xa0>
 800ac76:	6921      	ldr	r1, [r4, #16]
 800ac78:	464a      	mov	r2, r9
 800ac7a:	f7ff fed3 	bl	800aa24 <memcpy>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	6126      	str	r6, [r4, #16]
 800ac8c:	6165      	str	r5, [r4, #20]
 800ac8e:	444e      	add	r6, r9
 800ac90:	eba5 0509 	sub.w	r5, r5, r9
 800ac94:	6026      	str	r6, [r4, #0]
 800ac96:	60a5      	str	r5, [r4, #8]
 800ac98:	463e      	mov	r6, r7
 800ac9a:	42be      	cmp	r6, r7
 800ac9c:	d900      	bls.n	800aca0 <__ssputs_r+0x70>
 800ac9e:	463e      	mov	r6, r7
 800aca0:	6820      	ldr	r0, [r4, #0]
 800aca2:	4632      	mov	r2, r6
 800aca4:	4641      	mov	r1, r8
 800aca6:	f000 faab 	bl	800b200 <memmove>
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	1b9b      	subs	r3, r3, r6
 800acae:	60a3      	str	r3, [r4, #8]
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	4433      	add	r3, r6
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	2000      	movs	r0, #0
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	462a      	mov	r2, r5
 800acbe:	f000 fac9 	bl	800b254 <_realloc_r>
 800acc2:	4606      	mov	r6, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d1e0      	bne.n	800ac8a <__ssputs_r+0x5a>
 800acc8:	6921      	ldr	r1, [r4, #16]
 800acca:	4650      	mov	r0, sl
 800accc:	f7ff feb8 	bl	800aa40 <_free_r>
 800acd0:	230c      	movs	r3, #12
 800acd2:	f8ca 3000 	str.w	r3, [sl]
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	e7e9      	b.n	800acb8 <__ssputs_r+0x88>

0800ace4 <_svfiprintf_r>:
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	4698      	mov	r8, r3
 800acea:	898b      	ldrh	r3, [r1, #12]
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	b09d      	sub	sp, #116	; 0x74
 800acf0:	4607      	mov	r7, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	4614      	mov	r4, r2
 800acf6:	d50e      	bpl.n	800ad16 <_svfiprintf_r+0x32>
 800acf8:	690b      	ldr	r3, [r1, #16]
 800acfa:	b963      	cbnz	r3, 800ad16 <_svfiprintf_r+0x32>
 800acfc:	2140      	movs	r1, #64	; 0x40
 800acfe:	f7ff ff0b 	bl	800ab18 <_malloc_r>
 800ad02:	6028      	str	r0, [r5, #0]
 800ad04:	6128      	str	r0, [r5, #16]
 800ad06:	b920      	cbnz	r0, 800ad12 <_svfiprintf_r+0x2e>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e0d0      	b.n	800aeb4 <_svfiprintf_r+0x1d0>
 800ad12:	2340      	movs	r3, #64	; 0x40
 800ad14:	616b      	str	r3, [r5, #20]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1a:	2320      	movs	r3, #32
 800ad1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad24:	2330      	movs	r3, #48	; 0x30
 800ad26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aecc <_svfiprintf_r+0x1e8>
 800ad2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2e:	f04f 0901 	mov.w	r9, #1
 800ad32:	4623      	mov	r3, r4
 800ad34:	469a      	mov	sl, r3
 800ad36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad3a:	b10a      	cbz	r2, 800ad40 <_svfiprintf_r+0x5c>
 800ad3c:	2a25      	cmp	r2, #37	; 0x25
 800ad3e:	d1f9      	bne.n	800ad34 <_svfiprintf_r+0x50>
 800ad40:	ebba 0b04 	subs.w	fp, sl, r4
 800ad44:	d00b      	beq.n	800ad5e <_svfiprintf_r+0x7a>
 800ad46:	465b      	mov	r3, fp
 800ad48:	4622      	mov	r2, r4
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff ff6f 	bl	800ac30 <__ssputs_r>
 800ad52:	3001      	adds	r0, #1
 800ad54:	f000 80a9 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad5a:	445a      	add	r2, fp
 800ad5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 80a1 	beq.w	800aeaa <_svfiprintf_r+0x1c6>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad72:	f10a 0a01 	add.w	sl, sl, #1
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	9307      	str	r3, [sp, #28]
 800ad7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad7e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad80:	4654      	mov	r4, sl
 800ad82:	2205      	movs	r2, #5
 800ad84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad88:	4850      	ldr	r0, [pc, #320]	; (800aecc <_svfiprintf_r+0x1e8>)
 800ad8a:	f7f5 fa59 	bl	8000240 <memchr>
 800ad8e:	9a04      	ldr	r2, [sp, #16]
 800ad90:	b9d8      	cbnz	r0, 800adca <_svfiprintf_r+0xe6>
 800ad92:	06d0      	lsls	r0, r2, #27
 800ad94:	bf44      	itt	mi
 800ad96:	2320      	movmi	r3, #32
 800ad98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9c:	0711      	lsls	r1, r2, #28
 800ad9e:	bf44      	itt	mi
 800ada0:	232b      	movmi	r3, #43	; 0x2b
 800ada2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada6:	f89a 3000 	ldrb.w	r3, [sl]
 800adaa:	2b2a      	cmp	r3, #42	; 0x2a
 800adac:	d015      	beq.n	800adda <_svfiprintf_r+0xf6>
 800adae:	9a07      	ldr	r2, [sp, #28]
 800adb0:	4654      	mov	r4, sl
 800adb2:	2000      	movs	r0, #0
 800adb4:	f04f 0c0a 	mov.w	ip, #10
 800adb8:	4621      	mov	r1, r4
 800adba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adbe:	3b30      	subs	r3, #48	; 0x30
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d94d      	bls.n	800ae60 <_svfiprintf_r+0x17c>
 800adc4:	b1b0      	cbz	r0, 800adf4 <_svfiprintf_r+0x110>
 800adc6:	9207      	str	r2, [sp, #28]
 800adc8:	e014      	b.n	800adf4 <_svfiprintf_r+0x110>
 800adca:	eba0 0308 	sub.w	r3, r0, r8
 800adce:	fa09 f303 	lsl.w	r3, r9, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	46a2      	mov	sl, r4
 800add8:	e7d2      	b.n	800ad80 <_svfiprintf_r+0x9c>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	1d19      	adds	r1, r3, #4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	9103      	str	r1, [sp, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfbb      	ittet	lt
 800ade6:	425b      	neglt	r3, r3
 800ade8:	f042 0202 	orrlt.w	r2, r2, #2
 800adec:	9307      	strge	r3, [sp, #28]
 800adee:	9307      	strlt	r3, [sp, #28]
 800adf0:	bfb8      	it	lt
 800adf2:	9204      	strlt	r2, [sp, #16]
 800adf4:	7823      	ldrb	r3, [r4, #0]
 800adf6:	2b2e      	cmp	r3, #46	; 0x2e
 800adf8:	d10c      	bne.n	800ae14 <_svfiprintf_r+0x130>
 800adfa:	7863      	ldrb	r3, [r4, #1]
 800adfc:	2b2a      	cmp	r3, #42	; 0x2a
 800adfe:	d134      	bne.n	800ae6a <_svfiprintf_r+0x186>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9203      	str	r2, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb8      	it	lt
 800ae0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae10:	3402      	adds	r4, #2
 800ae12:	9305      	str	r3, [sp, #20]
 800ae14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aedc <_svfiprintf_r+0x1f8>
 800ae18:	7821      	ldrb	r1, [r4, #0]
 800ae1a:	2203      	movs	r2, #3
 800ae1c:	4650      	mov	r0, sl
 800ae1e:	f7f5 fa0f 	bl	8000240 <memchr>
 800ae22:	b138      	cbz	r0, 800ae34 <_svfiprintf_r+0x150>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	eba0 000a 	sub.w	r0, r0, sl
 800ae2a:	2240      	movs	r2, #64	; 0x40
 800ae2c:	4082      	lsls	r2, r0
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	3401      	adds	r4, #1
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	4825      	ldr	r0, [pc, #148]	; (800aed0 <_svfiprintf_r+0x1ec>)
 800ae3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae3e:	2206      	movs	r2, #6
 800ae40:	f7f5 f9fe 	bl	8000240 <memchr>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d038      	beq.n	800aeba <_svfiprintf_r+0x1d6>
 800ae48:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <_svfiprintf_r+0x1f0>)
 800ae4a:	bb1b      	cbnz	r3, 800ae94 <_svfiprintf_r+0x1b0>
 800ae4c:	9b03      	ldr	r3, [sp, #12]
 800ae4e:	3307      	adds	r3, #7
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5a:	4433      	add	r3, r6
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	e768      	b.n	800ad32 <_svfiprintf_r+0x4e>
 800ae60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae64:	460c      	mov	r4, r1
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7a6      	b.n	800adb8 <_svfiprintf_r+0xd4>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f04f 0c0a 	mov.w	ip, #10
 800ae76:	4620      	mov	r0, r4
 800ae78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7c:	3a30      	subs	r2, #48	; 0x30
 800ae7e:	2a09      	cmp	r2, #9
 800ae80:	d903      	bls.n	800ae8a <_svfiprintf_r+0x1a6>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c6      	beq.n	800ae14 <_svfiprintf_r+0x130>
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	e7c4      	b.n	800ae14 <_svfiprintf_r+0x130>
 800ae8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2301      	movs	r3, #1
 800ae92:	e7f0      	b.n	800ae76 <_svfiprintf_r+0x192>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4b0f      	ldr	r3, [pc, #60]	; (800aed8 <_svfiprintf_r+0x1f4>)
 800ae9c:	a904      	add	r1, sp, #16
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f3af 8000 	nop.w
 800aea4:	1c42      	adds	r2, r0, #1
 800aea6:	4606      	mov	r6, r0
 800aea8:	d1d6      	bne.n	800ae58 <_svfiprintf_r+0x174>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	065b      	lsls	r3, r3, #25
 800aeae:	f53f af2d 	bmi.w	800ad0c <_svfiprintf_r+0x28>
 800aeb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb4:	b01d      	add	sp, #116	; 0x74
 800aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeba:	ab03      	add	r3, sp, #12
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	462a      	mov	r2, r5
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <_svfiprintf_r+0x1f4>)
 800aec2:	a904      	add	r1, sp, #16
 800aec4:	4638      	mov	r0, r7
 800aec6:	f000 f879 	bl	800afbc <_printf_i>
 800aeca:	e7eb      	b.n	800aea4 <_svfiprintf_r+0x1c0>
 800aecc:	0800b850 	.word	0x0800b850
 800aed0:	0800b85a 	.word	0x0800b85a
 800aed4:	00000000 	.word	0x00000000
 800aed8:	0800ac31 	.word	0x0800ac31
 800aedc:	0800b856 	.word	0x0800b856

0800aee0 <_printf_common>:
 800aee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee4:	4616      	mov	r6, r2
 800aee6:	4699      	mov	r9, r3
 800aee8:	688a      	ldr	r2, [r1, #8]
 800aeea:	690b      	ldr	r3, [r1, #16]
 800aeec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	bfb8      	it	lt
 800aef4:	4613      	movlt	r3, r2
 800aef6:	6033      	str	r3, [r6, #0]
 800aef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aefc:	4607      	mov	r7, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	b10a      	cbz	r2, 800af06 <_printf_common+0x26>
 800af02:	3301      	adds	r3, #1
 800af04:	6033      	str	r3, [r6, #0]
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	0699      	lsls	r1, r3, #26
 800af0a:	bf42      	ittt	mi
 800af0c:	6833      	ldrmi	r3, [r6, #0]
 800af0e:	3302      	addmi	r3, #2
 800af10:	6033      	strmi	r3, [r6, #0]
 800af12:	6825      	ldr	r5, [r4, #0]
 800af14:	f015 0506 	ands.w	r5, r5, #6
 800af18:	d106      	bne.n	800af28 <_printf_common+0x48>
 800af1a:	f104 0a19 	add.w	sl, r4, #25
 800af1e:	68e3      	ldr	r3, [r4, #12]
 800af20:	6832      	ldr	r2, [r6, #0]
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	42ab      	cmp	r3, r5
 800af26:	dc26      	bgt.n	800af76 <_printf_common+0x96>
 800af28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af2c:	1e13      	subs	r3, r2, #0
 800af2e:	6822      	ldr	r2, [r4, #0]
 800af30:	bf18      	it	ne
 800af32:	2301      	movne	r3, #1
 800af34:	0692      	lsls	r2, r2, #26
 800af36:	d42b      	bmi.n	800af90 <_printf_common+0xb0>
 800af38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af3c:	4649      	mov	r1, r9
 800af3e:	4638      	mov	r0, r7
 800af40:	47c0      	blx	r8
 800af42:	3001      	adds	r0, #1
 800af44:	d01e      	beq.n	800af84 <_printf_common+0xa4>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	6922      	ldr	r2, [r4, #16]
 800af4a:	f003 0306 	and.w	r3, r3, #6
 800af4e:	2b04      	cmp	r3, #4
 800af50:	bf02      	ittt	eq
 800af52:	68e5      	ldreq	r5, [r4, #12]
 800af54:	6833      	ldreq	r3, [r6, #0]
 800af56:	1aed      	subeq	r5, r5, r3
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	bf0c      	ite	eq
 800af5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af60:	2500      	movne	r5, #0
 800af62:	4293      	cmp	r3, r2
 800af64:	bfc4      	itt	gt
 800af66:	1a9b      	subgt	r3, r3, r2
 800af68:	18ed      	addgt	r5, r5, r3
 800af6a:	2600      	movs	r6, #0
 800af6c:	341a      	adds	r4, #26
 800af6e:	42b5      	cmp	r5, r6
 800af70:	d11a      	bne.n	800afa8 <_printf_common+0xc8>
 800af72:	2000      	movs	r0, #0
 800af74:	e008      	b.n	800af88 <_printf_common+0xa8>
 800af76:	2301      	movs	r3, #1
 800af78:	4652      	mov	r2, sl
 800af7a:	4649      	mov	r1, r9
 800af7c:	4638      	mov	r0, r7
 800af7e:	47c0      	blx	r8
 800af80:	3001      	adds	r0, #1
 800af82:	d103      	bne.n	800af8c <_printf_common+0xac>
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8c:	3501      	adds	r5, #1
 800af8e:	e7c6      	b.n	800af1e <_printf_common+0x3e>
 800af90:	18e1      	adds	r1, r4, r3
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	2030      	movs	r0, #48	; 0x30
 800af96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af9a:	4422      	add	r2, r4
 800af9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afa4:	3302      	adds	r3, #2
 800afa6:	e7c7      	b.n	800af38 <_printf_common+0x58>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4622      	mov	r2, r4
 800afac:	4649      	mov	r1, r9
 800afae:	4638      	mov	r0, r7
 800afb0:	47c0      	blx	r8
 800afb2:	3001      	adds	r0, #1
 800afb4:	d0e6      	beq.n	800af84 <_printf_common+0xa4>
 800afb6:	3601      	adds	r6, #1
 800afb8:	e7d9      	b.n	800af6e <_printf_common+0x8e>
	...

0800afbc <_printf_i>:
 800afbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afc0:	7e0f      	ldrb	r7, [r1, #24]
 800afc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afc4:	2f78      	cmp	r7, #120	; 0x78
 800afc6:	4691      	mov	r9, r2
 800afc8:	4680      	mov	r8, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	469a      	mov	sl, r3
 800afce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afd2:	d807      	bhi.n	800afe4 <_printf_i+0x28>
 800afd4:	2f62      	cmp	r7, #98	; 0x62
 800afd6:	d80a      	bhi.n	800afee <_printf_i+0x32>
 800afd8:	2f00      	cmp	r7, #0
 800afda:	f000 80d4 	beq.w	800b186 <_printf_i+0x1ca>
 800afde:	2f58      	cmp	r7, #88	; 0x58
 800afe0:	f000 80c0 	beq.w	800b164 <_printf_i+0x1a8>
 800afe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afec:	e03a      	b.n	800b064 <_printf_i+0xa8>
 800afee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aff2:	2b15      	cmp	r3, #21
 800aff4:	d8f6      	bhi.n	800afe4 <_printf_i+0x28>
 800aff6:	a101      	add	r1, pc, #4	; (adr r1, 800affc <_printf_i+0x40>)
 800aff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800affc:	0800b055 	.word	0x0800b055
 800b000:	0800b069 	.word	0x0800b069
 800b004:	0800afe5 	.word	0x0800afe5
 800b008:	0800afe5 	.word	0x0800afe5
 800b00c:	0800afe5 	.word	0x0800afe5
 800b010:	0800afe5 	.word	0x0800afe5
 800b014:	0800b069 	.word	0x0800b069
 800b018:	0800afe5 	.word	0x0800afe5
 800b01c:	0800afe5 	.word	0x0800afe5
 800b020:	0800afe5 	.word	0x0800afe5
 800b024:	0800afe5 	.word	0x0800afe5
 800b028:	0800b16d 	.word	0x0800b16d
 800b02c:	0800b095 	.word	0x0800b095
 800b030:	0800b127 	.word	0x0800b127
 800b034:	0800afe5 	.word	0x0800afe5
 800b038:	0800afe5 	.word	0x0800afe5
 800b03c:	0800b18f 	.word	0x0800b18f
 800b040:	0800afe5 	.word	0x0800afe5
 800b044:	0800b095 	.word	0x0800b095
 800b048:	0800afe5 	.word	0x0800afe5
 800b04c:	0800afe5 	.word	0x0800afe5
 800b050:	0800b12f 	.word	0x0800b12f
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	1d1a      	adds	r2, r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	602a      	str	r2, [r5, #0]
 800b05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b064:	2301      	movs	r3, #1
 800b066:	e09f      	b.n	800b1a8 <_printf_i+0x1ec>
 800b068:	6820      	ldr	r0, [r4, #0]
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	0607      	lsls	r7, r0, #24
 800b06e:	f103 0104 	add.w	r1, r3, #4
 800b072:	6029      	str	r1, [r5, #0]
 800b074:	d501      	bpl.n	800b07a <_printf_i+0xbe>
 800b076:	681e      	ldr	r6, [r3, #0]
 800b078:	e003      	b.n	800b082 <_printf_i+0xc6>
 800b07a:	0646      	lsls	r6, r0, #25
 800b07c:	d5fb      	bpl.n	800b076 <_printf_i+0xba>
 800b07e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b082:	2e00      	cmp	r6, #0
 800b084:	da03      	bge.n	800b08e <_printf_i+0xd2>
 800b086:	232d      	movs	r3, #45	; 0x2d
 800b088:	4276      	negs	r6, r6
 800b08a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b08e:	485a      	ldr	r0, [pc, #360]	; (800b1f8 <_printf_i+0x23c>)
 800b090:	230a      	movs	r3, #10
 800b092:	e012      	b.n	800b0ba <_printf_i+0xfe>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	6820      	ldr	r0, [r4, #0]
 800b098:	1d19      	adds	r1, r3, #4
 800b09a:	6029      	str	r1, [r5, #0]
 800b09c:	0605      	lsls	r5, r0, #24
 800b09e:	d501      	bpl.n	800b0a4 <_printf_i+0xe8>
 800b0a0:	681e      	ldr	r6, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <_printf_i+0xee>
 800b0a4:	0641      	lsls	r1, r0, #25
 800b0a6:	d5fb      	bpl.n	800b0a0 <_printf_i+0xe4>
 800b0a8:	881e      	ldrh	r6, [r3, #0]
 800b0aa:	4853      	ldr	r0, [pc, #332]	; (800b1f8 <_printf_i+0x23c>)
 800b0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2308      	moveq	r3, #8
 800b0b2:	230a      	movne	r3, #10
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ba:	6865      	ldr	r5, [r4, #4]
 800b0bc:	60a5      	str	r5, [r4, #8]
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	bfa2      	ittt	ge
 800b0c2:	6821      	ldrge	r1, [r4, #0]
 800b0c4:	f021 0104 	bicge.w	r1, r1, #4
 800b0c8:	6021      	strge	r1, [r4, #0]
 800b0ca:	b90e      	cbnz	r6, 800b0d0 <_printf_i+0x114>
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	d04b      	beq.n	800b168 <_printf_i+0x1ac>
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0d6:	fb03 6711 	mls	r7, r3, r1, r6
 800b0da:	5dc7      	ldrb	r7, [r0, r7]
 800b0dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0e0:	4637      	mov	r7, r6
 800b0e2:	42bb      	cmp	r3, r7
 800b0e4:	460e      	mov	r6, r1
 800b0e6:	d9f4      	bls.n	800b0d2 <_printf_i+0x116>
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d10b      	bne.n	800b104 <_printf_i+0x148>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	07de      	lsls	r6, r3, #31
 800b0f0:	d508      	bpl.n	800b104 <_printf_i+0x148>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	bfde      	ittt	le
 800b0fa:	2330      	movle	r3, #48	; 0x30
 800b0fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b100:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b104:	1b52      	subs	r2, r2, r5
 800b106:	6122      	str	r2, [r4, #16]
 800b108:	f8cd a000 	str.w	sl, [sp]
 800b10c:	464b      	mov	r3, r9
 800b10e:	aa03      	add	r2, sp, #12
 800b110:	4621      	mov	r1, r4
 800b112:	4640      	mov	r0, r8
 800b114:	f7ff fee4 	bl	800aee0 <_printf_common>
 800b118:	3001      	adds	r0, #1
 800b11a:	d14a      	bne.n	800b1b2 <_printf_i+0x1f6>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	b004      	add	sp, #16
 800b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	f043 0320 	orr.w	r3, r3, #32
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	4833      	ldr	r0, [pc, #204]	; (800b1fc <_printf_i+0x240>)
 800b130:	2778      	movs	r7, #120	; 0x78
 800b132:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	6829      	ldr	r1, [r5, #0]
 800b13a:	061f      	lsls	r7, r3, #24
 800b13c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b140:	d402      	bmi.n	800b148 <_printf_i+0x18c>
 800b142:	065f      	lsls	r7, r3, #25
 800b144:	bf48      	it	mi
 800b146:	b2b6      	uxthmi	r6, r6
 800b148:	07df      	lsls	r7, r3, #31
 800b14a:	bf48      	it	mi
 800b14c:	f043 0320 	orrmi.w	r3, r3, #32
 800b150:	6029      	str	r1, [r5, #0]
 800b152:	bf48      	it	mi
 800b154:	6023      	strmi	r3, [r4, #0]
 800b156:	b91e      	cbnz	r6, 800b160 <_printf_i+0x1a4>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	f023 0320 	bic.w	r3, r3, #32
 800b15e:	6023      	str	r3, [r4, #0]
 800b160:	2310      	movs	r3, #16
 800b162:	e7a7      	b.n	800b0b4 <_printf_i+0xf8>
 800b164:	4824      	ldr	r0, [pc, #144]	; (800b1f8 <_printf_i+0x23c>)
 800b166:	e7e4      	b.n	800b132 <_printf_i+0x176>
 800b168:	4615      	mov	r5, r2
 800b16a:	e7bd      	b.n	800b0e8 <_printf_i+0x12c>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	6826      	ldr	r6, [r4, #0]
 800b170:	6961      	ldr	r1, [r4, #20]
 800b172:	1d18      	adds	r0, r3, #4
 800b174:	6028      	str	r0, [r5, #0]
 800b176:	0635      	lsls	r5, r6, #24
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	d501      	bpl.n	800b180 <_printf_i+0x1c4>
 800b17c:	6019      	str	r1, [r3, #0]
 800b17e:	e002      	b.n	800b186 <_printf_i+0x1ca>
 800b180:	0670      	lsls	r0, r6, #25
 800b182:	d5fb      	bpl.n	800b17c <_printf_i+0x1c0>
 800b184:	8019      	strh	r1, [r3, #0]
 800b186:	2300      	movs	r3, #0
 800b188:	6123      	str	r3, [r4, #16]
 800b18a:	4615      	mov	r5, r2
 800b18c:	e7bc      	b.n	800b108 <_printf_i+0x14c>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	1d1a      	adds	r2, r3, #4
 800b192:	602a      	str	r2, [r5, #0]
 800b194:	681d      	ldr	r5, [r3, #0]
 800b196:	6862      	ldr	r2, [r4, #4]
 800b198:	2100      	movs	r1, #0
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7f5 f850 	bl	8000240 <memchr>
 800b1a0:	b108      	cbz	r0, 800b1a6 <_printf_i+0x1ea>
 800b1a2:	1b40      	subs	r0, r0, r5
 800b1a4:	6060      	str	r0, [r4, #4]
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b0:	e7aa      	b.n	800b108 <_printf_i+0x14c>
 800b1b2:	6923      	ldr	r3, [r4, #16]
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	47d0      	blx	sl
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d0ad      	beq.n	800b11c <_printf_i+0x160>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	079b      	lsls	r3, r3, #30
 800b1c4:	d413      	bmi.n	800b1ee <_printf_i+0x232>
 800b1c6:	68e0      	ldr	r0, [r4, #12]
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	4298      	cmp	r0, r3
 800b1cc:	bfb8      	it	lt
 800b1ce:	4618      	movlt	r0, r3
 800b1d0:	e7a6      	b.n	800b120 <_printf_i+0x164>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4640      	mov	r0, r8
 800b1da:	47d0      	blx	sl
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d09d      	beq.n	800b11c <_printf_i+0x160>
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	9903      	ldr	r1, [sp, #12]
 800b1e6:	1a5b      	subs	r3, r3, r1
 800b1e8:	42ab      	cmp	r3, r5
 800b1ea:	dcf2      	bgt.n	800b1d2 <_printf_i+0x216>
 800b1ec:	e7eb      	b.n	800b1c6 <_printf_i+0x20a>
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	f104 0619 	add.w	r6, r4, #25
 800b1f4:	e7f5      	b.n	800b1e2 <_printf_i+0x226>
 800b1f6:	bf00      	nop
 800b1f8:	0800b861 	.word	0x0800b861
 800b1fc:	0800b872 	.word	0x0800b872

0800b200 <memmove>:
 800b200:	4288      	cmp	r0, r1
 800b202:	b510      	push	{r4, lr}
 800b204:	eb01 0402 	add.w	r4, r1, r2
 800b208:	d902      	bls.n	800b210 <memmove+0x10>
 800b20a:	4284      	cmp	r4, r0
 800b20c:	4623      	mov	r3, r4
 800b20e:	d807      	bhi.n	800b220 <memmove+0x20>
 800b210:	1e43      	subs	r3, r0, #1
 800b212:	42a1      	cmp	r1, r4
 800b214:	d008      	beq.n	800b228 <memmove+0x28>
 800b216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b21e:	e7f8      	b.n	800b212 <memmove+0x12>
 800b220:	4402      	add	r2, r0
 800b222:	4601      	mov	r1, r0
 800b224:	428a      	cmp	r2, r1
 800b226:	d100      	bne.n	800b22a <memmove+0x2a>
 800b228:	bd10      	pop	{r4, pc}
 800b22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b232:	e7f7      	b.n	800b224 <memmove+0x24>

0800b234 <_sbrk_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d06      	ldr	r5, [pc, #24]	; (800b250 <_sbrk_r+0x1c>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	602b      	str	r3, [r5, #0]
 800b240:	f7f6 ff76 	bl	8002130 <_sbrk>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_sbrk_r+0x1a>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_sbrk_r+0x1a>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	20004870 	.word	0x20004870

0800b254 <_realloc_r>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	4680      	mov	r8, r0
 800b25a:	4614      	mov	r4, r2
 800b25c:	460e      	mov	r6, r1
 800b25e:	b921      	cbnz	r1, 800b26a <_realloc_r+0x16>
 800b260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	4611      	mov	r1, r2
 800b266:	f7ff bc57 	b.w	800ab18 <_malloc_r>
 800b26a:	b92a      	cbnz	r2, 800b278 <_realloc_r+0x24>
 800b26c:	f7ff fbe8 	bl	800aa40 <_free_r>
 800b270:	4625      	mov	r5, r4
 800b272:	4628      	mov	r0, r5
 800b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b278:	f000 f81b 	bl	800b2b2 <_malloc_usable_size_r>
 800b27c:	4284      	cmp	r4, r0
 800b27e:	4607      	mov	r7, r0
 800b280:	d802      	bhi.n	800b288 <_realloc_r+0x34>
 800b282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b286:	d812      	bhi.n	800b2ae <_realloc_r+0x5a>
 800b288:	4621      	mov	r1, r4
 800b28a:	4640      	mov	r0, r8
 800b28c:	f7ff fc44 	bl	800ab18 <_malloc_r>
 800b290:	4605      	mov	r5, r0
 800b292:	2800      	cmp	r0, #0
 800b294:	d0ed      	beq.n	800b272 <_realloc_r+0x1e>
 800b296:	42bc      	cmp	r4, r7
 800b298:	4622      	mov	r2, r4
 800b29a:	4631      	mov	r1, r6
 800b29c:	bf28      	it	cs
 800b29e:	463a      	movcs	r2, r7
 800b2a0:	f7ff fbc0 	bl	800aa24 <memcpy>
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	f7ff fbca 	bl	800aa40 <_free_r>
 800b2ac:	e7e1      	b.n	800b272 <_realloc_r+0x1e>
 800b2ae:	4635      	mov	r5, r6
 800b2b0:	e7df      	b.n	800b272 <_realloc_r+0x1e>

0800b2b2 <_malloc_usable_size_r>:
 800b2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2b6:	1f18      	subs	r0, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfbc      	itt	lt
 800b2bc:	580b      	ldrlt	r3, [r1, r0]
 800b2be:	18c0      	addlt	r0, r0, r3
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <_init>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr

0800b2d0 <_fini>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	bf00      	nop
 800b2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2d6:	bc08      	pop	{r3}
 800b2d8:	469e      	mov	lr, r3
 800b2da:	4770      	bx	lr
